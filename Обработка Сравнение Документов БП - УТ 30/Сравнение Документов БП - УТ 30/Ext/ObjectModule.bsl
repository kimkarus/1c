Перем ТабличныйДокумент;
Перем ТаблицаДокументов;

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
    
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.0");
    
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
    ПараметрыРегистрации.Версия = ЭтотОбъект.Метаданные().Комментарий;
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	//ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);	
	//
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеПривилегированногоРежима();
	ПараметрыРегистрации.Разрешения.Добавить(Разрешение);	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаСозданиеCOMКласса("V83.COMConnector", "{181E893D-73A4-4722-B61D-D604B3D67D47}"); 
	ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
    //
 	ПараметрыРегистрации.Назначение.Добавить("Документ.РеализацияТоваровУслуг");
 	
    КомандаПечати = ПараметрыРегистрации.Команды.Добавить();
	КомандаПечати.Идентификатор = "СравнениеДокументовБП_УТ";
	КомандаПечати.Представление = НСтр("ru = 'Сравнение документов БП-УТ'");
    КомандаПечати.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
    КомандаПечати.ПоказыватьОповещение = Ложь;
    КомандаПечати.Модификатор = "ПечатьMXL";
	
    КомандаПечати = ПараметрыРегистрации.Команды.Добавить();
	КомандаПечати.Идентификатор = "ФоновоеСравнениеДокументовБП_УТ";
	КомандаПечати.Представление = НСтр("ru = 'Фоновое задание сравнение документов БП-УТ'");
    КомандаПечати.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
    КомандаПечати.ПоказыватьОповещение = Истина;
    КомандаПечати.Модификатор = "";
   Возврат ПараметрыРегистрации;
    
КонецФункции

Функция ПараметрыОбработки() Экспорт
	Результат = Новый Структура();
	
	Результат.Вставить("КлючОбъекта","СравнениеДокументовБП_УТ");
	Результат.Вставить("КлючНастроек","Обработка");
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	//ИмяПользователя =  СтрЗаменить(Строка(Пользователь.Ссылка.Наименование)," ", "");
	ИмяПользователя =  Пользователь.Ссылка.Наименование;
	Результат.Вставить("ИмяПользователя", ИмяПользователя);
	Результат.Вставить("ИмяПользователя",ИмяПользователя);
	Если Не ЗначениеЗаполнено(ЭтотОбъект.ИмяПользователя) Тогда
		Результат.Вставить("ИмяПользователя","Админ");
	Иначе
		Результат.Вставить("ИмяПользователя",ИмяПользователя);	
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкиОбработки(НачальныеПараметры = Неопределено) Экспорт
	
	Если Начальныепараметры = Неопределено ТОгда
		Результат = Новый Структура();
	ИНаче
		Результат = НачальныеПараметры;
	КонецЕсли;
	
	СамОбъект = Новый Структура();
	Для каждого Реквизит из ЭтотОбъект.Метаданные().Реквизиты Цикл
 		Если ТипЗнч(ЭтотОбъект[Реквизит.Имя]) <> Тип("ТаблицаЗначений") Тогда
			СамОбъект.Вставить(Реквизит.Имя,ЭтотОбъект[Реквизит.Имя]);
		Иначе
			СамОбъект.Вставить(Реквизит.Имя,ЭтотОбъект[Реквизит.Имя].Выгрузить());
		КонецЕсли;
 	КонецЦикла;
	
	СамОбъект.Вставить("СписокПользователейПолучателей",СписокПользователейПолучателей.Выгрузить());
       
	Результат.Вставить("Объект", СамОбъект);
	
	Возврат Результат;
	
КонецФункции

Функция СохранитьПараметрыОбработки(ПараметрыОбработки, Настройки) Экспорт
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ПараметрыОбработки.КлючОбъекта, ПараметрыОбработки.КлючНастроек, Настройки,,ПараметрыОбработки.ИмяПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	// ХранилищеОбщихНастроек.Cохранить(ПараметрыОбработки.КлючОбъекта,  ПараметрыОбработки.КлючНастроек, Настройки, , ПараметрыОбработки.ИмяПользователя);
КонецФункции

Процедура ВыполнитьЧтениеСохраненныхДанных(Форма) Экспорт
	
	ПараметрыОбработки = ПараметрыОбработки();
	УстановитьПривилегированныйРежим(Истина);
	РезультатНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ПараметрыОбработки.КлючОбъекта, ПараметрыОбработки.КлючНастроек,,,ПараметрыОбработки.ИмяПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	Если РезультатНастроек = Неопределено ТОгда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеОбъекта(Форма,РезультатНастроек);
	
КонецПроцедуры

Процедура ВыполнитьЗаполнениеОбъекта(Форма,РезультатНастроек)
	Для каждого СамРеквизит из РезультатНастроек Цикл
		Если СамРеквизит.Ключ = "Объект" ТОгда
			ВыполнитьЗаполнениеОбъекта(Форма.Объект,СамРеквизит.Значение);
		ИначеЕсли ТипЗнч(СамРеквизит.Значение) = Тип("ТаблицаЗначений") ТОгда
			Форма[СамРеквизит.Ключ].Загрузить(СамРеквизит.Значение);
		ИначеЕсли  ТипЗнч(СамРеквизит.Значение) = Тип("СписокЗначений") ТОгда
		    Форма[СамРеквизит.Ключ].Очистить();
			Для каждого Данные из СамРеквизит.Значение Цикл
				Форма[СамРеквизит.Ключ].Добавить(Данные.Значение, Данные.Представление);
			КонецЦикла;
		ИНаче
			Форма[СамРеквизит.Ключ] = СамРеквизит.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеФоновогоЗадания

Функция АвтоматическоеЗначениеПериода() Экспорт
	
	Результат = Новый СтандартныйПериод;
	Результат.ДатаОкончания = ТекущаяДата();
	Результат.ДатаНачала = НачалоКвартала(НачалоКвартала(ТекущаяДата())-1);
	
	Возврат Результат;
КонецФункции

Процедура ВыполнитьКоманду(Идентификатор, ОбъектыНазначения = Неопределено) Экспорт
	
	Если Идентификатор = "ФоновоеСравнениеДокументовБП_УТ" Тогда
		ПараметрыОбработки = ПараметрыОбработки();
		РезультатНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ПараметрыОбработки.КлючОбъекта, ПараметрыОбработки.КлючНастроек,,,ПараметрыОбработки.ИмяПользователя);
		Если РезультатНастроек = Неопределено ТОгда
			ВывестиТекстСообщения("Нет данных настройки обработки в хранилище!");
			Возврат;
		КонецЕсли;
		
		Если НЕ РезультатНастроек.Объект.ИспользоватьТекущийПериодВФоне Тогда
			РезультатНастроек.Период = АвтоматическоеЗначениеПериода();
		КонецЕсли;
		
		ВыполнитьЗаполнениеОбъекта(ЭтотОбъект,РезультатНастроек.Объект);
		
		ПараметрыПоиска = Новый Структура("ДатаНач,ДатаКон,НаименованиеДокБП,НаименованиеДокУТ,ПоАртикулу,ПоКоду,ИсключитьКонтрагентов",
		РезультатНастроек.Период.ДатаНачала,РезультатНастроек.Период.ДатаОкончания,"","",?(РезультатНастроек.ПоискПО=0,Истина,Ложь),?(РезультатНастроек.ПоискПО=1,Истина,Ложь),?(РезультатНастроек.НеКонтрагенты.Количество() > 0, Истина, Ложь));
		
		ФоновыйЗапуск = Истина;
		РезультатНастроек.Объект.ФоновыйЗапуск = Истина;
		
		РезультатВыполнения = ВыполнитьПоискДанныхИЗаполнениеМакета(ПараметрыПоиска, РезультатНастроек);
		
		Если РезультатВыполнения.Выполнено  Тогда
			ВыполнитьОтправкуПочтовогоПисьма(РезультатВыполнения, РезультатНастроек);
		Иначе
			ВывестиТекстСообщения(РезультатВыполнения.ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОтправкуПочтовогоПисьма(РезультатВыполнения, РезультатНастроек) Экспорт
	
	АдресТабличногоДокументаВоВременномХранилище = ПоместитьВоВременноеХранилище(РезультатВыполнения.ТабличныйДокумент, Новый УникальныйИдентификатор());
	АдресТаблицыЗначенийСОТбором = РезультатВыполнения.АдресТабличныйДокументСОтбором;
	ТекстПисьма = "Сравнение документов из БП в УТ";
	ТемаПисьма = "Сравнение документов из БП в УТ " + Строка(РезультатНастроек.Организации);
	
	СписокПолучаетелейПисем = РезультатНастроек.Объект.СписокПользователейПолучателей;
	Для каждого ФизическоеЛицо из СписокПолучаетелейПисем Цикл
		АдресПочты = ПолучитьАдресЭлектроннойПочты(ФизическоеЛицо.ФизическоеЛицо);
		Если Не ЗначениеЗаполнено(АдресПочты) ТОгда
			ВывестиТекстСообщения("Нет электронной почты у физического лица:" + СокрЛП(Строка(ФизическоеЛицо.ФизическоеЛицо)));
			Продолжить;
		КонецЕсли;
		Если НЕ ОтправитьТабличныйДокументЭлектроннойПочтойКакPDF(РезультатНастроек.Объект.УчетнаяЗапись,
											АдресПочты,ТекстПисьма,ТемаПисьма,АдресТабличногоДокументаВоВременномХранилище,
											АдресТаблицыЗначенийСОТбором) Тогда
			ВывестиТекстСообщения("Письмо не отправлено физическому лицу:" + СокрЛП(Строка(ФизическоеЛицо.ФизическоеЛицо)));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьАдресЭлектроннойПочты(ФизическоеЛицо)
 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка = &ФизическоеЛицо
		|	И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И ФизическиеЛицаКонтактнаяИнформация.Представление <> """"";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Представление;
	КонецЦикла;
	
 	Возврат "";
КонецФункции

Функция ОтправитьТабличныйДокументЭлектроннойПочтойКакPDF(УчетнаяЗаписьПочтыОтправителя, ПочтаПолучателя,
	 ТекстПисьма, ТемаПисьма, АдресТабличногоДокументаВоВременномХранилище, АдресТаблицыЗначенийСОТбором)
	 
	 Отправлено = Ложь;
	 
	 Если УчетнаяЗаписьПочтыОтправителя = Неопределено Или УчетнаяЗаписьПочтыОтправителя.Пустая() Тогда
		 Возврат Отправлено;
	 КонецЕсли;
	 
	 ТабДок = ПолучитьИзВременногоХранилища(АдресТабличногоДокументаВоВременномХранилище);
	 ПотокФайла = Новый ПотокВПамяти();
 	 ТабДок.Записать(ПотокФайла, ТипФайлаТабличногоДокумента.XLSX);
     ДвоичныеДанныеФайла = ПотокФайла.ЗакрытьИПолучитьДвоичныеДанные();
	 ВременноеХранилищеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
	 
	 Вложения = Новый Массив;
	 ОписаниеВложения = Новый Структура("Представление, АдресВоВременномХранилище", ТекстПисьма + ".XLS", ВременноеХранилищеФайла);
	 Вложения.Добавить(ОписаниеВложения);
	 
	 ТабДокументов = ПолучитьИзВременногоХранилища(АдресТаблицыЗначенийСОТбором);

	 ТабДокумент = Новый ТабличныйДокумент;
	 Построитель = Новый ПостроительОтчета;
	 Построитель.ИсточникДанных=Новый ОписаниеИсточникаДанных(ТабДокументов);       
	 Построитель.Вывести(ТабДокумент);
	 
	 ПотокФайла2 = Новый ПотокВПамяти();
	 ТабДокумент.Записать(ПотокФайла2, ТипФайлаТабличногоДокумента.XLSX);
     ДвоичныеДанныеФайла = ПотокФайла2.ЗакрытьИПолучитьДвоичныеДанные();
	 ВременноеХранилищеФайлаТаблицыДокументов = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
	 
	 ОписаниеВложения = Новый Структура("Представление, АдресВоВременномХранилище", "ТаблицаДокументов.XLS", ВременноеХранилищеФайлаТаблицыДокументов);
	 Вложения.Добавить(ОписаниеВложения);

	 
	 ПараметрыПисьма = Новый Структура;
	 ПараметрыПисьма.Вставить("Кому", ПочтаПолучателя);
	 ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	 ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	 ПараметрыПисьма.Вставить("ТипТекста", "ПростойТекст");
	 ПараметрыПисьма.Вставить("Вложения", Вложения);
	 
	 Попытка
		 Идентификатор = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗаписьПочтыОтправителя, ПараметрыПисьма);
		 Если ЗначениеЗаполнено(Идентификатор) Тогда
			 Отправлено = Истина;
		 КонецЕсли;
	 Исключение
		 ЗаписьЖурналаРегистрации("Отправка письма " + ПочтаПолучателя, УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	 КонецПопытки;
	 
	 Возврат Отправлено;
	 
 КонецФункции
#КонецОбласти

#Область СформироватьОтчет

Функция ВыполнитьПоискДанныхИЗаполнениеМакета(ПараметрыПоиска, ПараметрыНастройки) Экспорт
	
	РезультатВыполнения = Новый Структура("Выполнено,ТабличныйДокумент, АдресТаблицыДокументов, ТекстОшибки",Ложь, Новый ТабличныйДокумент, "", "");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТаблицаДокументов = ПараметрыНастройки.ТаблицаДокументов;
	ТаблицаДокументов.Очистить();
	
	//УстановитьПривилегированныйРежим(Истина);
	БД_COM = ВыполнитьПодключение(ПараметрыНастройки.Объект);
	Если БД_COM = Неопределено Тогда
		РезультатВыполнения.ТекстОшибки = "Нет подключения";
		Возврат РезультатВыполнения;
	КонецЕсли;
	//УстановитьПривилегированныйРежим(Ложь);
	
	Адрес_ОтчетОРозничныхПродажах="";
	Адрес_РеализацияТоваровУслуг="";
	Адрес_ВозвратТоваровОтКлиента="";
	Адрес_ПоступлениеТоваровУслуг="";
	Адрес_КорректировкаРеализации="";
	
	Если ПараметрыНастройки.ОтчетОРозничныхПродажах Тогда
		ПараметрыПоиска.Вставить("НаименованиеДокБП", "ОтчетОРозничныхПродажах");
		ПараметрыПоиска.Вставить("НаименованиеДокУТ", "ОтчетОРозничныхПродажах");
		Адрес_ОтчетОРозничныхПродажах = Поиск(ПараметрыПоиска, БД_COM);	
	КонецЕсли;
	
	Если ПараметрыНастройки.РеализацияТоваровУслуг Тогда
		ПараметрыПоиска.Вставить("НаименованиеДокБП", "РеализацияТоваровУслуг");
		ПараметрыПоиска.Вставить("НаименованиеДокУТ", "РеализацияТоваровУслуг");
		Адрес_РеализацияТоваровУслуг = Поиск(ПараметрыПоиска, БД_COM);	
	КонецЕсли;
	
	Если ПараметрыНастройки.ВозвратТоваровОтПокупателя Тогда
		ПараметрыПоиска.Вставить("НаименованиеДокБП", "ВозвратТоваровОтКлиента");
		ПараметрыПоиска.Вставить("НаименованиеДокУТ", "ВозвратТоваровОтКлиента");
		Адрес_ВозвратТоваровОтКлиента = Поиск(ПараметрыПоиска, БД_COM);	
	КонецЕсли;
	
	Если ПараметрыНастройки.Корректировка Тогда
		ПараметрыПоиска.Вставить("НаименованиеДокБП", "КорректировкаРеализации");
		ПараметрыПоиска.Вставить("НаименованиеДокУТ", "КорректировкаРеализации");
		Адрес_КорректировкаРеализации = Поиск(ПараметрыПоиска, БД_COM);	
	КонецЕсли;
	
	Если ПараметрыНастройки.ПоступлениеТоваровУслуг Тогда
		ПараметрыПоиска.Вставить("НаименованиеДокБП", "ПоступлениеТоваровУслуг");
		ПараметрыПоиска.Вставить("НаименованиеДокУТ", "ПоступлениеТоваровУслуг");
		Адрес_ПоступлениеТоваровУслуг = Поиск(ПараметрыПоиска, БД_COM);	
	КонецЕсли;
	БД_COM=""; 
	//
	Отбор = Новый Структура;
	Отбор.Вставить("ДокументЕстьРазница", Истина);
	СтрокиТаблицаДокументовОткл = ТаблицаДокументов.НайтиСтроки(Отбор);
	//
 	ТаблицаДокументовСОтбором = ТаблицаДокументов.Скопировать(СтрокиТаблицаДокументовОткл);
	
	РезультатВыполнения.Выполнено = СтрокиТаблицаДокументовОткл.Количество()>0;
	РезультатВыполнения.ТабличныйДокумент = ТабличныйДокумент;
	
	РезультатВыполнения.Вставить("АдресТабличныйДокументСОтбором",ПоместитьВоВременноеХранилище(ТаблицаДокументовСОтбором, Новый УникальныйИдентификатор()));
	
	РезультатВыполнения.АдресТаблицыДокументов = ПоместитьВоВременноеХранилище(ТаблицаДокументов, Новый УникальныйИдентификатор());
	
	Возврат РезультатВыполнения;
КонецФункции

Процедура ВывестиТекстСообщения(СамТекст, СтатусСообщения = Неопределено) Экспорт
	Если ФоновыйЗапуск ТОгда
		ЗаписьЖурналаРегистрации("СравнениеДокументов", УровеньЖурналаРегистрации.Информация,,,СамТекст);
	ИНаче
		Сообщить(СамТекст,СтатусСообщения);
	КонецЕсли;
КонецПроцедуры

Функция ВыполнитьПодключение(ПараметрыПодключенич) Экспорт
	
	СтрокаСообщенияОбОшибке = "";
	СтрокаПодключения = "";
	

	СтруктураПодключения = СформироватьСтруктуруДляПодключения(ПараметрыПодключенич);
	ПараметровДостаточно = ОпределитьДостаточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения, СтрокаСообщенияОбОшибке);
	
	Если Не ПараметровДостаточно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтруктураПодключения.ПользовательИнформационнойБазыДляПодключения) Тогда
		СтрокаПодключения = СтрокаПодключения + ";Usr = """ + СтруктураПодключения.ПользовательИнформационнойБазыДляПодключения + """";
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтруктураПодключения.ПарольИнформационнойБазыДляПодключения) Тогда
		СтрокаПодключения = СтрокаПодключения + ";Pwd = """ + СтруктураПодключения.ПарольИнформационнойБазыДляПодключения + """";
	КонецЕсли;
	
	СтрокаПодключения = СтрокаПодключения + ";";
	
	Попытка
		
 		ВывестиТекстСообщения("Идет процесс соединения ...");
 		
 		ОбъектПодключения = СтруктураПодключения.ВерсияПлатформы +".COMConnector";
		//УстановитьПривилегированныйРежим(Истина);
		ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
		ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
		//УстановитьПривилегированныйРежим(Ложь);
 		СообщениеПодключения = "Соединение установлено";
		ВывестиТекстСообщения(СообщениеПодключения);
 		
	Исключение
		
		ТекCOMОбъект = Неопределено;
 		СтрокаСообщенияОбОшибке = "При попытке подключения к информационной базе произошла ошибка:" + Символы.ПС 
		+ ОписаниеОшибки();
		СообщениеПодключения = СтрокаСообщенияОбОшибке;
 		СообщениеПодключения = "Возникли ошибки при подключении к информационной. " + СообщениеПодключения;
 		ВывестиТекстСообщения(СообщениеПодключения);	
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат ТекCOMОбъект;
	
КонецФункции

Функция СформироватьСтруктуруДляПодключения(Объект)
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("Серверный", ?(Объект.СерверныйВариант,1,0));
 	СтруктураПодключения.Вставить("КаталогИБ", Объект.ПутьКДанным);
	СтруктураПодключения.Вставить("ИмяСервераИнформационнойБазыДляПодключения", Объект.ИмяСервераИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяИнформационнойБазыНаСервереДляПодключения", Объект.ИмяИнформационнойБазыНаСервереДляПодключения);
	СтруктураПодключения.Вставить("ПользовательИнформационнойБазыДляПодключения", Объект.ПользовательИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ПарольИнформационнойБазыДляПодключения", Объект.ПарольИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ПользовательСервер", Объект.ПользовательИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ПарольСервер", Объект.ПарольИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ВерсияПлатформы", "V83");	
	
	Возврат СтруктураПодключения;
	
КонецФункции

Функция ОпределитьДостаточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения = "", СтрокаСообщенияОбОшибке = "") Экспорт

НаличиеОшибок = Ложь;

Если НЕ СтруктураПодключения.Серверный  Тогда

Если ПустаяСтрока(СтруктураПодключения.КаталогИБ) Тогда
	
	СтрокаСообщенияОбОшибке = "Не задан каталог информационной базы-приемника";
 	ВывестиТекстСообщения(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
 	НаличиеОшибок = Истина;
	
КонецЕсли;

СтрокаПодключения = "File=""" + СтруктураПодключения.КаталогИБ + """";
Иначе

Если ПустаяСтрока(СтруктураПодключения.ИмяСервераИнформационнойБазыДляПодключения) Тогда
	
	СтрокаСообщенияОбОшибке = "Не задано имя сервера 1С:Предприятия информационной базы-приемника";
 	ВывестиТекстСообщения(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
 	НаличиеОшибок = Истина;
	
КонецЕсли;

Если ПустаяСтрока(СтруктураПодключения.ИмяИнформационнойБазыНаСервереДляПодключения) Тогда
	
	СтрокаСообщенияОбОшибке = "Не задано имя информационной базы-приемника на сервере 1С:Предприятия";
 	ВывестиТекстСообщения(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
 	НаличиеОшибок = Истина;
	
КонецЕсли;		

СтрокаПодключения = "Srvr = """ + СтруктураПодключения.ИмяСервераИнформационнойБазыДляПодключения + """; Ref = """ + СтруктураПодключения.ИмяИнформационнойБазыНаСервереДляПодключения + """";		

КонецЕсли;

Возврат НЕ НаличиеОшибок;	

КонецФункции

Функция ВернутьСписокКонтрагентов(БД_COM)
СписокУТ = БД_COM.NewObject("СписокЗначений");
Запрос=БД_COM.NewObject("Запрос");
//Если ВыбиратьПоКПП Тогда 
Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование";

	//"ВЫБРАТЬ
	//|	Контрагенты.Ссылка
	//|ИЗ
	//|	Справочник.Контрагенты КАК Контрагенты
	//|ГДЕ
	//|	Контрагенты.ИНН = &ИНН
	//|	И Контрагенты.КПП = &КПП";


Строк=НеКонтрагенты.Количество();
для к = 1 по Строк цикл
	зн = НеКонтрагенты.Получить(к-1);
	//Запрос.УстановитьПараметр("ИНН", зн.Значение.ИНН);
	//Запрос.УстановитьПараметр("КПП", зн.Значение.КПП);
	Запрос.УстановитьПараметр("Наименование", зн.Значение.Наименование);
	//КонецЕсли;
	//
	Выборка = Запрос.Выполнить().Выбрать();
	//
	Пока Выборка.Следующий() Цикл
		СписокУТ.Добавить(Выборка.Ссылка);
	КонецЦикла;					 
КонецЦикла;
Возврат СписокУТ;
КонецФункции

Функция Поиск(ПараметрыПоиска, БД_COM) Экспорт
	
	//ДатаНач,ДатаКон,НаименованиеДокБП, НаименованиеДокУТ
	
	НомерПП = 0;

	Попытка
		Запрос=БД_COM.NewObject("Запрос");
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	ТекстЗапроса = ВернутьТекстЗапроса(ПараметрыПоиска.НаименованиеДокУТ, "УТ", ПараметрыПоиска.ИсключитьКонтрагентов);
	//
	Запрос.УстановитьПараметр("ДатаНач", ПараметрыПоиска.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ПараметрыПоиска.ДатаКон);
	Запрос.УстановитьПараметр("Организации", ВернутьСписокОрганизации(БД_COM));
	Запрос.УстановитьПараметр("ПоВсем", ?(Организации.Количество()=0,ИСТИНА,ЛОЖЬ));
	Если ПараметрыПоиска.ИсключитьКонтрагентов Тогда
		Запрос.УстановитьПараметр("НеКонтрагенты", ВернутьСписокКонтрагентов(БД_COM));	
	КонецЕсли;
	Запрос.Текст=ТекстЗапроса;
	ТЗ_УТ=Запрос.Выполнить().Выгрузить();
	ТЗ_УТ.Свернуть("Номер, Дата, Код, Артикул, Контрагент, Наименование, КурсВзаиморасчетов, СуммаРегл", "Количество, Сумма");

	Макет = ПолучитьМакетНаСервере("Макет");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ПустойТовар = СправочникиНоменклатураПустаяСсылка();
		
	ТЗ_БП = ВернутьРезультатЗапросаБП(ПараметрыПоиска);
	
	ОбщаяТЗ 		=  ОбработкаНомераДокументов(ТЗ_БП.Скопировать());
	ТЗ_БП_Номера	= ОбработкаНомераДокументов(ТЗ_БП.Скопировать()); 
	ТЗ_УТ_Номера	= ОбработкаНомераДокументов(ТЗ_УТ.Скопировать());
	
	Для Каждого Строка из ТЗ_УТ_Номера Цикл
		
		НоваяСтрокаТЗ = ОбщаяТЗ.Добавить();
		НоваяСтрокаТЗ.Наименование         = Строка.Наименование;//.Description;
		НоваяСтрокаТЗ.Количество           = Строка.Количество;
		НоваяСтрокаТЗ.Артикул              = Строка.Артикул;
		НоваяСтрокаТЗ.Код                  = Строка.Код;	
		НоваяСтрокаТЗ.Номер                = Строка.Номер;
		НоваяСтрокаТЗ.Сумма                = Окр(Строка.Сумма,2);
		НоваяСтрокаТЗ.Префикс              = 3;
		НоваяСтрокаТЗ.СК                   = 1;
		
	КонецЦикла;
	
	ОбластьЗаголовок.Параметры.Заголовок = "Расхождения по документам вида "+ПараметрыПоиска.НаименованиеДокБП+" с "+Формат(ПараметрыПоиска.ДатаНач,"ДФ=dd.MM.yyyy")+" по "+Формат(ПараметрыПоиска.ДатаКон,"ДФ=dd.MM.yyyy");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка.Параметры.Артикул = ?(ПараметрыПоиска.ПоАртикулу, "Артикул", "Код");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	ТабличныйДокумент.ФиксацияСверху = 1;
	СтруктураСвертки1 = "Наименование,Артикул,Количество,Номер,Сумма";
	СтруктураСвертки2 = "Номер,Артикул";
	ПолеПоиска = "Артикул";
	Если ПараметрыПоиска.ПоКоду Тогда 
		СтруктураСвертки1 = "Наименование,Код,Количество,Номер,Сумма";
		СтруктураСвертки2 = "Номер,Код";
		ПолеПоиска = "Код";
	КонецЕсли;
	ОбщаяТЗ.Свернуть(СтруктураСвертки1,"СК,Префикс");	
	// удалим строки с равным значением Наименование,Артикул,Количество,Номер,Сумма
	УдаляемыеСтроки = ОбщаяТЗ.НайтиСтроки(Новый Структура("СК",2));
	Для каждого СтрокаТаблицы Из Удаляемыестроки Цикл
		ОбщаяТЗ.Удалить(СтрокаТаблицы)
	КонецЦикла;
		
	ОбщаяТЗ2 =  ОбщаяТЗ.Скопировать();
	// временная ТЗ что бы получить только список
	ОбщаяТЗ2.Свернуть(СтруктураСвертки2);
	ОбщаяТЗ2.Сортировать(СтруктураСвертки2);
	СтруктураПоиска = Новый Структура;
	Для каждого строка ИЗ ОбщаяТЗ2 Цикл 
			
		ОбластьСтрока.Параметры.Номер = строка.Номер;
			
		ОбластьСтрока.Параметры.Артикул = строка[ПолеПоиска];
			
		СтруктураПоиска.Вставить("Номер",строка.Номер);
		СтруктураПоиска.Вставить(ПолеПоиска,строка[ПолеПоиска]);
		МассивСтрок = ОбщаяТЗ.НайтиСтроки(СтруктураПоиска);
		ОбластьСтрока.Параметры.НаименованиеБП = "";
		ОбластьСтрока.Параметры.КоличествоБП = "";
		ОбластьСтрока.Параметры.КоличествоУТ = "";
		ОбластьСтрока.Параметры.НаименованиеУТ = "";
		ОбластьСтрока.Параметры.СуммаБП = "";
		ОбластьСтрока.Параметры.СуммаУТ = "";
		Для каждого Строка из МассивСтрок Цикл
				
			Если Строка.Префикс = 2 Тогда
				ОбластьСтрока.Параметры.НаименованиеБП = Строка.Наименование;
				ОбластьСтрока.Параметры.КоличествоБП = Строка.Количество;
				ОбластьСтрока.Параметры.СуммаБП = Строка.Сумма;
			ИначеЕсли Строка.Префикс = 3 Тогда
				ОбластьСтрока.Параметры.КоличествоУТ = Строка.Количество;
				ОбластьСтрока.Параметры.НаименованиеУТ = Строка.Наименование;
				ОбластьСтрока.Параметры.СуммаУТ = Строка.Сумма;
			КонецЕсли;			 
		КонецЦикла;
			
		Если НЕ Строка.Префикс = 5 Тогда 
			НомерПП = НомерПП+1;
			ОбластьСтрока.Параметры.НомерПП = НомерПП; 
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЕсли;
	КонецЦикла;
	
	//ТабличныйДокумент.ТолькоПросмотр = Истина;
	//
	
	ТЗ_Документы_УТ = ВернутьТЗСНужнымиКолонками(ТЗ_УТ_Номера.Скопировать(), ПараметрыПоиска, "УТ");
	ТЗ_Документы_БП = ВернутьТЗСНужнымиКолонками(ТЗ_БП_Номера.Скопировать(), ПараметрыПоиска, "БП");
	ОбщаяТЗ3 = ВернутьОбъединеннуюТЗ(ТЗ_Документы_БП, ТЗ_Документы_УТ);
	
	ОбновитьТаблицуДокументовФормы(ОбщаяТЗ3);
	//
	Возврат ОбщаяТЗ;
	
КонецФункции

Процедура СвернутьТаблицуДокументов(ИмяТаблицы)
	ТЗ = ИмяТаблицы.Скопировать();
	//ТЗ = ТЧ.Выгрузить();
	ТЗ.Свернуть("Номер, Дата, НаименованиеДокУТ, НаименованиеДокБП", "СуммаДокументаУТ, СуммаДокументаБП, СуммаДокументаРеглБП, СуммаДокументаРеглУТ, КурсВзаиморасчетовБП, КурсВзаиморасчетовУТ");
	//Сверить курсы и суммы, если есть расхождения подсветить и вывести сообщение
	//
	ТаблицаДокументов.Очистить();
	Для каждого Строка из ТЗ Цикл
		 ЗаполнитьЗначенияСвойств(ТаблицаДокументов.Добавить(), Строка);
	КонецЦикла;
	//ТаблицаДокументов.Загрузить(ТЗ);
	//ТЧ.Загрузить(ТЗ);
КонецПроцедуры

Процедура ОбновитьТаблицуДокументовФормы(ТаблицаИсточник)
	Для каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл
		СтрокаТаблицыИсточник.Номер = УдалитьПробелыВСтроке(СтрокаТаблицыИсточник.Номер);
		ЗаполнитьЗначенияСвойств(ТаблицаДокументов.Добавить(), СтрокаТаблицыИсточник);	
	КонецЦикла;
	СвернутьТаблицуДокументов(ТаблицаДокументов);
	Для каждого Строка из ТаблицаДокументов Цикл
		РазницаСуммаДокумента = ?(Строка.СуммаДокументаУТ - Строка.СуммаДокументаБП < 0, (Строка.СуммаДокументаУТ - Строка.СуммаДокументаБП) * -1, Строка.СуммаДокументаУТ - Строка.СуммаДокументаБП);
		РазницаСуммаДокументаРегл = ?(Строка.СуммаДокументаРеглУТ - Строка.СуммаДокументаРеглБП < 0, (Строка.СуммаДокументаРеглУТ - Строка.СуммаДокументаРеглБП) * -1, Строка.СуммаДокументаРеглУТ - Строка.СуммаДокументаРеглБП);
		Если (Строка.КурсВзаиморасчетовБП = 0 ИЛИ Строка.КурсВзаиморасчетовБП = 1) 
			ИЛИ (Строка.КурсВзаиморасчетовУТ = 0 ИЛИ Строка.КурсВзаиморасчетовУТ = 1) Тогда
			Если Строка.СуммаДокументаУТ <> Строка.СуммаДокументаБП
				И РазницаСуммаДокумента > 0.01 Тогда
				Строка.ДокументЕстьРазница = Истина;
			КонецЕсли;
		Иначе
			Если Строка.КурсВзаиморасчетовБП <> Строка.КурсВзаиморасчетовУТ
				ИЛИ (Строка.СуммаДокументаРеглУТ <> Строка.СуммаДокументаРеглБП И РазницаСуммаДокументаРегл > 0.01) Тогда
				Строка.ДокументЕстьРазница = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Функция ОбработкаНомераДокументов(ТЗ)
	Для Каждого Строка из ТЗ Цикл
		
		СтрокаНомерОбъекта 				   = Строка.Номер;
		ЭтоФирмаИсключение 				   = ПроверитьНаименованиеОрганизацииВСписке("Аванта");
		Если НЕ ЭтоФирмаИсключение Тогда
			ЭтоФирмаИсключение 				   = ПроверитьНаименованиеОрганизацииВСписке("Джоув");
		КонецЕсли;
		
		Если КонецДня(Строка.Дата) <= КонецДня('20180609') Тогда
			СтрокаНомерОбъекта = СтрокаНомерОбъекта;
		КонецЕсли;
		
		Если КонецДня(Строка.Дата) > КонецДня('20180609') И Не ЭтоФирмаИсключение Тогда
			СтрокаНомерОбъекта = ПолучитьНомерБезТиреИНулей(СтрокаНомерОбъекта);
		КонецЕсли;
		
		Если ЭтоФирмаИсключение Тогда
			СтрокаНомерОбъекта = СтрокаНомерОбъекта;
		КонецЕсли;
			СтрокаНомерОбъекта = УдалитьПробелыВСтроке(СтрокаНомерОбъекта);
		Строка.Номер                = СтрокаНомерОбъекта;	
	КонецЦикла;
	
	Возврат ТЗ
КонецФункции

Функция УдалитьПробелыВСтроке(Строка) Экспорт
	Строка = СтрЗаменить(Строка, " ", "");
	Строка = СокрП(Строка);
	Возврат Строка;
КонецФункции

Функция ВернутьОбъединеннуюТЗ(ТаблицаИсточник, ТаблицаПриемник)
	Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);
	КонецЦикла;
	ТаблицаПриемник.Свернуть("Номер, Дата, Контрагент, НаименованиеДокУТ, НаименованиеДокБП", "СуммаДокументаУТ, СуммаДокументаБП, КурсВзаиморасчетовБП, КурсВзаиморасчетовУТ, СуммаДокументаРеглБП, СуммаДокументаРеглУТ");
	//Объект = ТаблицаДокументов;
	//Объект.Табл
	Возврат ТаблицаПриемник;
КонецФункции

Функция ВернутьТЗСНужнымиКолонками(ТЗ, ПараметрыПоиска, КонфигурацияБазы)
	КолонкиНаУдаление = Новый Массив;
	КолонкиНаУдаление.Добавить("Наименование");
	КолонкиНаУдаление.Добавить("Код");
	КолонкиНаУдаление.Добавить("Артикул");
	КолонкиНаУдаление.Добавить("Количество");
	КолонкиНаУдаление.Добавить("КурсВзаиморасчетов");
	КолонкиНаУдаление.Добавить("СуммаРегл");
	Для каждого Строка из КолонкиНаУдаление Цикл
		Колонка = ТЗ.Найти(Строка);
		Если НЕ Колонка = Неопределено Тогда
			ТЗ.Колонки.Удалить(Колонка);
		КонецЕсли;
	КонецЦикла;
	ТЗ.Свернуть("Номер, Дата, Контрагент, КурсВзаиморасчетов, СуммаРегл", "Сумма");
	ТЗ.Колонки.Добавить("НаименованиеДокУТ");
	ТЗ.Колонки.Добавить("НаименованиеДокБП");
	ТЗ.Колонки.Добавить("СуммаДокументаБП");
	ТЗ.Колонки.Добавить("СуммаДокументаУТ");
	ТЗ.Колонки.Добавить("КурсВзаиморасчетовБП");
	ТЗ.Колонки.Добавить("КурсВзаиморасчетовУТ");
	ТЗ.Колонки.Добавить("СуммаДокументаРеглБП");
	ТЗ.Колонки.Добавить("СуммаДокументаРеглУТ");
	
	Для каждого Строка из ТЗ Цикл
		Строка.НаименованиеДокУТ = ПараметрыПоиска.НаименованиеДокУТ;
		Строка.НаименованиеДокБП = ПараметрыПоиска.НаименованиеДокБП;
		Если КонфигурацияБазы = "БП" Тогда
			Строка.СуммаДокументаБП = Строка.Сумма;
			Строка.КурсВзаиморасчетовБП = Строка.КурсВзаиморасчетов;
			Если Строка.КурсВзаиморасчетов > 1 Тогда
				Строка.СуммаДокументаРеглБП = Строка.Сумма * Строка.КурсВзаиморасчетов;
			Иначе
				Строка.КурсВзаиморасчетовБП = 1;
			КонецЕсли;
		КонецЕсли;
		Если КонфигурацияБазы = "УТ" Тогда
			Строка.СуммаДокументаУТ = Строка.Сумма;
			Строка.КурсВзаиморасчетовУТ = Строка.КурсВзаиморасчетов;
			Строка.СуммаДокументаРеглУТ = Строка.СуммаРегл;
		КонецЕсли;
	КонецЦикла;
	ТЗ.Колонки.Удалить("Сумма");
	ТЗ.Колонки.Удалить("КурсВзаиморасчетов");
	ТЗ.Колонки.Удалить("СуммаРегл");
	Возврат ТЗ;
КонецФункции

Функция ПолучитьНомерБезТиреИНулей(СтрокаНомер)
	СтрокаНовыйНомер = СтрокаНомер;
	Индекс = Найти(Строка(СтрокаНомер), "-");
	Если Индекс > 0 Тогда
		СтрокаНомерОбъект = СтрокаНомер;
	 
		МассивСтрок = Новый Массив();
	 	ВходящаяСтрока = СтрЗаменить(СтрокаНомерОбъект, "-", Символы.ПС);
	 
	 	Для ИндексСтроки = 1 По СтрЧислоСтрок(ВходящаяСтрока) Цикл
	 		Подстрока = СтрПолучитьСтроку(ВходящаяСтрока, ИндексСтроки);
	 		МассивСтрок.Добавить(Подстрока);
	 	КонецЦикла;
	 
	 	Если МассивСтрок.Количество() > 0 Тогда
	 		НомерНачало = Строка(МассивСтрок[0]);
	 		НомерКонец = Строка(МассивСтрок[1]);
	 	Пока Найти(НомерКонец,"0") = 1 Цикл
	 		НомерКонец = Сред(НомерКонец,2);
	 	КонецЦикла;
	 	НовыйНомер = НомерНачало + НомерКонец;
	 	СтрокаНовыйНомер = НовыйНомер; 
 
	 	КонецЕсли;
	 
	КонецЕсли;
	
	Возврат СтрокаНовыйНомер;
КонецФункции

Функция СправочникиНоменклатураПустаяСсылка()
	Возврат Справочники.Номенклатура.ПустаяСсылка();
КонецФункции

Функция ПолучитьМакетНаСервере(ИмяМакета)

	СамМакет = ПолучитьМакет(ИмяМакета);
	СамМакет.Параметры.Расшифровка = Истина; // чтобы работала расшифровка
    Возврат СамМакет; 
КонецФункции

Функция ВернутьРезультатЗапросаБП(ПараметрыПоиска)
	ТекстЗапроса = ВернутьТекстЗапроса(ПараметрыПоиска.НаименованиеДокБП, "БП", ПараметрыПоиска.ИсключитьКонтрагентов);
	ЗапросБП = Новый Запрос;
	ЗапросБП.Текст = ТекстЗапроса;
	
	ЗапросБП.УстановитьПараметр("ДатаНач", ПараметрыПоиска.ДатаНач);
	ЗапросБП.УстановитьПараметр("ДатаКон",ПараметрыПоиска.ДатаКон);
	ЗапросБП.УстановитьПараметр("Организации", Организации);
	ЗапросБП.УстановитьПараметр("ПоВсем", ?(Организации.Количество()=0,ИСТИНА,ЛОЖЬ));
	Если ПараметрыПоиска.ИсключитьКонтрагентов Тогда
		ЗапросБП.УстановитьПараметр("НеКонтрагенты", НеКонтрагенты);
	КонецЕсли;
	ТЗ_БП = ЗапросБП.Выполнить().Выгрузить();
	ТЗ_БП.Свернуть("Номер, Дата, Код, Артикул, Контрагент, Наименование, КурсВзаиморасчетов, СуммаРегл", "Количество, Сумма");
	ТЗ_БП.Колонки.Добавить("Префикс");
	ТЗ_БП.Колонки.Добавить("СК"); // сравнительный коэфициент
	ТЗ_БП.ЗаполнитьЗначения(2,"Префикс");
	ТЗ_БП.ЗаполнитьЗначения(1,"СК");
	
	Возврат ТЗ_БП;
КонецФункции

Функция ПолучитьРеквизитНаСервере(Объект_,ИмяРеквизита)
	Возврат Объект_[ИмяРеквизита]; 
КонецФункции	

Функция ПроверитьНаименованиеОрганизацииВСписке(Наименование)
	Строк=Организации.Количество();
	Для к=1 по Строк цикл
		зн=Организации.Получить(к-1);
		Если Найти(ВРЕГ(зн.Значение.Наименование), ВРЕГ(Наименование)) Тогда
			Возврат Истина;	
		КонецЕсли;			 
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ВернутьСписокОрганизации(БД_COM)
	ОрганизацииУТ = БД_COM.NewObject("СписокЗначений");
	ЗапросОрганизации = БД_COM.NewObject("Запрос");
	ТЗ_УТ = БД_COM.NewObject("ТаблицаЗначений");
	ОписаниеСтроки = БД_COM.NewObject("ОписаниеТипов","Строка",БД_COM.NewObject("КвалификаторыСтроки",200));	
	ТЗ_УТ.Колонки.Добавить("ИНН",ОписаниеСтроки);
	ТЗ_УТ.Колонки.Добавить("КПП",ОписаниеСтроки);
	м_знч = Организации.ВыгрузитьЗначения();
	Для Каждого эл из м_знч Цикл
		ст_тз = ТЗ_УТ.Добавить();
		ст_тз.ИНН = ПолучитьРеквизитНаСервере(эл,"ИНН");
		ст_тз.КПП = ПолучитьРеквизитНаСервере(эл,"КПП");
	КонецЦикла;	
	//Если ВыбиратьПоКПП Тогда 
	ЗапросОрганизации.Текст ="ВЫБРАТЬ
		|	ТЗ.ИНН КАК ИНН,
		|	ТЗ.КПП КАК КПП
		|ПОМЕСТИТЬ ВТ_ТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТЗ КАК ВТ_ТЗ
		|		ПО Организации.ИНН = ВТ_ТЗ.ИНН
		|			И Организации.КПП = ВТ_ТЗ.КПП";
	
	ЗапросОрганизации.УстановитьПараметр("ТЗ",ТЗ_УТ);	
	Строк=Организации.Количество();
	ОрганизацииУТВыборка = ЗапросОрганизации.Выполнить().Выбрать();
	Пока ОрганизацииУТВыборка.Следующий() Цикл
		ОрганизацииУТ.Добавить(ОрганизацииУТВыборка.Ссылка);
	КонецЦикла;					 
	
	Возврат ОрганизацииУТ;
КонецФункции

Функция ВернутьТекстЗапроса(НаименованиеДок = "ОтчетОРозничныхПродажах", НазваниеИБ = "", ИсключитьКонтрагентов = Ложь)
	
	Реквизит = Неопределено;
	Если НазваниеИБ = "" Тогда
		Возврат "";
	КонецЕсли;
 	
	ТекстЗапроса = "";
	Если НазваниеИБ = "УТ" Тогда
		ТекстЗапроса = ВернутьТекстЗапросаУТ(НаименованиеДок, ИсключитьКонтрагентов);
	КонецЕсли;
	Если НазваниеИБ = "БП" Тогда
		ТекстЗапроса = ВернутьТекстЗапросаБП(НаименованиеДок, ИсключитьКонтрагентов);
	КонецЕсли;
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ВернутьТекстЗапросаУТ(НаименованиеДок, ИсключитьКонтрагентов)
	
	ТекстЗапроса = "";
	Реквизит = Неопределено;
	//Если НазваниеИБ = "" Тогда
	//	Возврат "";
	//КонецЕсли;
	Попытка
		НовыйДокументСсылка = Новый(Тип("ДокументОбъект."+НаименованиеДок));
		МетаданныеНовыйДокумент = НовыйДокументСсылка.Метаданные();
		Реквизит = МетаданныеНовыйДокумент.ТабличныеЧасти.Найти("Услуги");
	Исключение
		Реквизит = Неопределено;
	КонецПопытки;
	Если НаименованиеДок = "РеализацияТоваровУслуг" Тогда
		ТекстЗапроса =	ВернутьТекстЗапросаУТ_РеализацияТоваровУслуг(ИсключитьКонтрагентов);
	КонецЕсли;
	Если НаименованиеДок = "ОтчетОРозничныхПродажах" Тогда
		//ТекстЗапроса =	ВернутьТекстЗапросаУТ_ОтчетОРозничныхПродажах(ИсключитьКонтрагентов);
	КонецЕсли;
	Если НаименованиеДок = "ВозвратТоваровОтПокупателя" Тогда
		ТекстЗапроса =	ВернутьТекстЗапросаУТ_ВозвратТоваровОтПокупателя(ИсключитьКонтрагентов);
	КонецЕсли;
	Если НаименованиеДок = "КорректировкаРеализации" Тогда
		ТекстЗапроса =	ВернутьТекстЗапросаУТ_КорректировкаРеализации(ИсключитьКонтрагентов);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВернутьТекстЗапросаУТ_РеализацияТоваровУслуг(ИсключитьКонтрагентов) Экспорт
	
 	ТекстЗапроса = "ВЫБРАТЬ
	|	СУММА(Документ.Количество) КАК Количество,
	|	Документ.Ссылка.Номер КАК Номер,
	|	Документ.Ссылка.Дата КАК Дата,
	|	Документ.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Документ.Ссылка.СуммаРегл КАК СуммаРегл,
	|	Документ.Ссылка.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА Документ.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА Документ.Номенклатура.Наименование
	|		ИНАЧЕ Документ.Номенклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	|	Документ.Номенклатура.Код КАК Код,
	|	Документ.Номенклатура.Наименование КАК Наименование,
	|	СУММА(ВЫРАЗИТЬ(Документ.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Документ
	|ГДЕ
	|	Документ.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И Документ.Ссылка.Проведен = ИСТИНА
	|	И (Документ.Ссылка.Организация В (&Организации)
	|			ИЛИ &ПОВСЕМ)"+
	?(ИсключитьКонтрагентов,
	"
	|	И НЕ Документ.Ссылка.Контрагент В (&НеКонтрагенты)", "") +
	"
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.Ссылка.Номер,
	|	Документ.Ссылка.Дата,
	|	Документ.Ссылка.Контрагент,
	|	Документ.Ссылка.КурсВзаиморасчетов,
	|	Документ.Ссылка.СуммаРегл,
	|	ВЫБОР
	|		КОГДА Документ.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА Документ.Номенклатура.Наименование
	|		ИНАЧЕ Документ.Номенклатура.Артикул
	|	КОНЕЦ,
	|	Документ.Номенклатура.Код,
	|	Документ.Номенклатура.Наименование";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВернутьТекстЗапросаУТ_КорректировкаРеализации(ИсключитьКонтрагентов) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	|	СУММА(Документ.Количество) КАК Количество,
	|	Документ.Ссылка.Номер КАК Номер,
	|	Документ.Ссылка.Дата КАК Дата,
	|	Документ.Ссылка.Контрагент КАК Контрагент,
	|	0 КАК КурсВзаиморасчетов,
	|	0 КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА Документ.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА Документ.Номенклатура.Наименование
	|		ИНАЧЕ Документ.Номенклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	|	Документ.Номенклатура.Код КАК Код,
	|	Документ.Номенклатура.Наименование КАК Наименование,
	|	СУММА(ВЫРАЗИТЬ(Документ.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК Документ
	|ГДЕ
	|	Документ.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И Документ.Ссылка.Проведен = ИСТИНА
	|	И (Документ.Ссылка.Организация В (&Организации)
	|			ИЛИ &ПОВСЕМ)"+
	?(ИсключитьКонтрагентов,
	"
	|	И НЕ Документ.Ссылка.Контрагент В (&НеКонтрагенты)", "") +
	"
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.Ссылка.Номер,
	|	Документ.Ссылка.Дата,
	|	Документ.Ссылка.Контрагент,
	|	ВЫБОР
	|		КОГДА Документ.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА Документ.Номенклатура.Наименование
	|		ИНАЧЕ Документ.Номенклатура.Артикул
	|	КОНЕЦ,
	|	Документ.Номенклатура.Код,
	|	Документ.Номенклатура.Наименование";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВернутьТекстЗапросаУТ_ВозвратТоваровОтПокупателя(ИсключитьКонтрагентов) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	|	СУММА(Документ.Количество) КАК Количество,
	|	Документ.Ссылка.Номер КАК Номер,
	|	Документ.Ссылка.Дата КАК Дата,
	|	Документ.Ссылка.Контрагент КАК Контрагент,
	|	0 КАК КурсВзаиморасчетов,
	|	0 КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА Документ.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА Документ.Номенклатура.Наименование
	|		ИНАЧЕ Документ.Номенклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	|	Документ.Номенклатура.Код КАК Код,
	|	Документ.Номенклатура.Наименование КАК Наименование,
	|	СУММА(ВЫРАЗИТЬ(Документ.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК Документ
	|ГДЕ
	|	Документ.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И Документ.Ссылка.Проведен = ИСТИНА
	|	И (Документ.Ссылка.Организация В (&Организации)
	|			ИЛИ &ПОВСЕМ)"+
	?(ИсключитьКонтрагентов,
	"
	|	И НЕ Документ.Ссылка.Контрагент В (&НеКонтрагенты)", "") +
	"
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.Ссылка.Номер,
	|	Документ.Ссылка.Дата,
	|	Документ.Ссылка.Контрагент,
	|	ВЫБОР
	|		КОГДА Документ.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА Документ.Номенклатура.Наименование
	|		ИНАЧЕ Документ.Номенклатура.Артикул
	|	КОНЕЦ,
	|	Документ.Номенклатура.Код,
	|	Документ.Номенклатура.Наименование";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВернутьТекстЗапросаУТ_ПоступлениеТоваровУслуг() 
	Возврат
	"ВЫБРАТЬ
	|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Номер КАК Номер,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК Дата,
	|	0 КАК КурсВзаиморасчетов,
	|	0 КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА ПоступлениеТоваровУслугТовары.Номенклатура.Наименование
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.Номенклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Код КАК НоменклатураКод,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	СУММА(ВЫРАЗИТЬ(ПоступлениеТоваровУслугТовары.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РеализацияТоварыБП
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	|	И (ПоступлениеТоваровУслугТовары.Ссылка.Организация В (&Организации)
	|			ИЛИ &ПОВСЕМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА ПоступлениеТоваровУслугТовары.Номенклатура.Наименование
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.Номенклатура.Артикул
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Код,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Наименование,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Номер,
	|	ПоступлениеТоваровУслугТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУслуги.Ссылка КАК Ссылка,
	|	СУММА(ПоступлениеТоваровУслугУслуги.Количество) КАК Количество,
	|	СУММА(ВЫРАЗИТЬ(ПоступлениеТоваровУслугУслуги.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Номер КАК Номер,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата КАК Дата,
	|	0 КАК КурсВзаиморасчетов,
	|	0 КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугУслуги.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА ПоступлениеТоваровУслугУслуги.Номенклатура.Наименование
	|		ИНАЧЕ ПоступлениеТоваровУслугУслуги.Номенклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура.Код КАК НоменклатураКод,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура.Наименование КАК НоменклатураНаименование
	|ПОМЕСТИТЬ РеализацииУслугиБП
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен = ИСТИНА
	|	И (ПоступлениеТоваровУслугУслуги.Ссылка.Организация В (&Организации)
	|			ИЛИ &ПОВСЕМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугУслуги.Номенклатура.Код,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура.Наименование,
	|	ПоступлениеТоваровУслугУслуги.Ссылка,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугУслуги.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА ПоступлениеТоваровУслугУслуги.Номенклатура.Наименование
	|		ИНАЧЕ ПоступлениеТоваровУслугУслуги.Номенклатура.Артикул
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Номер,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РеализацияТоварыБП.Количество) КАК Количество,
	|	РеализацияТоварыБП.Номер КАК Номер,
	|	РеализацияТоварыБП.Дата КАК Дата,
	|	РеализацияТоварыБП.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	РеализацияТоварыБП.СуммаРегл КАК СуммаРегл,
	|	РеализацияТоварыБП.Артикул КАК Артикул,
	|	РеализацияТоварыБП.НоменклатураКод КАК НоменклатураКод,
	|	РеализацияТоварыБП.НоменклатураНаименование КАК НоменклатураНаименование,
	|	СУММА(РеализацияТоварыБП.Сумма) КАК Сумма,
	|	РеализацияТоварыБП.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОбработкаТоварыУслуги
	|ИЗ
	|	РеализацияТоварыБП КАК РеализацияТоварыБП
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоварыБП.Артикул,
	|	РеализацияТоварыБП.Дата,
	|	РеализацияТоварыБП.Номер,
	|	РеализацияТоварыБП.КурсВзаиморасчетов,
	|	РеализацияТоварыБП.СуммаРегл,
	|	РеализацияТоварыБП.НоменклатураКод,
	|	РеализацияТоварыБП.НоменклатураНаименование,
	|	РеализацияТоварыБП.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(РеализацииУслугиБП.Количество),
	|	РеализацииУслугиБП.Номер,
	|	РеализацииУслугиБП.Дата,
	|	РеализацииУслугиБП.КурсВзаиморасчетов,
	|	РеализацииУслугиБП.СуммаРегл,
	|	РеализацииУслугиБП.Артикул,
	|	РеализацииУслугиБП.НоменклатураКод,
	|	РеализацииУслугиБП.НоменклатураНаименование,
	|	СУММА(РеализацииУслугиБП.Сумма),
	|	РеализацииУслугиБП.Ссылка
	|ИЗ
	|	РеализацииУслугиБП КАК РеализацииУслугиБП
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацииУслугиБП.Номер,
	|	РеализацииУслугиБП.Дата,
	|	РеализацииУслугиБП.КурсВзаиморасчетов,
	|	РеализацииУслугиБП.СуммаРегл,
	|	РеализацииУслугиБП.Артикул,
	|	РеализацииУслугиБП.НоменклатураКод,
	|	РеализацииУслугиБП.НоменклатураНаименование,
	|	РеализацииУслугиБП.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОбработкаТоварыУслуги.Количество) КАК Количество,
	|	ОбработкаТоварыУслуги.Номер КАК Номер,
	|	ОбработкаТоварыУслуги.Дата КАК Дата,
	|	ОбработкаТоварыУслуги.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ОбработкаТоварыУслуги.СуммаРегл КАК СуммаРегл,
	|	ОбработкаТоварыУслуги.Артикул КАК Артикул,
	|	ОбработкаТоварыУслуги.НоменклатураКод КАК Код,
	|	ОбработкаТоварыУслуги.НоменклатураНаименование КАК Наименование,
	|	СУММА(ОбработкаТоварыУслуги.Сумма) КАК Сумма
	|ИЗ
	|	ОбработкаТоварыУслуги КАК ОбработкаТоварыУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер,
	|	Артикул";
КонецФункции

Функция ВернутьТекстЗапросаБП(НаименованиеДок, ИсключитьКонтрагентов)
	ТекстЗапроса = "";
	Реквизит = Неопределено;
	//Если НазваниеИБ = "" Тогда
	//	Возврат "";
	//КонецЕсли;
	Попытка
		НовыйДокументСсылка = Новый(Тип("ДокументОбъект."+НаименованиеДок));
		МетаданныеНовыйДокумент = НовыйДокументСсылка.Метаданные();
		Реквизит = МетаданныеНовыйДокумент.ТабличныеЧасти.Найти("Услуги");
	Исключение
		Реквизит = Неопределено;
	КонецПопытки;
	Если НаименованиеДок = "РеализацияТоваровУслуг" Тогда
		ТекстЗапроса =	ВернутьТекстЗапросаБП_РеализацияТоваровУслуг(ИсключитьКонтрагентов);
	КонецЕсли;
	Если НаименованиеДок = "ОтчетОРозничныхПродажах" Тогда
		ТекстЗапроса =	ВернутьТекстЗапросаБП_ОтчетОРозничныхПродажах(ИсключитьКонтрагентов);
	КонецЕсли;
	Если НаименованиеДок = "ВозвратТоваровОтПокупателя" Тогда
		ТекстЗапроса =	ВернутьТекстЗапросаБП_ВозвратТоваровОтПокупателя(ИсключитьКонтрагентов);
	КонецЕсли;
	Если НаименованиеДок = "КорректировкаРеализации" Тогда
		ТекстЗапроса =	ВернутьТекстЗапросаБП_КорректировкаРеализации(ИсключитьКонтрагентов);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ВернутьТекстЗапросаБП_ОтчетОРозничныхПродажах(ИсключитьКонтрагентов) Экспорт
		Возврат
		"ВЫБРАТЬ
		|	СУММА(Документ.Количество) КАК Количество,
		|	Документ.Ссылка.Номер КАК Номер,
		|	Документ.Ссылка.Дата КАК Дата,
		|	Документ.Ссылка.Контрагент КАК Контрагент,
		|	0 КАК КурсВзаиморасчетов,
		|	0 КАК СуммаРегл,
		|	ВЫБОР
		|		КОГДА Документ.Номенклатура.Артикул = """"""""
		|			ТОГДА Документ.Номенклатура.Наименование
		|		ИНАЧЕ Документ.Номенклатура.Артикул
		|	КОНЕЦ КАК Артикул,
		|	Документ.Номенклатура.Код КАК Код,
		|	Документ.Номенклатура.Наименование КАК Наименование,
		|	СУММА(ВЫРАЗИТЬ(Документ.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Товары КАК Документ
		|ГДЕ
		|	Документ.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И Документ.Ссылка.Проведен = ИСТИНА
		|	И (Документ.Ссылка.Организация В (&Организации)
		|			ИЛИ &ПОВСЕМ)"+
		?(ИсключитьКонтрагентов,
		"
		|	И НЕ Документ.Ссылка.Контрагент В (&НеКонтрагенты)", "") +
		"
		|
		|СГРУППИРОВАТЬ ПО
		|	Документ.Ссылка.Номер,
		|	Документ.Ссылка.Дата,
		|	Документ.Ссылка.Контрагент,
		|	ВЫБОР
		|		КОГДА Документ.Номенклатура.Артикул = """"""""
		|			ТОГДА Документ.Номенклатура.Наименование
		|		ИНАЧЕ Документ.Номенклатура.Артикул
		|	КОНЕЦ,
		|	Документ.Номенклатура.Код,
		|	Документ.Номенклатура.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер,
		|	Артикул";
КонецФункции

Функция ВернутьТекстЗапросаБП_ВозвратТоваровОтПокупателя(ИсключитьКонтрагентов) Экспорт
	Возврат
	"ВЫБРАТЬ
	|	СУММА(Документ.Количество) КАК Количество,
	|	Документ.Ссылка.Номер КАК Номер,
	|	Документ.Ссылка.Дата КАК Дата,
	|	Документ.Ссылка.Контрагент КАК Контрагент,
	|	0 КАК КурсВзаиморасчетов,
	|	0 КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА Документ.Номенклатура.Артикул = """"""""
	|			ТОГДА Документ.Номенклатура.Наименование
	|		ИНАЧЕ Документ.Номенклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	|	Документ.Номенклатура.Код КАК Код,
	|	Документ.Номенклатура.Наименование КАК Наименование,
	|	СУММА(ВЫРАЗИТЬ(Документ.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК Документ
	|ГДЕ
	|	Документ.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И Документ.Ссылка.Проведен = ИСТИНА
	|	И (Документ.Ссылка.Организация В (&Организации)
	|			ИЛИ &ПОВСЕМ)"+
	?(ИсключитьКонтрагентов,
	"
	|	И НЕ Документ.Ссылка.Контрагент В (&НеКонтрагенты)", "") +
	"
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.Ссылка.Номер,
	|	Документ.Ссылка.Дата,
	|	Документ.Ссылка.Контрагент,
	|	ВЫБОР
	|		КОГДА Документ.Номенклатура.Артикул = """"""""
	|			ТОГДА Документ.Номенклатура.Наименование
	|		ИНАЧЕ Документ.Номенклатура.Артикул
	|	КОНЕЦ,
	|	Документ.Номенклатура.Код,
	|	Документ.Номенклатура.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер,
	|	Артикул";
КонецФункции

Функция ВернутьТекстЗапросаБП_РеализацияТоваровУслуг(ИсключитьКонтрагентов) Экспорт
	Возврат
	"ВЫБРАТЬ
	|		СУММА(Документ.Количество) КАК Количество,
	|		Документ.Ссылка.Номер,
	|		Документ.Ссылка.Дата,
	|		Документ.Ссылка.Контрагент КАК Контрагент,
	|		Документ.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|		0 КАК СуммаРегл,
	|		ВЫБОР
	|			КОГДА Документ.Номенклатура.Артикул = """"""""""""""""""""""""""""""""
	|				ТОГДА Документ.Номенклатура.Наименование
	|			ИНАЧЕ Документ.Номенклатура.Артикул
	|		КОНЕЦ КАК Артикул,
	|		Документ.Номенклатура.Код,
	|		Документ.Номенклатура.Наименование,
	|		СУММА(ВЫРАЗИТЬ(Документ.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма,
	|		Документ.Ссылка КАК Ссылка
	|	ПОМЕСТИТЬ РеализацияТоварыБП
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК Документ
	|	ГДЕ
	|		Документ.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И Документ.Ссылка.Проведен = ИСТИНА
	|		И (Документ.Ссылка.Организация В (&Организации)
	|				ИЛИ &ПОВСЕМ)"+
	?(ИсключитьКонтрагентов,
	"
	|	И НЕ Документ.Ссылка.Контрагент В (&НеКонтрагенты)", "") +
	"
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА Документ.Номенклатура.Артикул = """"""""""""""""""""""""""""""""
	|				ТОГДА Документ.Номенклатура.Наименование
	|			ИНАЧЕ Документ.Номенклатура.Артикул
	|		КОНЕЦ,
	|		Документ.Ссылка.Контрагент,
	|		Документ.Номенклатура.Код,
	|		Документ.Номенклатура.Наименование,
	|		Документ.Ссылка.Дата,
	|		Документ.Ссылка.Номер,
	|		Документ.Ссылка.КурсВзаиморасчетов,
	|		Документ.Ссылка
	|	;
	|	
	|	////////////////////////////////////////////////////////////////////////////////
	|	ВЫБРАТЬ
	|		Документ.Ссылка,
	|		СУММА(Документ.Количество) КАК Количество,
	|		СУММА(ВЫРАЗИТЬ(Документ.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма,
	|		Документ.Ссылка.Номер,
	|		Документ.Ссылка.Дата,
	|		Документ.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|		0 КАК СуммаРегл,
	|		ВЫБОР
	|			КОГДА Документ.Номенклатура.Артикул = """"""""""""""""""""""""""""""""
	|				ТОГДА Документ.Номенклатура.Наименование
	|			ИНАЧЕ Документ.Номенклатура.Артикул
	|		КОНЕЦ КАК Артикул,
	|		Документ.Номенклатура.Код,
	|		Документ.Номенклатура.Наименование,
	|		Документ.Ссылка.Контрагент
	|	ПОМЕСТИТЬ РеализацииУслугиБП
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Услуги КАК Документ
	|	ГДЕ
	|		Документ.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И Документ.Ссылка.Проведен = ИСТИНА
	|		И (Документ.Ссылка.Организация В (&Организации)
	|				ИЛИ &ПОВСЕМ)"+
	?(ИсключитьКонтрагентов,
	"
	|	И НЕ Документ.Ссылка.Контрагент В (&НеКонтрагенты)", "") +
	"
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Документ.Номенклатура.Код,
	|		Документ.Номенклатура.Наименование,
	|		Документ.Ссылка,
	|		ВЫБОР
	|			КОГДА Документ.Номенклатура.Артикул = """"""""""""""""""""""""""""""""
	|				ТОГДА Документ.Номенклатура.Наименование
	|			ИНАЧЕ Документ.Номенклатура.Артикул
	|		КОНЕЦ,
	|		Документ.Ссылка.Номер,
	|		Документ.Ссылка.Дата,
	|		Документ.Ссылка.КурсВзаиморасчетов,
	|		Документ.Ссылка.Контрагент
	|	;
	|	
	|	////////////////////////////////////////////////////////////////////////////////
	|	ВЫБРАТЬ
	|		СУММА(РеализацияТоварыБП.Количество) КАК Количество,
	|		РеализацияТоварыБП.Номер,
	|		РеализацияТоварыБП.Дата,
	|		РеализацияТоварыБП.Артикул,
	|		РеализацияТоварыБП.Контрагент,
	|		РеализацияТоварыБП.КурсВзаиморасчетов,
	|		РеализацияТоварыБП.СуммаРегл,
	|		РеализацияТоварыБП.НоменклатураКод,
	|		РеализацияТоварыБП.НоменклатураНаименование,
	|		СУММА(РеализацияТоварыБП.Сумма) КАК Сумма,
	|		РеализацияТоварыБП.Ссылка
	|	ПОМЕСТИТЬ ОбработкаТоварыУслуги
	|	ИЗ
	|		РеализацияТоварыБП КАК РеализацияТоварыБП
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеализацияТоварыБП.Артикул,
	|		РеализацияТоварыБП.Дата,
	|		РеализацияТоварыБП.Номер,
	|		РеализацияТоварыБП.Контрагент,
	|		РеализацияТоварыБП.КурсВзаиморасчетов,
	|		РеализацияТоварыБП.СуммаРегл,
	|		РеализацияТоварыБП.НоменклатураКод,
	|		РеализацияТоварыБП.НоменклатураНаименование,
	|		РеализацияТоварыБП.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СУММА(РеализацииУслугиБП.Количество),
	|		РеализацииУслугиБП.Номер,
	|		РеализацииУслугиБП.Дата,
	|		РеализацииУслугиБП.Артикул,
	|		РеализацииУслугиБП.Контрагент,
	|		РеализацииУслугиБП.КурсВзаиморасчетов,
	|		РеализацииУслугиБП.СуммаРегл,
	|		РеализацииУслугиБП.НоменклатураКод,
	|		РеализацииУслугиБП.НоменклатураНаименование,
	|		СУММА(РеализацииУслугиБП.Сумма),
	|		РеализацииУслугиБП.Ссылка
	|	ИЗ
	|		РеализацииУслугиБП КАК РеализацииУслугиБП
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеализацииУслугиБП.Номер,
	|		РеализацииУслугиБП.Дата,
	|		РеализацииУслугиБП.Артикул,
	|		РеализацииУслугиБП.Контрагент,
	|		РеализацииУслугиБП.КурсВзаиморасчетов,
	|		РеализацииУслугиБП.СуммаРегл,
	|		РеализацииУслугиБП.НоменклатураКод,
	|		РеализацииУслугиБП.НоменклатураНаименование,
	|		РеализацииУслугиБП.Ссылка
	|	;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОбработкаТоварыУслуги.Количество) КАК Количество,
	|	ОбработкаТоварыУслуги.Номер КАК Номер,
	|	ОбработкаТоварыУслуги.Дата КАК Дата,
	|	ОбработкаТоварыУслуги.Артикул КАК Артикул,
	|	ОбработкаТоварыУслуги.Контрагент КАК Контрагент,
	|	ОбработкаТоварыУслуги.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ОбработкаТоварыУслуги.СуммаРегл КАК СуммаРегл,
	|	ОбработкаТоварыУслуги.НоменклатураКод КАК Код,
	|	ОбработкаТоварыУслуги.НоменклатураНаименование КАК Наименование,
	|	СУММА(ОбработкаТоварыУслуги.Сумма) КАК Сумма,
	|	ОбработкаТоварыУслуги.Ссылка КАК Ссылка
	|ИЗ
	|	ОбработкаТоварыУслуги КАК ОбработкаТоварыУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбработкаТоварыУслуги.Номер,
	|	ОбработкаТоварыУслуги.Дата,
	|	ОбработкаТоварыУслуги.Артикул,
	|	ОбработкаТоварыУслуги.Контрагент,
	|	ОбработкаТоварыУслуги.КурсВзаиморасчетов,
	|	ОбработкаТоварыУслуги.СуммаРегл,
	|	ОбработкаТоварыУслуги.НоменклатураКод,
	|	ОбработкаТоварыУслуги.НоменклатураНаименование,
	|	ОбработкаТоварыУслуги.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер,
	|	Артикул";
	
КонецФункции

Функция ВернутьТекстЗапросаБП_ПоступлениеТоваровУслуг() 
	Возврат
	"ВЫБРАТЬ
	|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Номер КАК Номер,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК Дата,
	|	0 КАК КурсВзаиморасчетов,
	|	0 КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА ПоступлениеТоваровУслугТовары.Номенклатура.Наименование
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.Номенклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Код КАК НоменклатураКод,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	СУММА(ВЫРАЗИТЬ(ПоступлениеТоваровУслугТовары.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РеализацияТоварыБП
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	|	И (ПоступлениеТоваровУслугТовары.Ссылка.Организация В (&Организации)
	|			ИЛИ &ПОВСЕМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА ПоступлениеТоваровУслугТовары.Номенклатура.Наименование
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.Номенклатура.Артикул
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Код,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Наименование,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Номер,
	|	ПоступлениеТоваровУслугТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУслуги.Ссылка КАК Ссылка,
	|	СУММА(ПоступлениеТоваровУслугУслуги.Количество) КАК Количество,
	|	СУММА(ВЫРАЗИТЬ(ПоступлениеТоваровУслугУслуги.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Номер КАК Номер,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата КАК Дата,
	|	0 КАК КурсВзаиморасчетов,
	|	0 КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугУслуги.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА ПоступлениеТоваровУслугУслуги.Номенклатура.Наименование
	|		ИНАЧЕ ПоступлениеТоваровУслугУслуги.Номенклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура.Код КАК НоменклатураКод,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура.Наименование КАК НоменклатураНаименование
	|ПОМЕСТИТЬ РеализацииУслугиБП
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен = ИСТИНА
	|	И (ПоступлениеТоваровУслугУслуги.Ссылка.Организация В (&Организации)
	|			ИЛИ &ПОВСЕМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугУслуги.Номенклатура.Код,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура.Наименование,
	|	ПоступлениеТоваровУслугУслуги.Ссылка,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугУслуги.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА ПоступлениеТоваровУслугУслуги.Номенклатура.Наименование
	|		ИНАЧЕ ПоступлениеТоваровУслугУслуги.Номенклатура.Артикул
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Номер,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РеализацияТоварыБП.Количество) КАК Количество,
	|	РеализацияТоварыБП.Номер КАК Номер,
	|	РеализацияТоварыБП.Дата КАК Дата,
	|	РеализацияТоварыБП.Артикул КАК Артикул,
	|	РеализацияТоварыБП.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	РеализацияТоварыБП.СуммаРегл КАК СуммаРегл,
	|	РеализацияТоварыБП.НоменклатураКод КАК НоменклатураКод,
	|	РеализацияТоварыБП.НоменклатураНаименование КАК НоменклатураНаименование,
	|	СУММА(РеализацияТоварыБП.Сумма) КАК Сумма,
	|	РеализацияТоварыБП.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОбработкаТоварыУслуги
	|ИЗ
	|	РеализацияТоварыБП КАК РеализацияТоварыБП
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоварыБП.Артикул,
	|	РеализацияТоварыБП.Дата,
	|	РеализацияТоварыБП.Номер,
	|	РеализацияТоварыБП.НоменклатураКод,
	|	РеализацияТоварыБП.КурсВзаиморасчетов,
	|	РеализацияТоварыБП.СуммаРегл,
	|	РеализацияТоварыБП.НоменклатураНаименование,
	|	РеализацияТоварыБП.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(РеализацииУслугиБП.Количество),
	|	РеализацииУслугиБП.Номер,
	|	РеализацииУслугиБП.Дата,
	|	РеализацииУслугиБП.КурсВзаиморасчетов,
	|	РеализацииУслугиБП.СуммаРегл,
	|	РеализацииУслугиБП.Артикул,
	|	РеализацииУслугиБП.НоменклатураКод,
	|	РеализацииУслугиБП.НоменклатураНаименование,
	|	СУММА(РеализацииУслугиБП.Сумма),
	|	РеализацииУслугиБП.Ссылка
	|ИЗ
	|	РеализацииУслугиБП КАК РеализацииУслугиБП
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацииУслугиБП.Номер,
	|	РеализацииУслугиБП.Дата,
	|	РеализацииУслугиБП.КурсВзаиморасчетов,
	|	РеализацииУслугиБП.СуммаРегл,
	|	РеализацииУслугиБП.Артикул,
	|	РеализацииУслугиБП.НоменклатураКод,
	|	РеализацииУслугиБП.НоменклатураНаименование,
	|	РеализацииУслугиБП.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОбработкаТоварыУслуги.Количество) КАК Количество,
	|	ОбработкаТоварыУслуги.Номер КАК Номер,
	|	ОбработкаТоварыУслуги.Дата КАК Дата,
	|	ОбработкаТоварыУслуги.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ОбработкаТоварыУслуги.СуммаРегл КАК СуммаРегл,
	|	ОбработкаТоварыУслуги.Артикул КАК Артикул,
	|	ОбработкаТоварыУслуги.НоменклатураКод КАК Код,
	|	ОбработкаТоварыУслуги.НоменклатураНаименование КАК Наименование,
	|	СУММА(ОбработкаТоварыУслуги.Сумма) КАК Сумма
	|ИЗ
	|	ОбработкаТоварыУслуги КАК ОбработкаТоварыУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер,
	|	Артикул";
КонецФункции

Функция ВернутьТекстЗапросаБП_КорректировкаРеализации(ИсключитьКонтрагентов) Экспорт
	Возврат 
	"ВЫБРАТЬ
	|	СУММА(Документ.Количество) КАК Количество,
	|	Документ.Ссылка.Номер,
	|	Документ.Ссылка.Дата,
	| 	Документ.Ссылка.Контрагент КАК Контрагент,
	| 	0 КАК КурсВзаиморасчетов,
	| 	0 КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА Документ.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА Документ.Номенклатура.Наименование
	|		ИНАЧЕ Документ.Номенклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	|	Документ.Номенклатура.Ссылка.Код,
	|	Документ.Номенклатура.Наименование,
	|	СУММА(ВЫРАЗИТЬ(Документ.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	Документ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РеализацияТоварыБП
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК Документ
	|ГДЕ
	|	Документ.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И Документ.Ссылка.Проведен = ИСТИНА
	|	И (Документ.Ссылка.Организация В (&Организации)
	|			ИЛИ &ПОВСЕМ)"+
	?(ИсключитьКонтрагентов,
	"
	|	И НЕ Документ.Ссылка.Контрагент В (&НеКонтрагенты)", "") +
	"
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Документ.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА Документ.Номенклатура.Наименование
	|		ИНАЧЕ Документ.Номенклатура.Артикул
	|	КОНЕЦ,
	|	Документ.Ссылка.Контрагент,
	|	Документ.Номенклатура.Ссылка.Код,
	|	Документ.Номенклатура.Наименование,
	|	Документ.Ссылка.Дата,
	|	Документ.Ссылка.Номер,
	|	Документ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Ссылка,
	|	СУММА(Документ.Количество) КАК Количество,
	|	СУММА(ВЫРАЗИТЬ(Документ.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	Документ.Ссылка.Номер,
	|	Документ.Ссылка.Дата,
	|	0 КАК КурсВзаиморасчетов,
	|	0 КАК СуммаРегл,
	|	Документ.Ссылка.Контрагент,
	|	ВЫБОР
	|		КОГДА Документ.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА Документ.Номенклатура.Наименование
	|		ИНАЧЕ Документ.Номенклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	|	Документ.Номенклатура.Ссылка.Код,
	|	Документ.Номенклатура.Наименование
	|ПОМЕСТИТЬ РеализацииУслугиБП
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК Документ
	|ГДЕ
	|	Документ.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И Документ.Ссылка.Проведен = ИСТИНА
	|	И (Документ.Ссылка.Организация В (&Организации)
	|			ИЛИ &ПОВСЕМ)"+
	?(ИсключитьКонтрагентов,
	"
	|	И НЕ Документ.Ссылка.Контрагент В (&НеКонтрагенты)", "") +
	"
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.Номенклатура.Ссылка.Код,
	|	Документ.Номенклатура.Наименование,
	|	Документ.Ссылка,
	|	Документ.Ссылка.Контрагент,
	|	ВЫБОР
	|		КОГДА Документ.Номенклатура.Артикул = """"""""""""""""
	|			ТОГДА Документ.Номенклатура.Наименование
	|		ИНАЧЕ Документ.Номенклатура.Артикул
	|	КОНЕЦ,
	|	Документ.Ссылка.Номер,
	|	Документ.Ссылка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РеализацияТоварыБП.Количество) КАК Количество,
	|	РеализацияТоварыБП.Номер,
	|	РеализацияТоварыБП.Дата,
	|	РеализацияТоварыБП.КурсВзаиморасчетов,
	|	РеализацияТоварыБП.СуммаРегл,
	|	РеализацияТоварыБП.Артикул,
	|	РеализацияТоварыБП.Контрагент,
	|	РеализацияТоварыБП.НоменклатураСсылкаКод,
	|	РеализацияТоварыБП.НоменклатураНаименование,
	|	СУММА(РеализацияТоварыБП.Сумма) КАК Сумма,
	|	РеализацияТоварыБП.Ссылка
	|ПОМЕСТИТЬ ОбработкаТоварыУслуги
	|ИЗ
	|	РеализацияТоварыБП КАК РеализацияТоварыБП
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоварыБП.Артикул,
	|	РеализацияТоварыБП.Дата,
	|	РеализацияТоварыБП.КурсВзаиморасчетов,
	|	РеализацияТоварыБП.СуммаРегл,
	|	РеализацияТоварыБП.Номер,
	|	РеализацияТоварыБП.Контрагент,
	|	РеализацияТоварыБП.НоменклатураСсылкаКод,
	|	РеализацияТоварыБП.НоменклатураНаименование,
	|	РеализацияТоварыБП.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(РеализацииУслугиБП.Количество),
	|	РеализацииУслугиБП.Номер,
	|	РеализацииУслугиБП.Дата,
	|	РеализацииУслугиБП.КурсВзаиморасчетов,
	|	РеализацииУслугиБП.СуммаРегл,
	|	РеализацииУслугиБП.Артикул,
	|	РеализацииУслугиБП.Контрагент,
	|	РеализацииУслугиБП.НоменклатураСсылкаКод,
	|	РеализацииУслугиБП.НоменклатураНаименование,
	|	СУММА(РеализацииУслугиБП.Сумма),
	|	РеализацииУслугиБП.Ссылка
	|ИЗ
	|	РеализацииУслугиБП КАК РеализацииУслугиБП
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацииУслугиБП.Номер,
	|	РеализацииУслугиБП.Дата,
	|	РеализацииУслугиБП.КурсВзаиморасчетов,
	|	РеализацииУслугиБП.СуммаРегл,
	|	РеализацииУслугиБП.Артикул,
	|	РеализацииУслугиБП.Контрагент,
	|	РеализацииУслугиБП.НоменклатураСсылкаКод,
	|	РеализацииУслугиБП.НоменклатураНаименование,
	|	РеализацииУслугиБП.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбработкаТоварыУслуги.Количество КАК Количество,
	|	ОбработкаТоварыУслуги.Номер КАК Номер,
	|	ОбработкаТоварыУслуги.Дата КАК Дата,
	|	ОбработкаТоварыУслуги.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ОбработкаТоварыУслуги.СуммаРегл КАК СуммаРегл,
	|	ОбработкаТоварыУслуги.Артикул КАК Артикул,
	|	ОбработкаТоварыУслуги.Контрагент КАК Контрагент,
	|	ОбработкаТоварыУслуги.НоменклатураСсылкаКод КАК Код,
	|	ОбработкаТоварыУслуги.НоменклатураНаименование КАК Наименование,
	|	ОбработкаТоварыУслуги.Сумма КАК Сумма
	|ИЗ
	|	ОбработкаТоварыУслуги КАК ОбработкаТоварыУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер,
	|	Артикул";
	
КонецФункции

// Удаляет лидирующие нули из номера объекта.
// Переменная НомерОбъекта должна соответствовать шаблону: ООГГ-ХХХ...ХХ или ГГ-ХХХ...ХХ, где.
// ОО - префикс организации;
// ГГ - префикс информационной базы;
// "-" - разделитель;
// ХХХ...ХХ - номер/код объекта.
//
// Параметры:
//  НомерОбъекта - Строка - номер или код объекта из которого требуется лидирующие нули.
// 
Функция УдалитьЛидирующиеНулиИзНомераОбъектаОбработка(Знач НомерОбъекта) 
	
	ПользовательскийПрефикс = ПолучитьПользовательскийПрефикс(НомерОбъекта);
	
	Если НомерСодержитСтандартныйПрефикс(НомерОбъекта) Тогда
		
		Если НомерСодержитПятизначныйПрефикс(НомерОбъекта) Тогда
			Префикс = Лев(НомерОбъекта, 5);
			Номер = Сред(НомерОбъекта, 2 + СтрДлина(ПользовательскийПрефикс));
		Иначе
			Префикс = Лев(НомерОбъекта, 3);
			Номер = Сред(НомерОбъекта, 3 + СтрДлина(ПользовательскийПрефикс));
		КонецЕсли;
		
	Иначе
		
		Префикс = "";
		Номер = Сред(НомерОбъекта, 1 + СтрДлина(ПользовательскийПрефикс));
		
	КонецЕсли;
	
	// Удаляем лидирующие нули слева в номере.
	Номер = УдалитьПовторяющиесяСимволыОбработка(Номер, "0");
	
	СтрокаНомер = ПользовательскийПрефикс + Номер; 
	СтрокаНомер = СтрЗаменить(СтрокаНомер, " ", "");
	
	Возврат СтрокаНомер;
КонецФункции

Функция ИзСтрокиВМассивПрефикс(НачальнаяСтрока,Разделитель) 
    
    СтрокаПреобразованнаяВМногострочныйТекст     = СтрЗаменить(НачальнаяСтрока,Разделитель,Символы.ПС);
    ТекстовыйДокументИзСтроки                    = Новый ТекстовыйДокумент;
    Результат                                    = Новый Массив;
    ТекстовыйДокументИзСтроки.УстановитьТекст(СтрокаПреобразованнаяВМногострочныйТекст);
    Для СчетчикСтрок = 1 по ТекстовыйДокументИзСтроки.КоличествоСтрок() цикл
        Результат.Добавить(СокрЛП(ТекстовыйДокументИзСтроки.ПолучитьСтроку(СчетчикСтрок)));
	КонецЦикла;
	Если Результат.Количество() <= 1 Тогда
    	Возврат "";
	Иначе
		Возврат Результат[0];
	КонецЕсли;
    
КонецФункции

Функция НомерСодержитСтандартныйПрефикс(Знач НомерОбъекта)
	
	ПозицияРазделителя = Найти(НомерОбъекта, "-");
	
	Возврат ПозицияРазделителя = 3
		ИЛИ ПозицияРазделителя = 5
	;
КонецФункции

Функция НомерСодержитПятизначныйПрефикс(Знач НомерОбъекта)
	
	Возврат Найти(НомерОбъекта, "-") = 5;
	
КонецФункции

// Получает пользовательский префикс номера/кода объекта.
// Переменная НомерОбъекта должна соответствовать шаблону: ООГГ-ХХХ...ХХ или ГГ-ХХХ...ХХ, где.
// ОО - префикс организации;
// ГГ - префикс информационной базы;
// "-" - разделитель;
// АА - пользовательский префикс;
// ХХ..ХХ - номер/код объекта.
//
// Параметры:
//  НомерОбъекта - Строка - номер или код объекта из которого требуется получить пользовательский префикс.
//
Функция ПолучитьПользовательскийПрефикс(Знач НомерОбъекта) Экспорт
	
	// Возвращаемое значение функции (пользовательский префикс).
	Результат = "";
	
	Если НомерСодержитСтандартныйПрефикс(НомерОбъекта) Тогда
		
		//Если НомерСодержитПятизначныйПрефикс(НомерОбъекта) Тогда
		//	НомерОбъекта = Сред(НомерОбъекта, 6);
		//Иначе
		//	НомерОбъекта = Сред(НомерОбъекта, 4);
		//КонецЕсли;
		
	КонецЕсли;
	
	//СтрокаЦифровыхСимволов = "0123456789";
	//
	//Для Индекс = 1 По СтрДлина(НомерОбъекта) Цикл
	//	
	//	Символ = Сред(НомерОбъекта, Индекс, 1);
	//	
	//	Если Найти(СтрокаЦифровыхСимволов, Символ) > 0 Тогда
	//		Прервать;
	//	КонецЕсли;
	//	
	//	Результат = Результат + Символ;
	//	
	//КонецЦикла;
	
	Результат = ИзСтрокиВМассивПрефикс(НомерОбъекта, "-");
	
	Возврат Результат;
КонецФункции

// Удаляет крайние повторяющиеся символы слева или справа в строке.
//
// Параметры:
//  Строка      - Строка - исходная строка, из которой необходимо удалить крайние повторяющиеся символы;
//  Символ      - Строка - искомый символ для удаления;
//  Режим       - Строка - "Слева" или "Справа" - режим удаления символов в исходной строке.
//
// Возвращаемое значение:
//  Строка - обрезанная строка.
//
Функция УдалитьПовторяющиесяСимволыОбработка(Знач Строка, Знач Символ, Знач Режим = "СЛЕВА") 
	
	Если ВРег(Режим) = "СЛЕВА" Тогда
		
		Пока Лев(Строка, 1)= Символ Цикл
			
			Строка = Сред(Строка, 2);
			
		КонецЦикла;
		
	ИначеЕсли ВРег(Режим) = "СПРАВА" Тогда
		
		Пока Прав(Строка, 1)= Символ Цикл
			
			Строка = Лев(Строка, СтрДлина(Строка) - 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	Возврат Строка;
КонецФункции

Функция ПолучитьАдресНаСервере(ТЗ_внеш_тз)
 	Возврат ПоместитьВоВременноеХранилище(ТЗ_внеш_тз.Скопировать());
КонецФункции	

#КонецОбласти

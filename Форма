&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	Реализация.Очистить();
	ПроверитьОстатки = Истина;
КонецПроцедуры

&НаСервере
Процедура КнопкаПодключитьНажатиеНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПодключитьНажатие(Команда)
	ОчиститьСообщения();
	Если РезультатПодключения Тогда
		ОтключитьБД();
	Иначе
		ПодключитьБазу();
	КонецЕсли;

	//КнопкаПодключитьНажатиеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ФайловаяБазаДанных = Истина;
	ПриОткрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
 
	РабочаяДата = ОбщегоНазначенияБП.ПолучитьРабочуюДату();
	Период.ДатаНачала 		= НачалоНедели(РабочаяДата);
	Период.ДатаОкончания 	= КонецНедели(РабочаяДата);
	КодВидаОперацииПоступления = "01";
	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
	Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры, 
	ЭтаФорма.Элементы.КодВидаОперацииПоступления.СписокВыбора,
	Период.ДатаНачала);
	
	СпрСсылкаВидыКонтактнойИнформации =  Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Данные для соединения с БД");
	 //Если вида контактактной информации нет - создаем новый	  
	Если СпрСсылкаВидыКонтактнойИнформации.Пустая() Тогда
		СпрВидыКонтактнойИнф		      = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		СпрВидыКонтактнойИнф.Тип 		  = Перечисления.ТипыКонтактнойИнформации.Другое;
		СпрВидыКонтактнойИнф.Наименование = "Данные для соединения с БД";
		//СпрВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
		СпрВидыКонтактнойИнф.Записать();
		СпрВидыКонтактнойИнформации = СпрВидыКонтактнойИнф;
		СпрСсылкаВидыКонтактнойИнформации = СпрВидыКонтактнойИнформации.Ссылка;
	КонецЕсли;
	ПроверитьОстатки = Истина;
КонецПроцедуры

&НаСервере
Процедура ОтключитьБД()
	Если ЗначениеЗаполнено(ХранилищеКомпоненты) Тогда
		ХранилищеКомпоненты = Неопределено;
	КонецЕсли; 
	РезультатПодключения = Ложь;
	ЭтаФорма.Элементы.КнопкаПодключитьНажатие.Заголовок = "Подключить к базе" ;
	ЭтаФорма.Элементы.КнопкаПодключитьНажатие.ЦветТекста = WebЦвета.Красный;
КонецПроцедуры	// ОтключитьБД()


Функция НайтиДанныеДляПодключения(Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление,
		|	КонтрагентыКонтактнаяИнформация.Значение КАК Значение
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Вид", СпрСсылкаВидыКонтактнойИнформации);
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	Запрос.УстановитьПараметр("Тип", СпрСсылкаВидыКонтактнойИнформации.Тип);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ДанныеПодключения = Неопределено;
	Иначе	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Значение) Тогда
			   ДанныеПодключения = ВыборкаДетальныеЗаписи.Значение;
			Иначе	
			   ДанныеПодключения = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПодключения;
	
КонецФункции // НайтиДанныеДляПодключения()

&НаСервере
Процедура ПодключитьБазу()
	Сообщение = Новый СообщениеПользователю();
	
	//Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	Если НЕ ЗначениеЗаполнено( Контрагент ) ИЛИ НЕ ЗначениеЗаполнено(ПутьКБД) ИЛИ НЕ ЗначениеЗаполнено(Склад)
		 ИЛИ НЕ ЗначениеЗаполнено(ПоставщикДляПрихода) Тогда
			Сообщение.Текст = "Заполнены не все обязательные поля.";
			Сообщение.Сообщить();
			Возврат;
		ИначеЕсли  Контрагент.ИНН="" Тогда
			Сообщение.Текст = "ИНН контрагента незаполнен.";
			Сообщение.Сообщить();
			Возврат;
	КонецЕсли;
	
	//COMConnector = Новый COMОбъект("V82.COMConnector");
	COMConnector = Новый COMОбъект("V83.COMConnector");

	//-------------- Пытаемся подключиться -----------------------------
	
	Если ФайловаяБазаДанных Тогда
		СтрокаПодключения = "file='" + ПутьКБД + "'; usr='" + ПользовательБД + "'; pwd='" + ПарольПользователяБД + "';";
	Иначе
		СтрокаПодключения =  "srvr='" + Сервер + "'; ref='" + ПутьКБД + "'; usr='" + ПользовательБД + "'; pwd='" + ПарольПользователяБД + "';";
	КонецЕсли;
	
	Попытка	
		БазаОлеТек = COMConnector.Connect(СтрокаПодключения);
		РезультатПодключения=Истина;
	Исключение
		Сообщение.Текст = "Ошибка подключения."+Символы.ВК+Символы.ПС+
		"Несуществующий путь к базе, имя пользователя или пароль.";
		Сообщение.Сообщить();
		Возврат;					
	КонецПопытки;	
	//--------------- Проверяем внешнюю базу на корректность данных ---------
	Если БазаОлеТек.Справочники.Организации.НайтиПоРеквизиту("ИНН", Контрагент.ИНН).Пустая() Тогда
		ОтключитьБД();
		Сообщение.Текст = "Во внешней базе данных не найдена организация: """+ Контрагент.Наименование+""" с ИНН "+Контрагент.ИНН ;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если БазаОлеТек.Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", Организация.ИНН).Пустая() Тогда
		ОтключитьБД();
		Сообщение.Текст = "Во внешней базе данных не найден контрагент: """+ Организация.Наименование+""" с ИНН "+Организация.ИНН ;
		Сообщение.Сообщить();
		Возврат;
    КонецЕсли;
    //--------------------------------------------------------------------
	
	ДанныеДляПодключения = НайтиДанныеДляПодключения(Контрагент);
	Если ЗначениеЗаполнено(ДанныеДляПодключения) Тогда
		Данные = Контрагент.КонтактнаяИнформация.Найти(СпрСсылкаВидыКонтактнойИнформации);
		ОбъектКонтрагент = Контрагент.ПолучитьОбъект();
			МассивСтрок = ОбъектКонтрагент.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",СпрСсылкаВидыКонтактнойИнформации)); 		
			Для Каждого цСтрока Из МассивСтрок Цикл
				//ДобавитьКИ = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
				цСтрока.Вид 		  = СпрСсылкаВидыКонтактнойИнформации;
				цСтрока.Тип 		  = СпрСсылкаВидыКонтактнойИнформации.Тип;
				цСтрока.ВидДляСписка  = СпрСсылкаВидыКонтактнойИнформации;
				цСтрока.Представление = "Данные для соединения с БД";
				Если ФайловаяБазаДанных Тогда
					цСтрока.Значение	 	 = ПутьКБД + ";" + ПользовательБД + ";" + ПарольПользователяБД + ";";
				Иначе
					цСтрока.Значение	 	 = Сервер + ";" + ПутьКБД + ";" + ПользовательБД + ";" + ПарольПользователяБД + ";";		
				КонецЕсли;
			КонецЦикла; 
		
		ОбъектКонтрагент.Записать();
	Иначе
		ОбъектКонтрагент = Контрагент.ПолучитьОбъект();
		ДобавитьКИ = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
		ДобавитьКИ.Вид 		     = СпрСсылкаВидыКонтактнойИнформации;
		ДобавитьКИ.Тип 			 = СпрСсылкаВидыКонтактнойИнформации.Тип;
		ДобавитьКИ.ВидДляСписка  = СпрСсылкаВидыКонтактнойИнформации;
		ДобавитьКИ.Представление = "Данные для соединения с БД";
		Если ФайловаяБазаДанных Тогда
		  	ДобавитьКИ.Значение	 	 = ПутьКБД + ";" + ПользовательБД + ";" + ПарольПользователяБД + ";";
		Иначе
			ДобавитьКИ.Значение	 	 = Сервер + ";" + ПутьКБД + ";" + ПользовательБД + ";" + ПарольПользователяБД + ";";		
		КонецЕсли;
		ОбъектКонтрагент.Записать();
	КонецЕсли; 


	//НаборЗаписейРегКонтактнаяИнформация = РегистрыСведений.УдалитьКонтактнаяИнформация.СоздатьНаборЗаписей();
	//НаборЗаписейРегКонтактнаяИнформация.Отбор.Объект.Установить(Контрагент);
	//НаборЗаписейРегКонтактнаяИнформация.Отбор.Тип.Установить(СпрСсылкаВидыКонтактнойИнформации.Тип);
	//НаборЗаписейРегКонтактнаяИнформация.Отбор.Вид.Установить(СпрСсылкаВидыКонтактнойИнформации);
	//
	//ЗаписьРегКонтактнаяИнформация 		= 	НаборЗаписейРегКонтактнаяИнформация.Добавить();
	//ЗаписьРегКонтактнаяИнформация.Объект=	Контрагент;
	//ЗаписьРегКонтактнаяИнформация.Тип	=	СпрСсылкаВидыКонтактнойИнформации.Тип;
	//ЗаписьРегКонтактнаяИнформация.Вид	=	СпрСсылкаВидыКонтактнойИнформации;
	//ЗаписьРегКонтактнаяИнформация.Поле1 = ПутьКБД;
	//ЗаписьРегКонтактнаяИнформация.Поле2 = ПользовательБД;
	//ЗаписьРегКонтактнаяИнформация.Поле3 = ПарольПользователяБД;
	//НаборЗаписейРегКонтактнаяИнформация.Записать(Истина);
	
	Структура               = New Структура("Объект", БазаОлеТек);
	//структуру помещаем в хранилище
	ХранилищеКомпоненты     = ПоместитьВоВременноеХранилище(Структура, ХранилищеКомпоненты);

	ЭтаФорма.Элементы.КнопкаПодключитьНажатие.Заголовок = "База подключена" ;
	ЭтаФорма.Элементы.КнопкаПодключитьНажатие.ЦветТекста = WebЦвета.Зеленый;
	
КонецПроцедуры	// ПодключитьБазу() 

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ОтключитьБД();	
	
	ПутьКБД = "";
	ПользовательБД = "";
	ПарольПользователяБД = "";
	
	СтрокаДляПодключения 		 = НайтиДанныеДляПодключения(Контрагент);
	Если ЗначениеЗаполнено(СтрокаДляПодключения) Тогда
		МассиДанныхПодключения = РазложитьСтрокуНаПодстроки(СтрокаДляПодключения);
		Если МассиДанныхПодключения.Количество() = 3 Тогда
			ФайловаяБазаДанных 	 = Истина;
			ЭтаФорма.Элементы.Сервер.Доступность = Ложь;
			ПутьКБД 			 = МассиДанныхПодключения[0];		
			ПользовательБД  	 = МассиДанныхПодключения[1];
			ПарольПользователяБД = МассиДанныхПодключения[2];
		ИначеЕсли МассиДанныхПодключения.Количество() = 4 Тогда
			ФайловаяБазаДанных 	 = Ложь;
			ЭтаФорма.Элементы.Сервер.Доступность = Истина;
			Сервер				 = МассиДанныхПодключения[0]; 
			ПутьКБД 			 = МассиДанныхПодключения[1];		
			ПользовательБД  	 = МассиДанныхПодключения[2];
			ПарольПользователяБД = МассиДанныхПодключения[3];
		КонецЕсли;
	КонецЕсли;

	//НаборЗаписейРегКонтактнаяИнформация = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	//НаборЗаписейРегКонтактнаяИнформация.Отбор.Объект.Установить(Контрагент);
	//НаборЗаписейРегКонтактнаяИнформация.Отбор.Тип.Установить(СпрСсылкаВидыКонтактнойИнформации.Тип);
	//НаборЗаписейРегКонтактнаяИнформация.Отбор.Вид.Установить(СпрСсылкаВидыКонтактнойИнформации);
	//
	//НаборЗаписейРегКонтактнаяИнформация.Прочитать();
	//	
	//Если НаборЗаписейРегКонтактнаяИнформация.Количество() > 0 Тогда
	//	ПутьКБД = НаборЗаписейРегКонтактнаяИнформация[0].Поле1;		
	//	ПользовательБД = НаборЗаписейРегКонтактнаяИнформация[0].Поле2;
	//	ПарольПользователяБД = НаборЗаписейРегКонтактнаяИнформация[0].Поле3;
	//КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция РазложитьСтрокуНаПодстроки(ВходящаяСтрока)
	Разделитель = ";";
	
	МассивСтрок = Новый Массив();
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, Разделитель, Символы.ПС);
	
	Для ИндексСтроки = 1 По СтрЧислоСтрок(ВходящаяСтрока) Цикл
		Подстрока = СтрПолучитьСтроку(ВходящаяСтрока, ИндексСтроки);
		МассивСтрок.Добавить(Подстрока);
	КонецЦикла;
	
	Возврат МассивСтрок;

КонецФункции

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		ОтключитьБД();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПутьКБДПриИзмененииНаСервере()
	ОтключитьБД();
КонецПроцедуры

&НаКлиенте
Процедура ПутьКБДПриИзменении(Элемент)
	ПутьКБДПриИзмененииНаСервере();
КонецПроцедуры

//&НаСервере
//Процедура ПутьКБДНачалоВыбораНаСервере()
//	ОтключитьБД();
//КонецПроцедуры

//&НаКлиенте
//Процедура ПутьКБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	СтандартнаяОбработка=Ложь;
//	
//	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
//	
//	ДиалогФыбораФайла.Заголовок = "Выберите каталог информационной базы ";
//	Если ДиалогФыбораФайла.Выбрать() Тогда
//		ПутьКБД = ДиалогФыбораФайла.Каталог;
//	КонецЕсли;
//	ПутьКБДНачалоВыбораНаСервере();
//КонецПроцедуры

&НаКлиенте
Процедура ФайловаяБазаДанныхПриИзменении(Элемент)
	
	Если  ФайловаяБазаДанных Тогда
		ЭтаФорма.Элементы.Сервер.Доступность = Ложь;
	Иначе
		ЭтаФорма.Элементы.Сервер.Доступность = Истина;
	КонецЕсли;	

КонецПроцедуры


&НаКлиенте
Процедура ЕстьРазличиеРеализацияПриИзменении(Элемент)
	Если ЕстьРазличиеРеализация  Тогда
		ЭтаФорма.Элементы.ЕстьРазличиеРеализация.Видимость =Истина;
	Иначе
		ЭтаФорма.Элементы.ЕстьРазличиеРеализация.Видимость =Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОстаткиПриИзменении(Элемент)
	Если ПроверитьОстатки Тогда
		ЭтаФорма.Элементы.РеализацияКоманднаяПанельРеализацияСоздатьРеализацию.Доступность = Ложь;
		ЭтаФорма.Элементы.РеализацияКоманднаяПанельРеализацияПроверитьОстатки.Доступность = Истина; 
	Иначе
		ЭтаФорма.Элементы.РеализацияКоманднаяПанельРеализацияСоздатьРеализацию.Доступность = Истина;
		ЭтаФорма.Элементы.РеализацияКоманднаяПанельРеализацияПроверитьОстатки.Доступность = Ложь;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЕстьНенайденаяВалютаПриИзменении(Элемент)
	Если ЕстьНенайденаяВалюта  Тогда
		ЭтаФорма.Элементы.ЕстьНенайденаяВалюта.Видимость =Истина;
	Иначе
		ЭтаФорма.Элементы.ЕстьНенайденаяВалюта.Видимость =Ложь;
	КонецЕсли;
КонецПроцедуры

//---------------

&НаКлиенте
Процедура КоманднаяПанельРеализацияЗаполнитьРеализацию(Команда)
	ОчиститьСообщения();
	КоманднаяПанельРеализацияЗаполнитьРеализациюНаСервере();
КонецПроцедуры

&НаСервере
Процедура КоманднаяПанельРеализацияЗаполнитьРеализациюНасервере()
	
	Если НЕ РезультатПодключения Тогда
		Сообщить("База не подключена");
		Возврат;
	КонецЕсли;
	
	// пробуем получить из хранилища
	ВК = ПолучитьИзВременногоХранилища(ХранилищеКомпоненты).Объект;
	
	Реализация.Очистить();
	ПроверитьОстатки = Истина;
	
	ЕстьРазличиеРеализация = Ложь;
	Запрос = ВК.NewObject("Query");
	
	//
	ДокументРежимРаботы = ""; 
	//РеализацияТоваровУслуг
	//ПоступлениеТоваровУслуг
	//
	Если РежимРаботы = "1" Тогда
		ДокументРежимРаботы = "ПоступлениеТоваровУслуг";	
	ИначеЕсли РежимРаботы = "2" Тогда
		ДокументРежимРаботы = "РеализацияТоваровУслуг";	
	Иначе
		ДокументРежимРаботы = "ПоступлениеТоваровУслуг";	
	КонецЕсли;
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	ДокументТовары.Номер,
	|	ДокументТовары.Дата,
	|	ДокументТовары.ВалютаДокумента,
	|	ДокументТовары.СуммаДокумента
	|ИЗ
	|	Документ."+ДокументРежимРаботы+" КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДокументТовары.Проведен = ИСТИНА                        
	|	И ДокументТовары.Организация.ИНН = &ОрганизацияИНН
	|	И ДокументТовары.Контрагент.ИНН = &КонтрагентИНН";
	//"ВЫБРАТЬ
	//|	"+ ДокументРежимРаботы +".Номер,
	//|	ПоступлениеТоваровУслуг.Дата,
	//|	ПоступлениеТоваровУслуг.ВалютаДокумента,
	//|	ПоступлениеТоваровУслуг.СуммаДокумента
	//|ИЗ
	//|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//|ГДЕ
	//|	ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	//|	И ПоступлениеТоваровУслуг.Проведен = ИСТИНА                        
	//|	И ПоступлениеТоваровУслуг.Организация.ИНН = &ОрганизацияИНН
	//|	И ПоступлениеТоваровУслуг.Контрагент.ИНН = &КонтрагентИНН";
	
	Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода",КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("ОрганизацияИНН",Контрагент.ИНН);
	Запрос.УстановитьПараметр("КонтрагентИНН",Организация.ИНН);
	
	Выборка	=	Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы	=	Реализация.Добавить();
		СтрокаТаблицы.НомерДокТорговли	=	Выборка.Номер;
		//Если  ТипЗнч(Кнопка )  =	Тип("КнопкаКоманднойПанели")    Тогда
		//	СтрокаТаблицы.ФлагЗагрузки			=	Истина;
		//Иначе
		//	СтрокаТаблицы.ФлагЗагрузки			=	Ложь;
		//КонецЕсли;
		СтрокаТаблицы.ФлагЗагрузки = Истина;

		СтрокаТаблицы.ДатаДокТорговли	=	Выборка.Дата;
	    СтрокаТаблицы.Валюта = Справочники.Валюты.НайтиПоКоду(Выборка.ВалютаДокумента.Код);
		Если СтрокаТаблицы.Валюта.Пустая() Тогда
			СтрокаТаблицы.ФлагЗагрузки = Ложь;
			ЕстьНенайденаяВалюта = Истина;
		КонецЕсли;
			
		СтрокаТаблицы.СуммаДокТорговли	=	Выборка.СуммаДокумента;
		Если РежимРаботы = "1" Тогда	
			ТекДокумент = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Выборка.Номер,Выборка.Дата);
		ИначеЕсли РежимРаботы = "2" Тогда
			ТекДокумент = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(Выборка.Номер,Выборка.Дата);
		Иначе
			ТекДокумент = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Выборка.Номер,Выборка.Дата);	
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(ТекДокумент) Тогда
			СтрокаТаблицы.ДокументРеализицииБух = ТекДокумент;
			СтрокаТаблицы.КонтрагентБух = ТекДокумент.Контрагент;
			СтрокаТаблицы.СуммаДокБух = ТекДокумент.СуммаДокумента;
			Если  СтрокаТаблицы.СуммаДокБух <> СтрокаТаблицы.СуммаДокТорговли Тогда
				ЕстьРазличиеРеализация = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	Если Реализация.Количество() > 0 Тогда
		Элементы.РеализацияКоманднаяПанельРеализацияПроверитьОстатки.Доступность = Истина;	
	КонецЕсли; 
	
КонецПроцедуры	// КоманднаяПанельРеализацияЗаполнитьРеализацию(Кнопка="")

&НаКлиенте
Процедура КоманднаяПанельРеализацияВыделить(Кнопка)
	
	Для Каждого СтрокаРеализации Из Реализация Цикл
		СтрокаРеализации.ФлагЗагрузки = Истина;
		Если  СтрокаРеализации.Валюта.Пустая() Тогда
			 СтрокаРеализации.ФлагЗагрузки =Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	// КоманднаяПанельРеализацияВыделить(Кнопка)

&НаКлиенте
Процедура КоманднаяПанельРеализацияУбрать(Кнопка)
	
	Для Каждого СтрокаРеализации Из Реализация Цикл
		СтрокаРеализации.ФлагЗагрузки = Ложь;
	КонецЦикла;
	
КонецПроцедуры	// КоманднаяПанельРеализацияУбрать(Кнопка)

&НаКлиенте
Процедура КоманднаяПанельРеализацияСоздатьРеализацию(Команда)
	ОчиститьСообщения();
	КоманднаяПанельРеализацияСоздатьРеализациюНаСервере();
КонецПроцедуры

&НаСервере
Процедура КоманднаяПанельРеализацияСоздатьРеализациюНасервере()

	//КоманднаяПанельРеализацияЗаполнитьРеализацию();
	Если НЕ РезультатПодключения Тогда
		Сообщить("База не подключена");
		Возврат;
	КонецЕсли;
	
	// пробуем получить из хранилища
	ВК = ПолучитьИзВременногоХранилища(ХранилищеКомпоненты).Объект;
	
	Для Каждого СтрокаРеализация Из Реализация Цикл
		
		Если НЕ СтрокаРеализация.ФлагЗагрузки  Тогда
			Продолжить;
		КонецЕсли;
		Если РежимРаботы = "1" Тогда
			ВнешнийДокумент	=  ВК.Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(СтрокаРеализация.НомерДокТорговли,СтрокаРеализация.ДатаДокТорговли);
		ИначеЕсли РежимРаботы = "2" Тогда
			ВнешнийДокумент	=  ВК.Документы.РеализацияТоваровУслуг.НайтиПоНомеру(СтрокаРеализация.НомерДокТорговли,СтрокаРеализация.ДатаДокТорговли);
		Иначе
			ВнешнийДокумент	=  ВК.Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(СтрокаРеализация.НомерДокТорговли,СтрокаРеализация.ДатаДокТорговли);	
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(СтрокаРеализация.ДокументРеализицииБух) Тогда
			
			Если РежимРаботы = "1" Тогда
				ДокументРеализации				= 	Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			ИначеЕсли РежимРаботы = "2" Тогда
				ДокументРеализации				= 	Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			Иначе
				ДокументРеализации				= 	Документы.РеализацияТоваровУслуг.СоздатьДокумент();	
			КонецЕсли;
			
			Если РежимРаботы = "1" Тогда
				ДокументРеализации.ВидОперации	=	Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
			ИначеЕсли РежимРаботы = "2" Тогда
				ДокументРеализации.ВидОперации	=	Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
				
			Иначе
				ДокументРеализации.ВидОперации	=	Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;	
			КонецЕсли;
			//ПокупкаКомиссия
			ДокументРеализации.Дата			=	КонецДня(СтрокаРеализация.ДатаДокТорговли);   
			Если РежимРаботы = "1" Тогда
				ДокументРеализации.Номер		= СтрокаРеализация.НомерДокТорговли;
			КонецЕсли;
			Если РежимРаботы = "2" Тогда
				ДокументРеализации.НомерВходящегоДокумента = СтрокаРеализация.НомерДокТорговли;
				ДокументРеализации.ДатаВходящегоДокумента = СтрокаРеализация.ДатаДокТорговли;
			КонецЕсли;
		Иначе
			ДокументРеализации = СтрокаРеализация.ДокументРеализицииБух.ПолучитьОбъект();
			ДокументРеализации.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		
		
		// Заполнить реквизиты значениями по умолчанию.
		//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументРеализации, ПараметрыСеанса.ТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа",);
		ЗаполнениеДокументов.Заполнить(ДокументРеализации, , );
		ДокументРеализации.Организация =Организация;
		
		// Выполняем общие действия для всех документов при изменении Организация.
		ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ДокументРеализации, ПараметрыСеанса.ТекущийПользователь);
		
		Если РежимРаботы = "1" Тогда
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(ДокументРеализации.БанковскийСчетОрганизации, ДокументРеализации.Организация, мВалютаРегламентированногоУчета);
		КонецЕсли;

		
		ДокументРеализации.Контрагент = Контрагент;
		//ДоговорКонтрагента			  = ДокументРеализации.Контрагент.УдалитьОсновнойДоговорКонтрагента;
		ДоговорКонтрагента= ОсновнойДоговорКонтрагента(ДокументРеализации,Организация,Контрагент,,);
		
		Валюта = Справочники.Валюты.НайтиПоКоду(ВнешнийДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код);
		Если ЗначениеЗаполнено(Валюта) Тогда
			ВалютаВзаиморасчетов = Валюта;
		Иначе
			ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СсылкаДоговорКонтрагента = 	УстановитьДоговорКонтрагента(ДокументРеализации["Контрагент"],
									ДокументРеализации["Организация"], 
									СписокВидовДоговоров,ВнешнийДокумент.ДоговорКонтрагента.Наименование,ВалютаВзаиморасчетов);							
									
		Если СсылкаДоговорКонтрагента.Пустая() Тогда							
			ДоговорКонтрагента= Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			ДоговорКонтрагента.Наименование =ВнешнийДокумент.ДоговорКонтрагента.Наименование;
			ДоговорКонтрагента.Владелец = ДокументРеализации.Контрагент;
			ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
			ДоговорКонтрагента.Организация = ДокументРеализации.Организация;
			ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			ДоговорКонтрагента.Записать();
			ДоговорКонтрагента =ДоговорКонтрагента.Ссылка;
		Иначе
			ДоговорКонтрагента=СсылкаДоговорКонтрагента;
		КонецЕсли;
		
		ДокументРеализации.ДоговорКонтрагента=ДоговорКонтрагента;
		ДокументРеализации.ВалютаДокумента    = ДокументРеализации.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ДокументРеализации.КурсВзаиморасчетов= ВнешнийДокумент.КурсВзаиморасчетов;
		ДокументРеализации.КратностьВзаиморасчетов=ВнешнийДокумент.КратностьВзаиморасчетов;			
		ДокументРеализации.Склад = Склад;
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(ДокументРеализации.Организация, ДокументРеализации.Контрагент, ДокументРеализации.ДоговорКонтрагента);
		ДокументРеализации.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		ДокументРеализации.СпособЗачетаАвансов =Перечисления.СпособыЗачетаАвансов.Автоматически;
		ДокументРеализации.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
		ДокументРеализации.Ответственный					=	ПараметрыСеанса.ТекущийПользователь.Ссылка;
		ДокументРеализации.Комментарий 					= " # Создан из: " + ВнешнийДокумент.Номер;
		ДокументРеализации.Товары.Очистить();
		
	
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ВнешнийДокумент.Товары.Выгрузить(), ДокументРеализации.Товары );			
		Для Каждого СтрокаДокументаРеализации Из ДокументРеализации.Товары Цикл
			ИндексСтроки = ДокументРеализации.Товары.Индекс(СтрокаДокументаРеализации);
			СтрокаДокументаПоступления = ВнешнийДокумент.Товары.Получить(ИндексСтроки);
			СсылкаНоменклатура = Справочники.Номенклатура.НайтиПоКоду(СтрокаДокументаПоступления.Номенклатура.Код);
			Если СсылкаНоменклатура.Пустая() Тогда
					Сообщить("ОШИБКА: В базе данных не найдена номенклатура с кодом "+СсылкаНоменклатура.Код);
					Продолжить;
				Иначе СтрокаДокументаРеализации.Номенклатура = СсылкаНоменклатура;
			КонецЕсли;	
			
			СчетаУчета     = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(ДокументРеализации.Организация, СтрокаДокументаРеализации.Номенклатура,ДокументРеализации.Склад);
			СтрокаДокументаРеализации.СчетУчета = СчетаУчета.СчетУчета;
			Если РежимРаботы = "1" Тогда
				СтрокаДокументаРеализации.СчетДоходов  = СчетаУчета.СчетДоходов;
				СтрокаДокументаРеализации.СчетРасходов = СчетаУчета.СчетРасходов;
				СтрокаДокументаРеализации.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
				//СтрокаДокументаРеализации.Субконто = СтрокаДокументаРеализации.Номенклатура.НоменклатурнаяГруппа;
				Если ЗначениеЗаполнено(Субконто) 
					И Не ЗначениеЗаполнено(СтрокаДокументаРеализации.Номенклатура.НоменклатурнаяГруппа) Тогда
					СтрокаДокументаРеализации.Субконто  = Субконто;
				Иначе
					СтрокаДокументаРеализации.Субконто = СтрокаДокументаРеализации.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЕсли;
			Если РежимРаботы = "2" Тогда
				СтрокаДокументаРеализации.СчетУчетаНДС  = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;;	
			КонецЕсли;
			
			СтрокаДокументаРеализации.СтавкаНДС  = Перечисления.СтавкиНДС.НДС20;
			
			Если НЕ СтрокаДокументаПоступления.НомерГТД.Пустая() Тогда
				КодГТД = СокрЛП(СтрокаДокументаПоступления.НомерГТД.Код);
				
				
				ПроверитьДобавитьГТД(
					КодГТД, 
					СтрокаДокументаПоступления.НомерГТД.Наименование);
				НомерГТД = Справочники.НомераГТД.НайтиПоКоду(КодГТД);	
				СтрокаДокументаРеализации.НомерГТД = НомерГТД;
				Если НЕ СтрокаДокументаПоступления.СтранаПроисхождения.Пустая() Тогда
					КодСтраны = СокрЛП(СтрокаДокументаПоступления.СтранаПроисхождения.Код);
					
					ПроверитьДобавитьСтрану(
						КодСтраны, 
						СтрокаДокументаПоступления.СтранаПроисхождения.Наименование);
					СтранаПроисхождения = Справочники.СтраныМира.НайтиПоКоду(КодСтраны);	
					СтрокаДокументаРеализации.СтранаПроисхождения = СтранаПроисхождения;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		//Для Каждого СтрокаДокРеализацияТоваровУслуг Из ДокументРеализации.Услуги Цикл
		//	Если ЗначениеЗаполнено(СубконтоУслуг) Тогда
		//		СтрокаДокРеализацияТоваровУслуг.Субконто = СубконтоУслуг; // Субконто
		//	КонецЕсли;
		//	СтрокаДокРеализацияТоваровУслуг.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
		//	//
		//	СтрокаДокументаРеализации.СчетДоходов  = СчетаУчета.СчетДоходов;
		//	СтрокаДокументаРеализации.СчетРасходов = СчетаУчета.СчетРасходов;
		//	
		//КонецЦикла;
		//ДокументРеализации.УчитыватьНДС = ВнешнийДокумент.УчитыватьНДС;
		ДокументРеализации.СуммаВключаетНДС = ВнешнийДокумент.СуммаВключаетНДС;
		
		ДокументРеализации.Записать();
		СтрокаРеализация.СуммаДокБух		= ВнешнийДокумент.СуммаДокумента;
		СтрокаРеализация.КонтрагентБух		= ВнешнийДокумент.Контрагент;
		Сообщить("Создан документ "+ДокументРеализации);
		Попытка
			ДокументРеализации.Записать(РежимЗаписиДокумента.Проведение);
			СтрокаРеализация.ДокументРеализицииБух = ДокументРеализации.Ссылка; 	
		Исключение
		КонецПопытки;
		Если ФлагСФСоздавать Тогда
			Если ФлагСФРавнаНакладной Тогда
				Если РежимРаботы = "2" Тогда
					//ДокументРеализации.ПредъявленСчетФактура  = Истина;
					ДокументРеализации.НомерВходящегоСчетаФактуры = СтрокаРеализация.НомерДокТорговли;
					ДокументРеализации.ДатаВходящегоСчетаФактуры = ДокументРеализации.Дата;
					ДокументРеализации.КодВидаОперации = "01";
					ДокументРеализации.НДСПредъявленКВычету = Истина;
					//
					ДокументРеализации.Записать();
					Попытка
						ДокументРеализации.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
					КонецПопытки;
				ИначеЕсли РежимРаботы = "1" Тогда
					КоличествоСФ = КоличествоПодчиненныхДокументовПоТипу(ДокументРеализации, "ДокументСсылка.СчетФактураВыданный");
					//Сообщить ("КоличествоСФ="+КоличествоСФ);
					Если КоличествоСФ < 1
					И НЕ ДокументРеализации.ПометкаУдаления Тогда
						СоздатьСчетФактуру(ДокументРеализации);	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
			
	КонецЦикла;	
		
КонецПроцедуры	// КоманднаяПанельРеализацияСоздатьРеализацию(Кнопка)

&НаКлиенте
Процедура КоманднаяПанельРеализацияПроверитьОстатки(Команда)
	ОчиститьСообщения();
	КоманднаяПанельРеализацияПроверитьОстаткиНаСервере();
КонецПроцедуры

&НаСервере
Процедура КоманднаяПанельРеализацияПроверитьОстаткиНасервере()
	
	Если НЕ РезультатПодключения Тогда
		Сообщить("База не подключена");
		Возврат;
	КонецЕсли;
	
	Если Реализация.Количество() <= 0 Тогда
		Сообщить("Таблица пустая");
		Возврат;
	КонецЕсли;
	
	// пробуем получить из хранилища
	ВК = ПолучитьИзВременногоХранилища(ХранилищеКомпоненты).Объект;
	
	Если РежимРаботы = "1" Тогда
			ПромТаблица = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.Выгрузить();
		ИначеЕсли РежимРаботы = "2" Тогда
			ПромТаблица = Документы.РеализацияТоваровУслуг.ПустаяСсылка().Товары.Выгрузить();
		Иначе
			ПромТаблица = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.Выгрузить();	
	КонецЕсли;
	Для Каждого СтрокаРеализация Из Реализация Цикл
		
		Если НЕ СтрокаРеализация.ФлагЗагрузки  Тогда
			Продолжить;
		КонецЕсли;
		
		Если РежимРаботы = "1" Тогда
			ВнешнийДокумент	=  ВК.Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(СтрокаРеализация.НомерДокТорговли,СтрокаРеализация.ДатаДокТорговли);
		ИначеЕсли РежимРаботы = "2" Тогда
			ВнешнийДокумент	=  ВК.Документы.РеализацияТоваровУслуг.НайтиПоНомеру(СтрокаРеализация.НомерДокТорговли,СтрокаРеализация.ДатаДокТорговли);
		Иначе
			ВнешнийДокумент	=  ВК.Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(СтрокаРеализация.НомерДокТорговли,СтрокаРеализация.ДатаДокТорговли);	
		КонецЕсли;
		Валюта = Справочники.Валюты.НайтиПоКоду(ВнешнийДокумент.ВалютаДокумента.Код);
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Период.ДатаНачала);
		
		ПересчитатьЦеныВруб = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Валюта) Тогда
			Валюта = мВалютаРегламентированногоУчета;
		КонецЕсли;	
		
		Если Валюта <> мВалютаРегламентированногоУчета Тогда
			ПересчитатьЦеныВруб =Истина;
		КонецЕсли;
		
		ТаблицаВнешДокумента = ВнешнийДокумент.Товары.Выгрузить();
		
		Если ПересчитатьЦеныВруб Тогда
			
			
			Для Каждого СтрокаТаблицаВнешДокумента Из ТаблицаВнешДокумента Цикл
				
				СтрокаТаблицаВнешДокумента.СуммаНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицаВнешДокумента.СуммаНДС, 
				Валюта, мВалютаРегламентированногоУчета,
				СтруктураКурса.Курс, 1,
				СтруктураКурса.Кратность, 1);
				
				СтрокаТаблицаВнешДокумента.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицаВнешДокумента.Сумма, 
				Валюта, мВалютаРегламентированногоУчета,
				СтруктураКурса.Курс, 1,
				СтруктураКурса.Кратность, 1);
				
				Если  СтрокаТаблицаВнешДокумента.Количество <> 0 Тогда
					СтрокаТаблицаВнешДокумента.Цена = СтрокаТаблицаВнешДокумента.Сумма/СтрокаТаблицаВнешДокумента.Количество;
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;	
		
		ЗагрузитьВТаблицуЗначений(  ТаблицаВнешДокумента, ПромТаблица);			
		
	КонецЦикла;
	
	Для каждого Строка Из Реализация Цикл
		Если ЗначениеЗаполнено(Строка.ДокументРеализицииБух) Тогда
			Строка.ФлагЗагрузки = Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого Строка Из Реализация Цикл
		Если Строка.ФлагЗагрузки Тогда
			Элементы.РеализацияКоманднаяПанельРеализацияСоздатьРеализацию.Доступность = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Если Не ФлагДелаемПриходНаСебяПоОтрицательнымОстаткам Тогда
		ПроверитьОстатки = Ложь;
		Возврат;
	КонецЕсли;
	
//	ПромТаблица.ВыбратьСтроку();
	ПромТаблица.Свернуть("Номенклатура,СчетУчета","Количество,Сумма,СуммаНДС");
	
	ПромТаблица.Колонки.Добавить("Остатки");
	ПромТаблица.Колонки.Добавить("РазницаОстаток");
	
	Для Каждого СтрокаПромТаблица Из ПромТаблица Цикл
		
		Номенклатура = СтрокаПромТаблица.Номенклатура;
		
		Запрос = новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Организация,
		|	ХозрасчетныйОстатки.СуммаОстаток,
		|	ХозрасчетныйОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период,Счет = &Счет ,,Субконто1 = &Субконто1 И Организация = &Организация  ) КАК ХозрасчетныйОстатки ";
		
		Запрос.УстановитьПараметр("Период",НачалоДня(Период.ДатаНачала)+1);
		Запрос.УстановитьПараметр("Счет",СтрокаПромТаблица.СчетУчета);
		Запрос.УстановитьПараметр("Субконто1",Номенклатура);
		Запрос.УстановитьПараметр("Организация",Организация);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать() ;
		
		Если РезультатЗапроса.Количество() <= 0 Тогда
			СтрокаПромТаблица.Остатки = 0 ;
		Иначе
			СтрокаПромТаблица.Остатки = РезультатЗапроса.КоличествоОстаток;
		КонецЕсли;
		СтрокаПромТаблица.РазницаОстаток = 0;
		Попытка
  			СтрокаПромТаблица.РазницаОстаток = Число(СтрокаПромТаблица.Остатки)-Число(СтрокаПромТаблица.Количество);
			Если Число(СтрокаПромТаблица.РазницаОстаток) >= 0 Тогда
				СтрокаПромТаблица.РазницаОстаток = 0;
			КонецЕсли;
		Исключение
			 СтрокаПромТаблица.РазницаОстаток = 0;
		КонецПопытки;
	КонецЦикла;
	//	ПромТаблица.ВыбратьСтроку();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("РазницаОстаток",	0);
	
	СтрокиКУдалению = ПромТаблица.НайтиСтроки(СтруктураОтбора);
	
	Для каждого СтрокаСтрокиКУдалению из СтрокиКУдалению Цикл
		ПромТаблица.Удалить( СтрокаСтрокиКУдалению);
	КонецЦикла;
	Если  ПромТаблица.Количество() > 0 Тогда
		Для Каждого СтрокаПромТаблица Из ПромТаблица Цикл
			Попытка
				СтрокаПромТаблица.Количество = -Число(СтрокаПромТаблица.РазницаОстаток);
			Исключение
				//Сообщить("СтрокаПромТаблица.РазницаОстаток="+СтрокаПромТаблица.РазницаОстаток);
			КонецПопытки;
		КонецЦикла;
		Если РежимРаботы = "1" Тогда
			СоздатьПриходПоОстаткам(ПромТаблица);
		КОнецЕсли;
	КонецЕсли;	
		
	ПроверитьОстатки = Ложь;
КонецПроцедуры

//---------------

&НаСервере
Функция УстановитьДоговорКонтрагента(ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено,СтрокаНаименования,ВалютаВзаиморасчетов) 
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	Запрос.УстановитьПараметр("СтрокаНаименования", СтрокаНаименования);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.Наименование = &СтрокаНаименования
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НовыйДоговор = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат НовыйДоговор;
	
КонецФункции // УстановитьДоговорКонтрагента(ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено,СтрокаНаименования)

&НаСервере
Функция КоличествоПодчиненныхДокументовПоТипу(Документ, Тип = Неопределено) Экспорт
	//
	СписокСвязанныхДокументов = ПолучитьРодительскиеДокументы(Документ.Ссылка);
	СписокСвязанныхДокументов = ПолучитьПодчиненныеДокументы(Документ.Ссылка, Неопределено);
	//
	Количество = 0;
	//
	Если Не ЗначениеЗаполнено(Тип) Тогда 
		Возврат 0;
	КонецЕсли;
	//
	Для Каждого ТекСвязанныйДокумент из СписокСвязанныхДокументов Цикл
		Если ТекСвязанныйДокумент <> Неопределено Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Количество;
КонецФункции

//&НаСервере
//Процедура ОбработатьСписокПодчиненныхДокументовПоТипу(Документ, Тип = Неопределено)
//	//
//	СписокСвязанныхДокументов = ПолучитьРодительскиеДокументы(Документ.Ссылка);
//	СписокСвязанныхДокументов = ПолучитьПодчиненныеДокументы(Документ.Ссылка, СписокСвязанныхДокументов);
//	//
//	Если Не ЗначениеЗаполнено(Тип) Тогда 
//		Возврат;
//	КонецЕсли;
//	//
//	Для Каждого ТекСвязанныйДокумент из СписокСвязанныхДокументов Цикл
//		СсылкаДокумент = ТекСвязанныйДокумент.Значение;
//		ПоискДокумент = СсылкаДокумент.ПолучитьОбъект();
//		Если ТипЗнч(СсылкаДокумент) = ТИП(Тип) И Не ПоискДокумент.Проведен И Не ПоискДокумент.ПометкаУдаления Тогда		
//			ПоискДокумент.Записать(РежимЗаписиДокумента.Проведение);
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры

&НаСервере
Функция ПолучитьРодительскиеДокументы(ДокументСсылка, СписокСвязанныхДокументов = Неопределено, мУжеВСписке = Неопределено) Экспорт 
    
    Если СписокСвязанныхДокументов = Неопределено Тогда 
        СписокСвязанныхДокументов = Новый СписокЗначений;
    КонецЕсли;
    Если мУжеВСписке = Неопределено Тогда 
        мУжеВСписке = Новый Соответствие;
    КонецЕсли;
    
    МетаданныеДокумента = ДокументСсылка.Метаданные();
    СписокРеквизитов = Новый СписокЗначений;
    
    Для Каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
        ТипыРеквизита = Реквизит.Тип.Типы();
        Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
            МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
                    
            Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
                 И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
                Попытка
                    ЗначениеРеквизита = ДокументСсылка[Реквизит.Имя];
                Исключение
                    Прервать;
                КонецПопытки;
                ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая() И ТипЗнч(ЗначениеРеквизита) = ТекущийТип 
                     И мУжеВСписке[ЗначениеРеквизита] = Неопределено И СписокРеквизитов.НайтиПоЗначению(ДокументСсылка[Реквизит.Имя]) = Неопределено Тогда
                    Попытка
                        СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
                    Исключение
                         ОтладкаТекстОшибки = ОписаниеОшибки();
                    КонецПопытки;    
                КонецЕсли;
            КонецЕсли;            
            
        КонецЦикла;
    КонецЦикла;
    
    Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
        СтрРеквизитов = "";
        
        Попытка
            СодержимоеТЧ = ДокументСсылка[ТЧ.Имя].Выгрузить();
        Исключение
            Прервать;
        КонецПопытки;
        
        Для Каждого Реквизит ИЗ ТЧ.Реквизиты Цикл
            ТипыРеквизита = Реквизит.Тип.Типы();
            Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
                МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);                
                Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
                    И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
                    СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
                    Прервать;
                КонецЕсли;                        
            КонецЦикла;
        КонецЦикла;
        
        СодержимоеТЧ.Свернуть(СтрРеквизитов);
        Для Каждого КолонкаТЧ ИЗ СодержимоеТЧ.Колонки Цикл
            Для Каждого СтрокаТЧ ИЗ СодержимоеТЧ Цикл
                Попытка
                    ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
                Исключение
                    Продолжить;
                КонецПопытки;
                МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
                Если МетаданныеЗначения = Неопределено Тогда
                    // базовый тип
                    Продолжить;
                КонецЕсли;
                
                ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая()
                     И Метаданные.Документы.Содержит(МетаданныеЗначения)
                     И мУжеВСписке[ЗначениеРеквизита] = Неопределено Тогда
                    Если СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
                        Попытка
                            СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
                        Исключение
                            ОтладкаТекстОшибки = ОписаниеОшибки();
                        КонецПопытки;
                    КонецЕсли;
                КонецЕсли;
            КонецЦикла;
        КонецЦикла;        
    КонецЦикла;
    мУжеВСписке.Вставить(ДокументСсылка, Истина);
    
    Для Каждого СтрСЗ Из СписокРеквизитов Цикл 
        СписокСвязанныхДокументов = ПолучитьРодительскиеДокументы(СтрСЗ.Значение, СписокСвязанныхДокументов, мУжеВСписке);
    КонецЦикла;
        
    Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка
                           | ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
                           
    Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
    
    Выборка  = Запрос.Выполнить().Выбрать();
    ЕСли Выборка.Следующий() Тогда        
        СписокСвязанныхДокументов.Добавить(Выборка.Ссылка);
    Иначе
        СписокСвязанныхДокументов.Добавить(ДокументСсылка);
    КонецЕсли;
    
    Возврат СписокСвязанныхДокументов;
        
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныеДокументы(ДокументСсылка, СписокСвязанныхДокументов = Неопределено, мУжеВСписке = Неопределено) Экспорт
    
    Если СписокСвязанныхДокументов = Неопределено Тогда 
        СписокСвязанныхДокументов = Новый СписокЗначений;
    КонецЕсли;
    Если мУжеВСписке = Неопределено Тогда 
        мУжеВСписке = Новый Соответствие;
    КонецЕсли;

    Таблица = ПолучитьВыборкуПоКритериюОтбора("СвязанныеДокументы", ДокументСсылка);    
    КэшПоТипамДокументов = Новый Соответствие;
    
    Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
        МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
        Если Не ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
            Продолжить;
        КонецЕсли;            
        ИмяДокумента = МетаданныеДокумента.Имя;
        СинонимДокумента = МетаданныеДокумента.Синоним;
        
        СтруктураТипа = КэшПоТипамДокументов[ИмяДокумента];
        Если СтруктураТипа = Неопределено Тогда
            СтруктураТипа = Новый Структура("Синоним, МассивСсылок", СинонимДокумента, Новый Массив);
            КэшПоТипамДокументов.Вставить(ИмяДокумента, СтруктураТипа);
        КонецЕсли;
        СтруктураТипа.МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);        
    КонецЦикла;
    
    ЕСли КэшПоТипамДокументов.Количество() = 0 Тогда 
        Возврат СписокСвязанныхДокументов;
    КонецЕсли;
    
    ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
    ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы ";
    Запрос = Новый Запрос;
    Для Каждого КлючИЗначение ИЗ КэшПоТипамДокументов Цикл
        Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "
                    |ВЫБРАТЬ ", "
                    |ОБЪЕДИНИТЬ ВСЕ
                    |ВЫБРАТЬ") + "
                    |Ссылка
                    |ИЗ Документ." + КлючИЗначение.Ключ + "
                    |ГДЕ Ссылка В (&" + КлючИЗначение.Ключ + ")";
                    
        Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение.МассивСсылок);        
    КонецЦикла;
    
    Запрос.Текст = ТекстЗапросаНачало + Запрос.Текст + ТекстЗапросаКонец;
    
    Выборка = Запрос.Выполнить().Выбрать();    
    Пока Выборка.Следующий() Цикл
        Если мУжеВСписке[Выборка.Ссылка] = Неопределено И НЕ Выборка.Ссылка.ПометкаУдаления Тогда
            СписокСвязанныхДокументов.Добавить(Выборка.Ссылка);
            мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
            СписокСвязанныхДокументов = ПолучитьПодчиненныеДокументы(Выборка.Ссылка, СписокСвязанныхДокументов, мУжеВСписке);
        КонецЕсли;
    КонецЦикла;
    
    Возврат СписокСвязанныхДокументов;
    
КонецФункции

&НаСервере
Функция ПолучитьВыборкуПоКритериюОтбора(ИмяКритерияОтбора, ЗначениеКритерия) Экспорт
        
    Запрос = Новый Запрос;
    ТекстЗапроса = "";
    
    Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора[ИмяКритерияОтбора].Состав Цикл
        
        Если Не ЭлементСостава.Тип.СодержитТип(ТипЗнч(ЗначениеКритерия)) Тогда
            Продолжить;
        КонецЕсли;
        
        ПутьКДанным = ЭлементСостава.ПолноеИмя();
        СтруктураПутьКДанным = РазобратьПутьКОбъектуМетаданных(ПутьКДанным, ЭлементСостава.Родитель());
        
		//ЕСли НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
		//    Продолжить;
		//КонецЕсли;
        
        ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
        ПсевдонимТаблицы = СтруктураПутьКДанным.ТипОбъекта + "_" + СтруктураПутьКДанным.ВидОбъекта + "_" + СтруктураПутьКДанным.ИмяТаблЧасти;
        
        ТекущаяСтрокаГДЕ = "ГДЕ " + ПсевдонимТаблицы + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
            
        ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
        ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
        ТекстЗапроса = ТекстЗапроса + (?(ТекстЗапроса = "", "ВЫБРАТЬ", "ОБЪЕДИНИТЬ ВСЕ
        |ВЫБРАТЬ") + "
        |" + ПсевдонимТаблицы + ".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + ПсевдонимТаблицы + "
        |" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
        |");
        
    КонецЦикла;
    
    Если ТекстЗапроса = "" Тогда
        Возврат Новый ТаблицаЗначений;
    КонецЕсли;
    
    Запрос.Текст = ТекстЗапроса;
    Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерия);
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции

&НаСервере
Функция РазобратьПутьКОбъектуМетаданных(ПутьКДанным, МетаданныеОбъекта = Неопределено) Экспорт
    
    Структура = Новый Структура;
    
    СоответствиеИмен = Новый Массив();
    СоответствиеИмен.Добавить("ТипОбъекта");
    СоответствиеИмен.Добавить("ВидОбъекта");
    СоответствиеИмен.Добавить("ПутьКДанным");
    СоответствиеИмен.Добавить("ИмяТаблЧасти");
    СоответствиеИмен.Добавить("ИмяРеквизита");
    
    Для индекс = 1 по 3 Цикл
        
        Точка = Найти(ПутьКДанным, ".");
        ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
        Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
        ПутьКДанным = Сред(ПутьКДанным, Точка+1);
        
    КонецЦикла;
    
    ПутьКДанным = СтрЗаменить(ПутьКДанным, "Реквизит.", "");
    
    Если Структура.ПутьКДанным = "ТабличнаяЧасть" Тогда
        
        Для индекс = 4 по 5  Цикл 
            
            Точка = Найти(ПутьКДанным, ".");
            Если Точка = 0 Тогда
                ТекущееЗначение = ПутьКДанным;
            Иначе
                ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
            КонецЕсли;
            
            Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
            ПутьКДанным = Сред(ПутьКДанным,  Точка+1);
            
        КонецЦикла;
        
    Иначе
        
        Структура.Вставить(СоответствиеИмен[3], "");
        Структура.Вставить(СоответствиеИмен[4], ПутьКДанным);
        
    КонецЕсли;
    
    Если МетаданныеОбъекта <> Неопределено Тогда
        Структура.Вставить("Метаданные", МетаданныеОбъекта);
    Иначе
        Если Структура.ТипОбъекта = "Документ" Тогда
            Структура.Вставить("Метаданные", Метаданные.Документы[Структура.ВидОбъекта]);
        Иначе
            Структура.Вставить("Метаданные", Метаданные.Справочники[Структура.ВидОбъекта]);
        КонецЕсли;
    КонецЕсли;
    
    Возврат Структура;
    
КонецФункции

&НаСервере
Функция ПолучитьСписокТиповПоВидуСчетаФактурыСФВыданная(ВидСчетаФактурыСписка, ЭтоИсправление = Ложь, НаАвансДляКомитентаНаЗакупку = Ложь) Экспорт
	
	СписокТипов = Новый Массив;
	
	Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
		ИЛИ ЭтоИсправление И ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент 
		ИЛИ НаАвансДляКомитентаНаЗакупку Тогда 
		
		СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		СписокТипов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	Иначе
		
		СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			
			СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
			СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
			
		ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда	
			
			СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
			
		ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
			// Список типов не требует корректировки
		ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 
			
			ВычитаемыеТипы = Новый Массив;
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ОказаниеУслуг"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
			
			СписокТипов = Новый ОписаниеТипов(Метаданные.Документы.СчетФактураВыданный.ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, , ВычитаемыеТипы);
			СписокТипов = СписокТипов.Типы();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

&НаСервере
Процедура СоздатьСчетФактуру(Основание)
	
	///Сообщить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	//Сообщить(ТипЗнч(Основание));
	Сообщить(Основание.Метаданные().Имя);
	ОбъектОснование = Основание;
	Если ЭтоСсылка(ОбъектОснование) Тогда
		ОбъектОснование = Основание.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	Если ТипЗнч(ОбъектОснование.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		СоздатьСчетФактуруВыданная(ОбъектОснование);
		//Сообщить("Реализация");
	Иначе
		СоздатьСчетФактуруПолученная(ОбъектОснование);
		//Сообщить("Полученная");
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСчетФактуруВыданная(Основание)
	
	НовыйДокумент = Документы.СчетФактураВыданный.СоздатьДокумент();
	
	//Если (Основание = Неопределено) 
	//	ИЛИ НЕ Основание.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
	//	
	//	//Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
	//	//	ЗаполнитьНаОснованииСчетаФактурыСФВыданная(Основание);	
	//	//ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
	//	//	ЗаполнитьНаОснованииСчетаФактурыСФВыданная(Основание);	
	//	//КонецЕсли;
	//	
	//	НовыйДокумент = УстановитьПризнакВыставленСФВыданная(НовыйДокумент, Основание);
	//	//УстановитьПризнакВыставлен();
	//	Возврат;
	//	
	//КонецЕсли;
	
	НовыйДокумент.Дата = Основание.Дата;
	НовыйДокумент.Организация = Основание.Организация;
	Если ФлагСФРавнаНакладной Тогда
		НовыйДокумент.Номер = Основание.Номер;	
	КонецЕсли;
	
	
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(НовыйДокумент.Организация);
	Если ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		Если ЭтоЮрЛицо Тогда 
			Руководитель = Основание.Руководитель;
			ГлавныйБухгалтер = Основание.ГлавныйБухгалтер;
		ИначеЕсли УчетНДС.ВедетсяУчетНДСПоФЗ81(НовыйДокумент.Дата) Тогда
			Руководитель = Основание.Руководитель;
		КонецЕсли;
	КонецЕсли;

	СтрокаОснованиеВТабличнойЧасти = НовыйДокумент.ДокументыОснования.Добавить();
	СтрокаОснованиеВТабличнойЧасти.ДокументОснование = Основание.Ссылка;
	
	ДокументОснование = Основание;

	СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактурыСФВыданная(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	СписокТиповНалоговыйАгент = ПолучитьСписокТиповПоВидуСчетаФактурыСФВыданная(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
	СписокТиповКорректировочный = ПолучитьСписокТиповПоВидуСчетаФактурыСФВыданная(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	
	Если НовыйДокумент.ДополнительныеСвойства.Свойство("ПерезаполнитьНаОснованииИсправления") Тогда
		
		// Перезаполнить существующий документ при изменении вида операции документа корректировки
		//ЗаполнитьНаОснованииИсправления(Основание, СтрокаОснованиеВТабличнойЧасти);
		НовыйДокумент = ЗаполнитьНаОснованииИсправленияСФВыданная(Основание.Ссылка, НовыйДокумент.СтрокаОснования, НовыйДокумент);
		
	ИначеЕсли НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		И ТипЗнч(Основание.Ссылка) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		// Ввод счета-фактуры на реализацию, требуется проверить существование ранее введенного счета-фактуры
		СуществующийСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание, "СчетФактураВыданный");
		Если Не СуществующийСчетФактура = Неопределено Тогда
			
			Если Не СуществующийСчетФактура = Основание Тогда
				// Найден ранее введенный счет-фактура, требуется закрыть новый документ и открыть найденный
				// Если найденный счет-фактура - это сам документ-основание, то счет-фактуру также создавать не надо, открывать ничего не надо
				СуществующийСчетФактура.ПолучитьФорму(, , Строка(Основание)).Открыть();
			КонецЕсли;
			НовыйДокумент.ДополнительныеСвойства.Вставить("НайденСуществующийСчетФактура", Истина);
			
		Иначе
			НовыйДокумент = ОпределениеПараметровСчетаФактурыНаАванс(НовыйДокумент.ДокументЗаполнен, НовыйДокумент);
			//ОпределениеПараметровСчетаФактуры();
		КонецЕсли;
		
		НовыйДокумент = УстановитьКодВидаОперацииСФВыданная(,НовыйДокумент);
		//УстановитьКодВидаОперации();
	ИначеЕсли СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено
		И ТипЗнч(Основание.Ссылка) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
		
		НовыйДокумент.ДатаНомерДокументовОплаты.Очистить();
		Если ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
			НомерПлатежноРасчетногоДокумента = Основание.НомерВходящегоДокумента;
			ДатаПлатежноРасчетногоДокумента =  Основание.ДатаВходящегоДокумента;
			
		ИначеЕсли ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
			ДатаПлатежноРасчетногоДокумента =  Основание.Дата;
		Иначе
			НомерПлатежноРасчетногоДокумента = "";
			ДатаПлатежноРасчетногоДокумента =  Неопределено;
		КонецЕсли;
		
		СтрокаПРД = НовыйДокумент.ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
		
		ДокументЗаполнен = Ложь;
		НовыйДокумент = ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен, НовыйДокумент);
		
		Если НЕ ДокументЗаполнен Тогда
			ТекстСообщения = "Не обнаружены данные для регистрации счета-фактуры на предварительную оплату или на суммовую разницу.";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
		НовыйДокумент = УстановитьКодВидаОперацииСФВыданная(,НовыйДокумент);
		//УстановитьКодВидаОперации();
	ИначеЕсли СписокТиповНалоговыйАгент.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
		
		НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
		
		НовыйДокумент.ДатаНомерДокументовОплаты.Очистить();
		Если ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			НомерПлатежноРасчетногоДокумента = Основание.НомерВходящегоДокумента;
			ДатаПлатежноРасчетногоДокумента =  Основание.ДатаВходящегоДокумента;
		Иначе
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
			ДатаПлатежноРасчетногоДокумента = Основание.Дата;
		КонецЕсли;
		
		СтрокаПРД = НовыйДокумент.ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
		
		ДокументЗаполнен = Ложь;
		НовыйДокумент = ОпределениеПараметровСчетаФактурыНалоговыйАгентСФВыданная(ДокументЗаполнен, НовыйДокумент);
		
		Если Не ДокументЗаполнен Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для регистрации счета-фактуры налогового агента.");
		КонецЕсли;
		
		СчетФактураНеВыставляется = Истина;
		
		НовыйДокумент = УстановитьКодВидаОперацииСФВыданная(,НовыйДокумент);
		//УстановитьКодВидаОперации();
	ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
		
		// Ввод корректировочного/исправленного счета-фактуры на реализацию, требуется проверить существование ранее введенного счета-фактуры
		ОтборСчетовФактур = Новый Структура();
		ВидыСчетовФактур = Новый Массив;
		ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
		ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		ОтборСчетовФактур.Вставить("ВидСчетаФактуры", ВидыСчетовФактур);
		ОтборСчетовФактур.Вставить("ПометкаУдаления", Ложь);
		СуществующийСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание, "СчетФактураВыданный", ОтборСчетовФактур);
		Если СуществующийСчетФактура <> Неопределено Тогда
			СуществующийСчетФактура.ПолучитьФорму(, , Строка(Основание)).Открыть();
			НовыйДокумент.ДополнительныеСвойства.Вставить("НайденСуществующийСчетФактура", Истина);
		Иначе
			НовыйДокумент = ЗаполнитьНаОснованииИсправленияСФВыданная(Основание.Ссылка, НовыйДокумент.СтрокаОснования, НовыйДокумент);
			//ЗаполнитьНаОснованииИсправления(Основание, СтрокаОснованиеВТабличнойЧасти);
		КонецЕсли;

	КонецЕсли;
	
	Если ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда 
		СчетФактураНеВыставляется = Истина;		
	КонецЕсли;
	
	Если НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
		И ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
		И НовыйДокумент.Дата >= '20150101' Тогда
		НовыйДокумент.СводныйКомиссионный = Истина;
	КонецЕсли;
	
	НовыйДокумент = УстановитьВидСчетфактурыСФВыданная(НовыйДокумент, Основание);
	
	НовыйДокумент = УстановитьПризнакВыставленСФВыданная(НовыйДокумент, Основание);
	
	
	//УстановитьПризнакВыставлен();
	НовыйДокумент = УстановитьКодВидаОперацииСФВыданная(,НовыйДокумент);
	//НовыйДокумент = УстановитьКодВидаОперацииСФВыданная(,НовыйДокумент);
	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаСервере
Функция УстановитьВидСчетфактурыСФВыданная(Документ, Основание)
	  
	Если ТипЗнч(Основание.Ссылка) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
	КонецЕсли;	
	Если ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	КонецЕсли;
	  
	Возврат Документ;	
КонецФункции

&НаСервере
Функция УстановитьКонтрагентДоговорВалюта(Документ, Основание)
	  
	Документ.Контрагент = Основание.Контрагент;
	Документ.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
	Документ.ВалютаДокумента = Основание.ВалютаДокумента;
	  
	Возврат Документ;	
КонецФункции

&НаСервере
Процедура СоздатьСчетФактуруПолученная(Основание)
	
	НовыйДокумент = Документы.СчетФактураПолученный.СоздатьДокумент();
	
	Если (Основание = Неопределено) 
		ИЛИ НЕ НовыйДокумент.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		
		Если ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			ЗаполнитьНаОснованииСчетаФактурыСФПолученная(Основание.Ссылка,НовыйДокумент);	
		КонецЕсли;	
			      	
		Возврат;
	КонецЕсли;
	
	Если Основание.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Основание.ДоговорКонтрагента) Тогда
		
			РеквизитыДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
				Основание.ДоговорКонтрагента, "УчетАгентскогоНДС,НалоговыйАгентПоОплате,ВидДоговора");
			
			ЭтоНалоговыйАгент = РеквизитыДоговора.УчетАгентскогоНДС И РеквизитыДоговора.НалоговыйАгентПоОплате;
			ЭтоКомиссия = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
			
			Если ЭтоНалоговыйАгент ИЛИ ЭтоКомиссия
				И ТипЗнч(Основание.Ссылка) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
				И НЕ (ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления")
					И ТипЗнч(Основание.Ссылка.ДокументПоступления.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	СтрокаОснования = НовыйДокумент.ДокументыОснования.Добавить();
	СтрокаОснования.ДокументОснование = Основание.Ссылка;
	НовыйДокумент.ДокументОснование = Основание.Ссылка;
    Дата = Основание.Дата;
	//
	НовыйДокумент.Дата = Основание.Дата;
	НовыйДокумент.Организация = Основание.Организация;
	Если ФлагСФРавнаНакладной Тогда
		НовыйДокумент.Номер = Основание.Номер;	
	КонецЕсли;
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НовыйДокумент, Основание);
	
	СчетФактураКомитента = Ложь;
	
	СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактурыСФПолученная(Перечисления.ВидСчетаФактурыПолученного.НаАванс);
	Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено
		И ТипЗнч(Основание.Ссылка) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		И ТипЗнч(Основание.Ссылка) <> Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		НовыйДокумент.ВалютаДокумента = мВалютаРегламентированногоУчета;
		НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
		//ЗаполнитьСчетФактуруНаАванс();
		//УстановитьКодВидаОперации();
		
	Иначе
		
		Если ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			// Для документа "Корректировка поступления" возможен ввод двух видов счетов-фактур
			// на аванс (на суммы переплат) или на поступившие ценности (исправленный или корректировочный)
			
			СписокВидовНаПриобретенныеЦенности = Новый СписокЗначений;
			СписокВидовНаПриобретенныеЦенности.Добавить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
			СписокВидовНаПриобретенныеЦенности.Добавить(Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
				
			// Сначала ищем счет-фактуру на приобретенные ценности
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
			СтруктураОтбора.Вставить("ВидСчетаФактуры", СписокВидовНаПриобретенныеЦенности);
			СуществующийСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание, "СчетФактураПолученный",
				СтруктураОтбора, НовыйДокумент.Ссылка);
				
			Если СуществующийСчетФактура = Неопределено Тогда
				// Нет СФ на приобретенные ценности - создаем его
				НовыйДокумент = ЗаполнитьНаОснованииИсправленияСФВыданная(Основание.Ссылка, СтрокаОснования, НовыйДокумент);
				//ЗаполнитьНаОснованииИсправления(Основание.Ссылка, СтрокаОснования, НовыйДокумент);
			Иначе
				// Если нашли СФ на приобретенные ценности - дополнительно ищем СФ на аванс
				СтруктураОтбора.Вставить("ВидСчетаФактуры", Перечисления.ВидСчетаФактурыПолученного.НаАванс);
				СуществующийСчетФактураНаАванс = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание, "СчетФактураПолученный",
					СтруктураОтбора, НовыйДокумент.Ссылка);
				
				// Не нашли СФ на аванс - будем пытаться его создать
				Если СуществующийСчетФактураНаАванс = Неопределено Тогда
					НовыйДокумент.ВалютаДокумента = мВалютаРегламентированногоУчета;
					НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
					//ЗаполнитьСчетФактуруНаАванс();
					//
				Иначе
					// Есть и СФ на приобретенные ценности, и СФ на аванс. Открываем СФ на приобретенные ценности
					СуществующийСчетФактура.ПолучитьФорму(, , Строка(Основание)).Открыть();
					НовыйДокумент.ДополнительныеСвойства.Вставить("НайденСуществующийСчетФактура", Истина);
				КонецЕсли;
				
			КонецЕсли;		
			
		ИначеЕсли ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда	
			
			//УстановитьКодВидаОперации();
			НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
			СчетФактураКомитента = Истина;
			СтрокаАвансов = НовыйДокумент.Авансы.Добавить();
						
		Иначе
			
			НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
			
			// Ввод счета-фактуры на поступление, требуется проверить существование ранее введенного счета-фактуры
			СуществующийСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание, "СчетФактураПолученный",
				Новый Структура("ПометкаУдаления", Ложь), НовыйДокумент.Ссылка);
			
			Если НЕ СуществующийСчетФактура = Неопределено
				И НЕ СуществующийСчетФактура = НовыйДокумент.Ссылка Тогда
				
				Если Не СуществующийСчетФактура = Основание Тогда
					// Найден ранее введенный счет-фактура, требуется закрыть новый документ и открыть найденный
					// Если найденный счет-фактура - это сам документ-основание, то счет-фактуру также создавать не надо, открывать ничего не надо
					СуществующийСчетФактура.ПолучитьФорму(, , Строка(Основание)).Открыть();
				Иначе
					Сообщить("Данные счета-фактуры введены в документе поступления, ввод отдельного документа ""Счет-фактура полученный"" не требуется");
				КонецЕсли;
				
				НовыйДокумент.ДополнительныеСвойства.Вставить("НайденСуществующийСчетФактура", Истина);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(НовыйДокумент.Организация, НовыйДокумент.Дата);
	СложныйУчетНДС = УчетНДС.ПолучитьУПСложныйУчетНДС(НовыйДокумент.Организация, НовыйДокумент.Дата);
	
	Если УпрощенныйУчетНДС ИЛИ Дата >= '20120101' Тогда 
		Если НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление
		    И НЕ НовыйДокумент.Исправление 
			И НЕ НовыйДокумент.СчетФактураКомитента
			И НЕ ЕстьСписаниеНДСПоОснованию(НовыйДокумент,Основание)
			И (СчетФактураПолученВКварталеПоступленияЦенностей(Основание,НовыйДокумент)
			ИЛИ Дата < '20150101') Тогда
			
			НДСПредъявленКВычету = НЕ СложныйУчетНДС;
		ИначеЕсли НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
			НДСПредъявленКВычету = НЕ УпрощенныйУчетНДС;
		Иначе
			НДСПредъявленКВычету = Ложь;
		КонецЕсли;
	Иначе
		НДСПредъявленКВычету = Ложь;	
	КонецЕсли;
	
	НовыйДокумент = ЗаполнитьСчетФактуруНаАвансСФПолученная(,НовыйДокумент);
	НовыйДокумент = УстановитьКодВидаОперацииСФПолученная(,НовыйДОкумент,Основание);
	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаСервере
Функция ВерсияКодовВидовОпераций(Период) 
	
	Если Период >= '20180101' Тогда
		// С 1 января 2018 года используются дополнительные коды, рекомендованные в письмах ФНС:
		// N СД-4-3/10@ от 09.01.2018;
		// N СД-4-3/532@ от 16.01.2018;
		// N СД-4-3/480@ от 16.01.2018.
		Возврат 4;
	ИначеЕсли Период >= '20160701' Тогда
		// С 1 июля 2016 года действует перечень, 
		// утвержденный приказом ФНС от 14.03.2016 N ММВ-7-3/136@.
		Возврат 3;
	ИначеЕсли Период >= '20150101' Тогда
		// С 1 января 2015 года действует перечень,
		// утвержденный письмом ФНС от 22.01.2015 N ГД-4-3/794@.
		Возврат 2;
	Иначе
		// До 1 января 2015 года действует перечень,
		// утвержденный приказом ФНС 14.02.2012 N ММВ-7-3/83@.
		Возврат 1;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УстановитьКодВидаОперацииСФВыданная(КодВидаОперацииОснования = Неопределено, Документ = Неопределено) Экспорт
	
	ВерсияПостановления = УчетНДСКлиентСервер.Версия(Документ.Дата);
	Если ВерсияПостановления <> 2 Тогда
		Возврат Документ;
	КонецЕсли;
	
	ВерсияКодовВидовОпераций = ВерсияКодовВидовОпераций(Документ.Дата);
	
	Если Документ.Исправление ИЛИ Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		Если ЗначениеЗаполнено(КодВидаОперацииОснования) Тогда
			Документ.КодВидаОперации = УчетНДС.АктуальныйКодВидаОперации(КодВидаОперацииОснования, ВерсияКодовВидовОпераций);
			Возврат Документ;
		КонецЕсли;
	КонецЕсли;
	
	Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		Если ВерсияКодовВидовОпераций = 1 Тогда
			Документ.КодВидаОперацииНаУменьшение = "";
		ИначеЕсли ВерсияКодовВидовОпераций = 2 Тогда
			Документ.КодВидаОперацииНаУменьшение = "18";
		Иначе
			Документ.КодВидаОперацииНаУменьшение = ?(Документ.СводныйКорректировочный, "01", "18");
		КонецЕсли;
		
	ИначеЕсли Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		
		Документ.КодВидаОперации = "02";
		
	ИначеЕсли Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		
		Документ.КодВидаОперации = ?(ВерсияКодовВидовОпераций < 3, "05", "02");
		
	ИначеЕсли Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		
		Если Документ.Авансы.Количество() > 1 Тогда
			Документ.КодВидаОперации = "28";
		Иначе
			Документ.КодВидаОперации = ?(ВерсияКодовВидовОпераций < 3, "05", "02");
		КонецЕсли;
		
	ИначеЕсли Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		
		Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента) И Документ.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
			Документ.КодВидаОперации = "06";
		КонецЕсли;
		
	ИначеЕсли Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		
		Документ.КодВидаОперации = ?(ВерсияКодовВидовОпераций < 3, "09", "01");
		
	ИначеЕсли Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 
		
		МассивДокументовРеализации = Новый Массив;
		
		Для Каждого СтрокаТабличнойЧасти ИЗ Документ.ДокументыОснования Цикл
			
			ТипОснования = ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование.Ссылка);
			
			Если ТипОснования = Тип("ДокументСсылка.ОтражениеНачисленияНДС")
				И ВерсияКодовВидовОпераций > 1 Тогда
				// Код операции указывается в документе
				КодВидаОперацииИзДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаТабличнойЧасти.ДокументОснование, "КодВидаОперации");
				Документ.КодВидаОперации = УчетНДС.АктуальныйКодВидаОперации(КодВидаОперацииИзДокумента, ВерсияКодовВидовОпераций);
				Прервать;
			ИначеЕсли ВерсияКодовВидовОпераций = 3 Тогда
				// По умолчанию код "01", но необходимо проверить случай "смешанной" реализации (код 15),
				// которая может быть оформлена документом "Реализация товаров услуг".
				Документ.КодВидаОперации = "01";
				Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					МассивДокументовРеализации.Добавить(СтрокаТабличнойЧасти.ДокументОснование);
				ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
					ДокументОтгрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						СтрокаТабличнойЧасти.ДокументОснование, "ДокументОтгрузки");
					Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						МассивДокументовРеализации.Добавить(ДокументОтгрузки);
					КонецЕсли;
				Иначе
					МассивДокументовРеализации.Очистить();
					Прервать;
				КонецЕсли;
			// Коды видов операций до 1 июля 2016 года
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				Документ.КодВидаОперации = "03";
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				Документ.КодВидаОперации = "04";
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				Если ЗначениеЗаполнено(Документ.Продавец) И Документ.Продавец <> Документ.Контрагент Тогда
					Документ.КодВидаОперации = "04";
				КонецЕсли;
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				МассивДокументовРеализации.Добавить(СтрокаТабличнойЧасти.ДокументОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
				ДокументОтгрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаТабличнойЧасти.ДокументОснование, "ДокументОтгрузки");
				Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					МассивДокументовРеализации.Добавить(ДокументОтгрузки);
				КонецЕсли;
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
				МассивДокументовРеализации.Очистить();
				Документ.КодВидаОперации = "08";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивДокументовРеализации.Количество() > 0 Тогда
			// Определим какие ценности были реализованы и проверим случай "смешанной" реализации (код 15).
			СчетаУчетаКомиссионногоТовара = Новый Массив;
			СчетаУчетаКомиссионногоТовара.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
			СчетаУчетаКомиссионногоТовара.Добавить(ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументыОснования", МассивДокументовРеализации);
			Запрос.УстановитьПараметр("СчетаУчетаКомиссионногоТовара", СчетаУчетаКомиссионногоТовара);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслугТовары.СчетУчета В (&СчетаУчетаКомиссионногоТовара)
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ЕстьКомиссионныеТоварыИУслуги,
			|	ВЫБОР
			|		КОГДА НЕ РеализацияТоваровУслугТовары.СчетУчета В (&СчетаУчетаКомиссионногоТовара)
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ЕстьСобственныеТоварыИУслуги
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка В(&ДокументыОснования)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугУслуги.Ссылка,
			|	0,
			|	1
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
			|ГДЕ
			|	РеализацияТоваровУслугУслуги.Ссылка В(&ДокументыОснования)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка,
			|	1,
			|	0
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
			|ГДЕ
			|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка В(&ДокументыОснования)
			|ИТОГИ
			|	СУММА(ЕстьКомиссионныеТоварыИУслуги),
			|	СУММА(ЕстьСобственныеТоварыИУслуги)
			|ПО
			|	ОБЩИЕ";
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Если Выборка.Следующий() Тогда
					Если Выборка.ЕстьСобственныеТоварыИУслуги > 0
						И Выборка.ЕстьКомиссионныеТоварыИУслуги > 0 Тогда
						Документ.КодВидаОперации = ?(ВерсияКодовВидовОпераций < 3, "01;04", "15");
					ИначеЕсли ВерсияКодовВидовОпераций < 3 И Выборка.ЕстьКомиссионныеТоварыИУслуги > 0 Тогда
						Документ.КодВидаОперации = "04";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Документ.КодВидаОперации = "" Тогда
		Документ.КодВидаОперации = "01";
	КонецЕсли;
	
	Возврат Документ;
КонецФункции

&НаСервере
Процедура КодВидаОперацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(КодВидаОперацииПоступления);
	ВыбранныйКод = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент, ТекущийКод);
	Если ВыбранныйКод <> Неопределено Тогда
		КодВидаОперацииПоступления = ВыбранныйКод.Значение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РеализацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Валюта) Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
	КонецЕсли;
	Если  ДанныеСтроки.СуммаДокБух <> ДанныеСтроки.СуммаДокТорговли И ЗначениеЗаполнено(ДанныеСтроки.ДокументРеализицииБух)Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	КонецЕсли;
	
КонецПроцедуры	// РеализацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

&НаСервере
Процедура РеализацияПриИзмененииФлажка(Элемент, Колонка)
	Если  НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Валюта)  Тогда
		 Элемент.ТекущиеДанные.ФлагЗагрузки =Ложь;
	КонецЕсли;	
КонецПроцедуры	// РеализацияПриИзмененииФлажка(Элемент, Колонка)

&НаСервере
Процедура СоздатьПриходПоОстаткам(ПромТаблица)
	
	ДокументПоступление 								= Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();	
	// Заполнить реквизиты значениями по умолчанию.
	ЗаполнениеДокументов.Заполнить(ДокументПоступление,,);
	
	ДокументПоступление.ВидОперации						= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	ДокументПоступление.Организация =Организация;
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ДокументПоступление, ПараметрыСеанса.ТекущийПользователь);
	
	ДокументПоступление.Контрагент              = ПоставщикДляПрихода;
	
	ДоговорКонтрагента= ОсновнойДоговорКонтрагента(ДокументПоступление,Организация,Контрагент,,);
	ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	
	
	Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком  
		ИЛИ ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СсылкаДоговорКонтрагента = 	УстановитьДоговорКонтрагента(ДокументПоступление["Контрагент"],
		ДокументПоступление["Организация"], 
		СписокВидовДоговоров,"Основной договор",ВалютаВзаиморасчетов);
		
		Если СсылкаДоговорКонтрагента.Пустая() Тогда
			ДоговорКонтрагента= Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			ДоговорКонтрагента.Наименование ="Основной договор";
			ДоговорКонтрагента.Владелец = ДокументПоступление.Контрагент;
			ДоговорКонтрагента.ВалютаВзаиморасчетов=мВалютаРегламентированногоУчета;
			ДоговорКонтрагента.Организация = ДокументПоступление.Организация;
			ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			ДоговорКонтрагента.Записать();
			ДоговорКонтрагента =ДоговорКонтрагента.Ссылка;
		Иначе
			ДоговорКонтрагента=СсылкаДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументПоступление.ДоговорКонтрагента      = ДоговорКонтрагента;
	ДокументПоступление.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	ДокументПоступление.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	
	ДокументПоступление.ВалютаДокумента         = мВалютаРегламентированногоУчета;
	ДокументПоступление.КурсВзаиморасчетов =1;
	ДокументПоступление.КратностьВзаиморасчетов =1;
	//ДокументПоступление.УчитыватьНДС            = Истина;
	ДокументПоступление.СуммаВключаетНДС        = Истина;
	ДокументПоступление.Склад  = Склад;
	
	ДокументПоступление.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ДокументПоступление.Комментарий 					= "Создан по отрицательным остаткам";
	ДокументПоступление.Дата							=	НачалоДня(Период.ДатаНачала);
	
	
	ДокументПоступление.Товары.Загрузить(ПромТаблица);
	
	Для Каждого СтрокаДокументПоступление Из ДокументПоступление.Товары Цикл
		СтрокаДокументПоступление.СтавкаНДС  = Перечисления.СтавкиНДС.НДС20;
		СтрокаДокументПоступление.Цена  =   СтрокаДокументПоступление.Сумма/СтрокаДокументПоступление.Количество;
		СтрокаДокументПоступление.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;		
	КонецЦикла;	
	
	ДокументПоступление.Записать(РежимЗаписиДокумента.Запись);
	ДокументПоступление.Записать(РежимЗаписиДокумента.Проведение);
	Сообщить("Создан документ прихода: "+ДокументПоступление);
	
КонецПроцедуры //СоздатьПриходПоОстаткам()

//--
Функция ОсновнойДоговорКонтрагента(Объект, Организация, Контрагент, ВалютаВзаиморасчетов, ВидДоговора = Неопределено)
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		// Не заполнены ключевые свойства
		// В этом случае ничего не делаем.
		Возврат Неопределено;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	// Найдем договор по умолчанию для данного вида договора
	ДополнительныеПараметры = Новый Структура();
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ДополнительныеПараметры.Вставить("ВалютаВзаиморасчетов", Новый Структура("ЗначениеОтбора", ВалютаВзаиморасчетов));
	КонецЕсли;
	
	Если ВидДоговора = Неопределено Тогда
		ВидДоговора = РаботаСДоговорамиКонтрагентовБП.ВидДоговораПоОбъекту(Объект);
	КонецЕсли;
	СписокВидовДоговоров = Новый СписокЗначений();
	СписокВидовДоговоров.Добавить(ВидДоговора);
	
	ДоговорКонтрагента = Неопределено;
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, ГоловнаяОрганизация, СписокВидовДоговоров, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат ДоговорКонтрагента;
	Иначе
		// Проверим, что основной договор данного вида существует, но не подходит по каким-то другим свойствам
		// (в этом случае он не будет определен в РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента).
		// Если основной договор существует, то ничего не делаем.
		// Если не существует, то создаем новый договор и назначаем его основным.
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", ГоловнаяОрганизация);
		Запрос.Параметры.Вставить("Контрагент",  Контрагент);
		Запрос.Параметры.Вставить("ВидДоговора", ВидДоговора);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеДоговорыКонтрагента.Договор
		|ИЗ
		|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|ГДЕ
		|	ОсновныеДоговорыКонтрагента.Организация = &Организация
		|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора = &ВидДоговора";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Договор в ОсновныеДоговораКонтрагента установлен, новый договор не создаем, что-бы не испортить пользовательские данные
			Возврат Выборка.Договор;
		КонецЕсли;
		
		// Основной договор не установлен - создадим новый договор и установим его основным.
		Возврат СоздатьОсновнойДоговорКонтрагента(ГоловнаяОрганизация, Контрагент, ВалютаВзаиморасчетов, ВидДоговора);
		
	КонецЕсли;
КонецФункции

Функция СоздатьОсновнойДоговорКонтрагента(Организация, Контрагент, ВалютаВзаиморасчетов, ВидДоговора)
	
	НовыйОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ВидДоговора", ВидДоговора);
	ЗначенияЗаполнения.Вставить("Организация", Организация);
	ЗначенияЗаполнения.Вставить("Владелец",    Контрагент);
	ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	Наименование = ПечатьДоговоровКлиентСервер.НаименованиеПоУмолчаниюБезРеквизитов();
	ЗначенияЗаполнения.Вставить("Наименование", Наименование);
	
	НовыйОбъект.Заполнить(ЗначенияЗаполнения);
	НовыйОбъект.УстановитьНовыйКод();
	НовыйОбъект.ОбменДанными.Загрузка = Истина;
	НовыйОбъект.Записать();
	
	УстановитьОсновнойДоговорКонтрагента(НовыйОбъект.Ссылка, Организация, Контрагент, ВидДоговора);
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

// Устанавливает договор в качестве основного в регистре сведений "Основные договора контрагента"
Процедура УстановитьОсновнойДоговорКонтрагента(Договор, Организация, Контрагент, ВидДоговора)
	
	Набор = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьНаборЗаписей();
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Отбор.Контрагент.Установить(Контрагент);
	Набор.Отбор.ВидДоговора.Установить(ВидДоговора);
	
	НоваяЗапись = Набор.Добавить();
	НоваяЗапись.Организация = Организация;
	НоваяЗапись.Контрагент  = Контрагент;
	НоваяЗапись.ВидДоговора = ВидДоговора;
	НоваяЗапись.Договор     = Договор;
	
	Набор.ОбменДанными.Загрузка = Истина;
	Набор.Записать();
	
КонецПроцедуры
//--

&НаСервере
Функция ПолучитьСписокТиповПоВидуСчетаФактурыСФПолученная(ВидСчетаФактурыСписка, ЭтоИсправление = Ложь, НаАвансДляКомитентаНаЗакупку = Ложь) Экспорт
	
	СписокТипов = Новый Массив;
	
	Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда 
		
		Если ЭтоИсправление Тогда
			СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
		Иначе
			СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ПоступлениеИзПереработки"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ОтражениеНДСКВычету"));
		КонецЕсли;
  
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыПолученного.НаАванс 
		ИЛИ ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда 
		
		СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		СписокТипов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		СписокТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда 
		
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
				
	КонецЕсли;
	
	Возврат СписокТипов;

КонецФункции

&НаСервере
Процедура ЗаполнитьНаОснованииСчетаФактурыСФПолученная(Основание,Документ)
	
	Если Основание.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс 
		И Основание.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(Документ, Основание, , "Номер, Дата, СформированПриВводеНачальныхОстатковНДС, Проведен, ПометкаУдаления");
	
	Для Каждого СтрокаАванса Из Основание.Авансы Цикл 
		НоваяСтрока = Документ.Авансы.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАванса);
	КонецЦикла;	
	
	Исправление      = Истина;
	НомерИсправления = НомерИсправления + 1;
	
	Если Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		НДСПредъявленКВычету = Истина;
	КонецЕсли;

	Если Основание.Исправление Тогда
		ИсправляемыйСчетФактура = Основание.ИсправляемыйСчетФактура;
	Иначе
		ИсправляемыйСчетФактура = Основание;
	КонецЕсли;	
			
КонецПроцедуры

&НаСервере
Функция УстановитьПризнакВыставленСФВыданная(Документ = Неопределено, ДокументОснование = Неопределено) Экспорт
	//СчетФактураНеВыставляется = Ложь;
	
	Если Документ.СчетФактураНеВыставляется Тогда
		Документ.Выставлен = Ложь;
		Документ.ДатаВыставления = '00010101';
		Возврат Документ.Выставлен;
	Иначе
		Если ДокументОснование <> Неопределено Тогда
			СтруктураЗапроса = ДокументОснование;
		Иначе
			СтруктураЗапроса = Новый Структура("Организация,Контрагент", Документ.Организация, Документ.Контрагент);
		КонецЕсли;	
		
		//Если УчетНДС.НаличиеСоглашенияОбменаЭД(СтруктураЗапроса) Тогда
		//	Документ.КодСпособаВыставления = 2;
		//	Документ.Выставлен = Ложь;
		//	Документ.ДатаВыставления = '00010101';
		//Иначе
			Документ.КодСпособаВыставления = 1;
			Документ.Выставлен = Истина;
			Документ.ДатаВыставления = Документ.Дата;
		 //КонецЕсли;	
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

&НаСервере
Функция ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен, Документ) Экспорт
	
	Если Документ.ДокументыОснования.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(Документ.ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		Возврат Документ;
	КонецЕсли; 
	
	Если НЕ ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", Документ.ДокументыОснования[0].ДокументОснование.Метаданные()) Тогда
		Возврат Документ;
	Иначе
		Контрагент = Документ.ДокументыОснования[0].ДокументОснование.Контрагент;
	КонецЕсли; 
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
	
	СтрокаСообщения = "";
	ОшибкаПриЗаполнении = Ложь;
	ДокументЗаполнен = Ложь;
	
	ДокументАванса = Документ.ДокументыОснования[0].ДокументОснование;
	ДокументАвансаМетаданные = ДокументАванса.Метаданные();
		
	Если ТипЗнч(ДокументАванса) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
		|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.Сумма) КАК Сумма,
		|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС) КАК СуммаНДС,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.ДенежныеСредства КАК ОтчетКомиссионераОПродажахДенежныеСредства
		|ГДЕ
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка = &ДокументОснование
		|	И ОтчетКомиссионераОПродажахДенежныеСредства.ВидОтчетаПоПлатежам = &ВидОтчетаПоПлатежамАванс
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов";
		
		Запрос.УстановитьПараметр("ДокументОснование", Документ.ДокументыОснования[0].ДокументОснование);
		Запрос.УстановитьПараметр("ВидОтчетаПоПлатежамАванс", Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.Дата >= '20060101' 
					И Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					// НДС с авансов под экспортные поставки не начисляется
					Продолжить;
				ИначеЕсли Выборка.Дата >= '20080101' 
					И Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
					Продолжить;
				КонецЕсли;
				
				ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
				СтавкаНДС			= ?(ЗначениеЗаполнено(СоответствиеСтавок[Выборка.СтавкаНДС]), СоответствиеСтавок[Выборка.СтавкаНДС], Перечисления.СтавкиНДС.НДС20_120);;
				
				Сумма 			= Выборка.Сумма;
				СуммаНДС 		= Выборка.СуммаНДС;
				СуммаДокумента 	= Сумма;
				
				Если Выборка.РасчетыВУсловныхЕдиницах 
					Или Не ЗначениеЗаполнено(Выборка.ВалютаВзаиморасчетов) 
					Или Выборка.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета 
					Тогда
					ВалютаДокумента = мВалютаРегламентированногоУчета;
					ВалютнаяСумма = Выборка.Сумма;
				Иначе
					ВалютнаяСумма  = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
											мВалютаРегламентированногоУчета,
											Выборка.ВалютаВзаиморасчетов, 1, 
											Выборка.КурсВзаиморасчетов, 1,
											Выборка.КратностьВзаиморасчетов);

					ВалютаДокумента = Выборка.ВалютаВзаиморасчетов;
				КонецЕсли; 
				
				ОшибкаПриЗаполнении = Ложь;
				СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
				Если ОшибкаПриЗаполнении Тогда
					СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Иначе
					ДокументЗаполнен = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	
	ИначеЕсли ДокументАвансаМетаданные.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		Если ДокументАвансаМетаданные.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СчетУчетаРасчетовПоАвансам") = Неопределено Тогда
			Возврат Документ;
		КонецЕсли;
	    	
		Запрос = Новый Запрос;
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
				
		МассивСчетовАвансов = Новый Массив();
		МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
		МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
		МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
        Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", МассивСчетовАвансов);
		
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", ДокументАванса.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"));
		Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
		Запрос.УстановитьПараметр("СчетУчетаРасходов", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументАванса);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.СуммаОборот КАК СуммаАванса,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСуммаАванса,
		|	ХозрасчетныйОбороты.КорСубконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.КорСубконто2 КАК ДоговорКонтрагента,
		|	ХозрасчетныйОбороты.КорСубконто2.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ХозрасчетныйОбороты.КорСчет КАК СчетУчетаРасчетовПоАвансам,
		|	ХозрасчетныйОбороты.ВалютаКор КАК ВалютаРасчетов,
		|	ИСТИНА КАК ЭтоНаАванс
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, , , КорСубконто1 = &Контрагент, КорСчет В (&СчетУчетаРасчетовПоАвансам), &МассивСубконто) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.СуммаОборот,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
		|	ХозрасчетныйОбороты.Субконто1,
		|	ХозрасчетныйОбороты.Субконто2,
		|	ХозрасчетныйОбороты.Субконто2.РасчетыВУсловныхЕдиницах,
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.Валюта,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Счет В (&СчетУчетаРасчетовСКонтрагентом),
		|			&МассивСубконто,
		|			Субконто1 = &Контрагент
		|				И КорСубконто1 = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ),
		|			КорСчет В (&СчетУчетаРасходов),
		|			) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор = &ДокументОснование";
	
		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда
			
			ЕстьСчетНаОплату = ДокументАвансаМетаданные.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СчетНаОплату") <> Неопределено;
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() И Не ДокументЗаполнен Цикл
				
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютаРасчетов) или Выборка.РасчетыВУсловныхЕдиницах Тогда
					//Незаполненное значение приравнивается к валюте регл. учета
					ВалютаДокумента = мВалютаРегламентированногоУчета;	
				Иначе
					ВалютаДокумента = Выборка.ВалютаРасчетов;     
				КонецЕсли; 
				
				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю"));
				
				Для Каждого СтрПлатежа Из ДокументАванса.РасшифровкаПлатежа Цикл
					
					Если СтрПлатежа.ДоговорКонтрагента = Выборка.ДоговорКонтрагента 
						И ((Выборка.ЭтоНаАванс И СтрПлатежа.СчетУчетаРасчетовПоАвансам = Выборка.СчетУчетаРасчетовПоАвансам) 
							ИЛИ (Не Выборка.ЭтоНаАванс И СтрПлатежа.СчетУчетаРасчетовСКонтрагентом = Выборка.СчетУчетаРасчетовПоАвансам)) Тогда
							
						Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
							ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
						Иначе
							ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
						КонецЕсли;
						
						СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
						СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
						СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
						СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.СуммаПлатежа;
						
						Если ЕстьСчетНаОплату Тогда
							СтрокаПоСтавке.СчетНаОплату = СтрПлатежа.СчетНаОплату;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ТаблицаПоСтавкам.Свернуть("СтавкаНДС, СчетНаОплату","Сумма, ВалютнаяСумма");
				
				//Распределение суммы рег учета
				МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
				Если не МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
				Иначе
					МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
				КонецЕсли; 
				
				//Распределение валютной суммы
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = мВалютаРегламентированногоУчета Тогда
					Если не МассивСумм = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				Иначе
					МассивСуммВал = ОбщегоНазначения.РаспределитьПропорционально(Выборка.ВалютнаяСуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("ВалютнаяСумма"));
					Если не МассивСуммВал = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСуммВал,"ВалютнаяСумма");
					Иначе
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				КонецЕсли; 
				
					Если Выборка.ЭтоНаАванс Тогда
						Если Документ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
							И Документ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента 
							И Документ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
							
							Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
							
						КонецЕсли;	
					Иначе 
						Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу;
						СчетФактураНеВыставляется = Истина;
					КонецЕсли;
					
					ВалютнаяСумма = 0;
					Если Выборка.ЭтоНаАванс Тогда
						Сумма = 0;
						Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
							
							Если ДокументАванса.Дата >= '20060101' 
								И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
								// НДС с авансов под экспортные поставки не начисляется
								Продолжить;
							ИначеЕсли ДокументАванса.Дата >= '20080101' 
								И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
								// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
								Продолжить;
							КонецЕсли;
							
							Контрагент = Выборка.Контрагент;
							ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
							Сумма				= Сумма + СтрокаПоСтавке.Сумма;
							ВалютнаяСумма		= ВалютнаяСумма + СтрокаПоСтавке.ВалютнаяСумма;
							
							СтавкаНДС = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС20_120);
							ТаблицаАвансов = Документ.ПолучитьТаблицуАвансовПоСчетуНаОплату(СтрокаПоСтавке.Сумма, 
																	УчетНДС.РассчитатьСуммуНДС(СтрокаПоСтавке.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)), 
																	СтавкаНДС, 
																	СтрокаПоСтавке.СчетНаОплату);
							ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Документ.Авансы);							
							ОшибкаПриЗаполнении = Ложь;
							
						КонецЦикла; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
						
						Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
							СуммаДокумента = Сумма;
						Иначе
							СуммаДокумента = ВалютнаяСумма;
						КонецЕсли;
						
						СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
						Если ОшибкаПриЗаполнении Тогда
							СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
						Иначе
							ДокументЗаполнен = Истина;
							Прервать;
						КонецЕсли;
					Иначе	
						Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
							
							Контрагент 			= Выборка.Контрагент;
							ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
							Сумма				= СтрокаПоСтавке.Сумма;
							ВалютнаяСумма		= СтрокаПоСтавке.ВалютнаяСумма;
							СтавкаНДС			= ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС20_120);;
							СуммаНДС			= УчетНДС.РассчитатьСуммуНДС(Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
							СуммаДокумента		= Сумма;							
							ОшибкаПриЗаполнении = Ложь;
							СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
							Если ОшибкаПриЗаполнении Тогда
								СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
							Иначе
								ДокументЗаполнен = Истина;
								Прервать;
							КонецЕсли;
							
						КонецЦикла; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
					КонецЕсли;
			
			КонецЦикла; // Пока Выборка.Следующий() Цикл
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументАванса) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда	
		
		Запрос = Новый Запрос;
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		
		МассивСчетовАвансов = Новый Массив();
		МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
		МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
		МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
		
		Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", МассивСчетовАвансов);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументАванса);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.СуммаОборот КАК СуммаАванса,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСуммаАванса,
		|	ХозрасчетныйОбороты.КорСубконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.КорСубконто2 КАК ДоговорКонтрагента,
		|	ХозрасчетныйОбороты.КорСубконто2.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ХозрасчетныйОбороты.КорСчет КАК СчетУчетаРасчетовПоАвансам,
		|	ХозрасчетныйОбороты.ВалютаКор КАК ВалютаРасчетов,
		|	ИСТИНА КАК ЭтоНаАванс
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, , , КорСубконто1 = &Контрагент, КорСчет В (&СчетУчетаРасчетовПоАвансам), &МассивСубконто) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор = &ДокументОснование";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Документ.Авансы.Очистить();
			
			Пока Выборка.Следующий() И НЕ ДокументЗаполнен Цикл
				
				ВалютаДокумента = мВалютаРегламентированногоУчета;	
			
				СтрокаПоСтавке = Документ.Авансы.Добавить();
				СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120;
				СтрокаПоСтавке.Сумма = Выборка.СуммаАванса;
				СтрокаПоСтавке.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Выборка.СуммаАванса, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаПоСтавке.СтавкаНДС));
				
			КонецЦикла;
			
			Если Документ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
				И Документ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
				И Документ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
				
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
				
			КонецЕсли;	
			
			Контрагент = Выборка.Контрагент;
			ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			
			СуммаНДСДокумента = Документ.Авансы.Итог("СуммаНДС");
			ОшибкаПриЗаполнении = Ложь;
			
		КонецЕсли; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
		
		СуммаДокумента = Сумма;
		
		СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
		
		Если ОшибкаПриЗаполнении Тогда
			СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
		Иначе
			ДокументЗаполнен = Истина;
	    КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		СуммаНДСДокумента = СуммаНДС;
	Иначе	
		СуммаНДСДокумента = Документ.Авансы.Итог("СуммаНДС");
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
		И Документ.Дата >= '20150101' Тогда  
		СуммаДокументаКомиссия 		= Документ.Авансы.Итог("Сумма");
		СуммаНДСДокументаКомиссия 	= Документ.Авансы.Итог("СуммаНДС");
	Иначе
		СуммаДокументаКомиссия 		= 0;
		СуммаНДСДокументаКомиссия 	= 0;
	КонецЕсли;
	
	Если ОшибкаПриЗаполнении Тогда
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Сумма = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаДокумента = 0;
		СуммаНДСДокумента = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОпределениеПараметровСчетаФактурыСФВыданная(ЗаполнятьРеквизитыСчетаФактуры = Ложь, Документ) Экспорт
	
	Если Документ.ДокументыОснования.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(Документ.ДокументыОснования[0].ДокументОснование) Тогда
		// Основание не выбрано, параметры не определяем
		СуммаДокумента    = 0;
		СуммаНДСДокумента = 0;
		Возврат Документ;
	ИначеЕсли ТипЗнч(Документ.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И Документ.ДоговорКонтрагента <> Документ.ДокументыОснования[0].ДокументОснование.ДоговорКонтрагента Тогда 
		Документ.ДоговорКонтрагента = Документ.ДокументыОснования[0].ДокументОснование.ДоговорКонтрагента;
	КонецЕсли; 
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Документ.Дата);
	ЕстьРабочийЭСФ      = ОбменСКонтрагентамиСлужебный.ЕстьРабочийЭСФ(Документ.Ссылка);
	РеквизитыОбновлены  = Ложь;
	ИзмененныеПоля      = "";
	ПараметрыСФ         = Неопределено;
	УчетНДС.ПолучитьПараметрыСчетаФактуры(Документ, мВалютаРегламентированногоУчета, ПараметрыСФ);
	
	Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный И ПараметрыСФ.РеквизитыОснований.Количество() <> 0 Тогда
		
		Для Каждого Основание Из Документ.ДокументыОснования Цикл
			
			СтрокаСРеквизитами = ПараметрыСФ.РеквизитыОснований.Найти(Основание.ДокументОснование, "ДокументОснование");
			Если СтрокаСРеквизитами <> Неопределено Тогда
				Если Основание.СуммаУвеличение <> СтрокаСРеквизитами.СуммаУвеличение Тогда
					Основание.СуммаУвеличение = СтрокаСРеквизитами.СуммаУвеличение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаУменьшение <> СтрокаСРеквизитами.СуммаУменьшение Тогда
					Основание.СуммаУменьшение = СтрокаСРеквизитами.СуммаУменьшение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаНДСУвеличение <> СтрокаСРеквизитами.СуммаНДСУвеличение Тогда
					Основание.СуммаНДСУвеличение = СтрокаСРеквизитами.СуммаНДСУвеличение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаНДСУменьшение <> СтрокаСРеквизитами.СуммаНДСУменьшение Тогда
					Основание.СуммаНДСУменьшение = СтрокаСРеквизитами.СуммаНДСУменьшение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если ЗаполнятьРеквизитыСчетаФактуры Тогда
					Если Основание.НомерИсходногоДокумента <> СтрокаСРеквизитами.НомерИсходногоДокумента Тогда
						Основание.НомерИсходногоДокумента = СтрокаСРеквизитами.НомерИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.ДатаИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсходногоДокумента Тогда
						Основание.ДатаИсходногоДокумента = СтрокаСРеквизитами.ДатаИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.УчитыватьИсправлениеИсходногоДокумента <> СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента Тогда
						Основание.УчитыватьИсправлениеИсходногоДокумента = СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.НомерИсправленияИсходногоДокумента <> СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента Тогда
						Основание.НомерИсправленияИсходногоДокумента = СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.ДатаИсправленияИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента Тогда
						Основание.ДатаИсправленияИсходногоДокумента = СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаОснований = ПараметрыСФ.РеквизитыОснований;
		ТаблицаОснований.Свернуть("ДокументОснование");
		
		Если ТаблицаОснований.Количество() > 1 Тогда
			ПараметрСводныйКорректировочный = Истина;
		Иначе
			ПараметрСводныйКорректировочный = Ложь;
		КонецЕсли; 
		
	Иначе
		ПараметрСводныйКорректировочный = Ложь;
	КонецЕсли;
	
	Если Документ.СводныйКорректировочный <> ПараметрСводныйКорректировочный Тогда
		Документ.СводныйКорректировочный = ПараметрСводныйКорректировочный;
	КонецЕсли; 
	
	Если ПараметрыСФ.Организация <> Неопределено 
		И ПараметрыСФ.Организация <> Документ.Организация Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля = ИзмененныеПоля + ?(СтрДлина(ИзмененныеПоля)=0,"",", ")+"Организация";
		Иначе
			Номер              = "";
			Организация	       = ПараметрыСФ.Организация;
			РеквизитыОбновлены = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если ПараметрыСФ.Контрагент <> Неопределено 
		И ПараметрыСФ.Контрагент <> Документ.Контрагент Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля = ИзмененныеПоля + ?(СтрДлина(ИзмененныеПоля)=0,"",", ")+"Контрагент";
		Иначе
			Контрагент         = ПараметрыСФ.Контрагент;
			КППКонтрагента	   = "";
			РеквизитыОбновлены = Истина;
		КонецЕсли;
	КонецЕсли; 			
	
	Если ПараметрыСФ.Договор <> Неопределено 
		И ПараметрыСФ.Договор <> Документ.ДоговорКонтрагента Тогда
		ДоговорКонтрагента = ПараметрыСФ.Договор;
		РеквизитыОбновлены = Истина;
	КонецЕсли; 			
	
	Если ПараметрыСФ.Продавец <> Неопределено
		И ПараметрыСФ.Продавец <> Документ.Продавец Тогда
		Продавец = ПараметрыСФ.Продавец;
		РеквизитыОбновлены = Истина;
	КонецЕсли;
	
	Если СуммаДокумента <> ПараметрыСФ.СуммаДокумента Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля = ИзмененныеПоля + ?(СтрДлина(ИзмененныеПоля)=0,"",", ")+"Сумма документа";
		Иначе
			СуммаДокумента     = ПараметрыСФ.СуммаДокумента;
			РеквизитыОбновлены = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияПостановления = 2 Тогда
		Если СуммаНДСДокумента <> ПараметрыСФ.СуммаНДСДокумента Тогда
			Если ЕстьРабочийЭСФ Тогда
				ИзмененныеПоля = ИзмененныеПоля + ?(СтрДлина(ИзмененныеПоля)=0,"",", ")+"Сумма НДС";
			Иначе
				СуммаНДСДокумента  = ПараметрыСФ.СуммаНДСДокумента;
				РеквизитыОбновлены = Истина;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Если Документ.СуммаУвеличение <> ПараметрыСФ.СуммаУвеличение Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля = ИзмененныеПоля + ?(СтрДлина(ИзмененныеПоля)=0,"",", ")+"Сумма увеличения";
		Иначе
			Документ.СуммаУвеличение    = ПараметрыСФ.СуммаУвеличение;
			РеквизитыОбновлены = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Документ.СуммаУменьшение <> ПараметрыСФ.СуммаУменьшение Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля = ИзмененныеПоля + ?(СтрДлина(ИзмененныеПоля)=0,"",", ")+"Сумма уменьшения";
		Иначе
			Документ.СуммаУменьшение    = ПараметрыСФ.СуммаУменьшение;
			РеквизитыОбновлены = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Документ.СуммаНДСУвеличение <> ПараметрыСФ.СуммаНДСУвеличение Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля = ИзмененныеПоля + ?(СтрДлина(ИзмененныеПоля)=0,"",", ")+"Сумма НДС увеличения";
		Иначе
			Документ.СуммаНДСУвеличение = ПараметрыСФ.СуммаНДСУвеличение;
			РеквизитыОбновлены = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Документ.СуммаНДСУменьшение <> ПараметрыСФ.СуммаНДСУменьшение Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля = ИзмененныеПоля + ?(СтрДлина(ИзмененныеПоля)=0,"",", ")+"Сумма НДС уменьшения";
		Иначе
			Документ.СДокумент.уммаНДСУменьшение = ПараметрыСФ.СуммаНДСУменьшение;
			РеквизитыОбновлены = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Документ.ДатаВыставления >= '20150101' Тогда
		Если Документ.СуммаУвеличениеКомиссия <> ПараметрыСФ.СуммаУвеличениеКомиссия Тогда
			Документ.СуммаУвеличениеКомиссия = ПараметрыСФ.СуммаУвеличениеКомиссия;
		КонецЕсли;
		Если Документ.СуммаУменьшениеКомиссия <> ПараметрыСФ.СуммаУменьшениеКомиссия Тогда
			Документ.СуммаУменьшениеКомиссия = ПараметрыСФ.СуммаУменьшениеКомиссия;
		КонецЕсли;
		Если Документ.СуммаДокументаКомиссия <> ПараметрыСФ.СуммаДокументаКомиссия Тогда
			Документ.СуммаДокументаКомиссия = ПараметрыСФ.СуммаДокументаКомиссия;
		КонецЕсли;
		Если Документ.СуммаНДСДокументаКомиссия <> ПараметрыСФ.СуммаНДСДокументаКомиссия Тогда
			Документ.СуммаНДСДокументаКомиссия = ПараметрыСФ.СуммаНДСДокументаКомиссия;
		КонецЕсли;
		Если Документ.СуммаНДСУвеличениеКомиссия <> ПараметрыСФ.СуммаНДСУвеличениеКомиссия Тогда
			Документ.СуммаНДСУвеличениеКомиссия = ПараметрыСФ.СуммаНДСУвеличениеКомиссия;
		КонецЕсли; 
		Если Документ.СуммаНДСУменьшениеКомиссия <> ПараметрыСФ.СуммаНДСУменьшениеКомиссия Тогда
			Документ.СуммаНДСУменьшениеКомиссия = ПараметрыСФ.СуммаНДСУменьшениеКомиссия;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыСФ.ВалютаДокумента <> Неопределено 
		И Документ.ВалютаДокумента <> ПараметрыСФ.ВалютаДокумента Тогда
		Если ЕстьРабочийЭСФ Тогда
			ИзмененныеПоля = ИзмененныеПоля + ?(СтрДлина(ИзмененныеПоля)=0,"",", ")+"Валюта документа";
		Иначе
			ВалютаДокумента    = ПараметрыСФ.ВалютаДокумента;
			РеквизитыОбновлены = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПараметрыСФ.НомерСчетаФактурыПродавца = Неопределено 
		И НЕ Документ.НомерСчетаФактурыПродавца = ПараметрыСФ.НомерСчетаФактурыПродавца Тогда 
		НомерСчетаФактурыПродавца = ПараметрыСФ.НомерСчетаФактурыПродавца;
		РеквизитыОбновлены	= Истина;
	КонецЕсли;
	
	Если Документ.ЭтоНовый() И ВерсияПостановления = 2 Тогда
		Если ТипЗнч(Документ.ДокументыОснования[0].ДокументОснование) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда		
			Документ = УстановитьКодВидаОперацииСФВыданная(,Документ);
			//УстановитьКодВидаОперации();
		КонецЕсли;	
	КонецЕсли;
	
	Если ВерсияПостановления = 2 Тогда
		Если Документ.СчетФактураБезНДС <> ПараметрыСФ.СчетФактураБезНДС Тогда
			Документ.СчетФактураБезНДС  = ПараметрыСФ.СчетФактураБезНДС;
			РеквизитыОбновлены = Истина;
		КонецЕсли;
	КонецЕсли;
    		
	Если ТипЗнч(Документ.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		РезультатПоискаИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(
			Документ.ДокументыОснования[0].ДокументОснование.ИсправляемыйДокументРеализации, "СчетФактураВыданный");
		Если РезультатПоискаИсправляемыйСчетФактура = Неопределено Тогда
			РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЕсли;
	Иначе
		РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
	Если Документ.ИсправляемыйСчетФактура <> РезультатПоискаИсправляемыйСчетФактура Тогда
		ИсправляемыйСчетФактура = РезультатПоискаИсправляемыйСчетФактура;
		Если Документ.ВидСчетаФактуры =  Перечисления.ВидСчетаФактурыВыставленного.Корректировочный И Документ.Исправление Тогда
			НомерИсправляемогоКорректировочногоДокумента 	= ОбщегоНазначения.ПолучитьНомерНаПечать(ИсправляемыйСчетФактура);
			ДатаИсправляемогоКорректировочногоДокумента 	= ИсправляемыйСчетФактура.Дата;
			НомерИсходногоДокумента = "";
			ДатаИсходногоДокумента 	= '00010101';
		ИначеЕсли Документ.Исправление Тогда
			НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ИсправляемыйСчетФактура);
			ДатаИсходногоДокумента 	= ИсправляемыйСчетФактура.Дата;
			НомерИсправляемогоКорректировочногоДокумента 	= "";
			ДатаИсправляемогоКорректировочногоДокумента 	= '00010101';
		КонецЕсли;
		РеквизитыОбновлены = Истина;
	КонецЕсли;
	
	Если Документ.ДокументыОснования.Количество() = 1 И Документ.ДокументыОснования[0].ДокументОснование <> Основание Тогда
		ДокументОснование  = Документ.ДокументыОснования[0].ДокументОснование;
		РеквизитыОбновлены = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(КППКонтрагента) И Документ.ДокументыОснования.Количество() > 0 Тогда
		ОснованиеДокумент = Документ.ДокументыОснования[0].ДокументОснование;
		Если НЕ ТипЗнч(ОснованиеДокумент) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			Если ТипЗнч(ОснованиеДокумент) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
				ОснованиеДокумент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОснованиеДокумент, "ДокументОтгрузки");
			КонецЕсли;
			КППКонтрагентаНовый = УчетНДС.ПолучитьКПППодразделенияКонтрагента(ОснованиеДокумент, "Грузополучатель");
			Если НЕ ПустаяСтрока(КППКонтрагентаНовый) Тогда
				КППКонтрагента = КППКонтрагентаНовый;
				РеквизитыОбновлены	= Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРабочийЭСФ 
		И НЕ ПустаяСтрока(ИзмененныеПоля) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='У документа ""%1"" %2 не совпадают с документом-основанием.
			|Для данного счета-фактуры введен Электронный счет-фактура и документ не может быть обновлен.'"),
			Строка(Документ.Ссылка),
			ИзмененныеПоля),
			Ложь,
			"",
			СтатусСообщения.Внимание);
	ИначеЕсли РеквизитыОбновлены 
		И Документ.ДополнительныеСвойства.Свойство("СообщитьОбИзмененииРеквизитов")
		И Документ.ДополнительныеСвойства.СообщитьОбИзмененииРеквизитов Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Реквизиты документа ""%1"" перезаполнены автоматически'"),
			Документ.Ссылка));
	КонецЕсли;

КонецФункции // ОпределениеПараметровСчетаФактуры()

&НаСервере
Функция ОпределениеПараметровСчетаФактурыНалоговыйАгентСФВыданная(ДокументЗаполнен,Документ) Экспорт
	
	Если Документ.ДокументыОснования.Количество()=0 
		Или Не ЗначениеЗаполнено(Документ.ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		Возврат Документ;
	КонецЕсли; 
	
	Документ.ВалютаДокумента = мВалютаРегламентированногоУчета;	
	Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
	
	СтрокаСообщения = "";
	ОшибкаПриЗаполнении = Ложь;
	ДокументЗаполнен = Ложь;
	ТекущийДоговорКонтрагента = Документ.ДоговорКонтрагента;
		
	ДокументОплаты = Документ.окументыОснования[0].ДокументОснование;
	ДокументОплатыМетаданные = ДокументОплаты.Метаданные();

	Запрос = Новый Запрос;
	
	Если ДокументОплатыМетаданные.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", ДокументОплаты.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовПоАвансам"));
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", ДокументОплаты.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"));
		Запрос.УстановитьПараметр("ОтбиратьПоСчетам", Истина);
	Иначе
		Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", Неопределено);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", Неопределено);
		Запрос.УстановитьПараметр("ОтбиратьПоСчетам", Ложь);
	КонецЕсли;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОплаты);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОплаты,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК ДоговорКонтрагента
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	               |			,
	               |			,
	               |			Регистратор,
	               |			(НЕ &ОтбиратьПоСчетам)
	               |				ИЛИ (СчетДт В (&СчетУчетаРасчетовПоАвансам)
	               |					ИЛИ СчетДт В (&СчетУчетаРасчетовСКонтрагентом)),
	               |			&ВидыСубконто,
	               |			(НЕ СчетКт.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)),
	               |			,
	               |			СубконтоДт2.УчетАгентскогоНДС
	               |				И СубконтоДт2.НалоговыйАгентПоОплате) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.Регистратор = &ДокументОснование";
				   
	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Сумма = 0;
		СуммаНДСДокумента = 0;
		Пока Выборка.Следующий() И Не ДокументЗаполнен Цикл
			
			Документ.Контрагент = Выборка.Контрагент;
			Документ.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			Документ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120;
			Документ.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Выборка.СуммаОплаты, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(Документ.СтавкаНДС));
			Документ.Сумма = Документ.Сумма + Выборка.СуммаОплаты + Документ.СуммаНДС;
			
			ТаблицаОплат = Документ.ПолучитьТаблицуАвансовПоСчетуНаОплату(Выборка.СуммаОплаты + Документ.СуммаНДС, Документ.СуммаНДС, Документ.СтавкаНДС, Неопределено);
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОплат, Документ.Авансы);							
			ОшибкаПриЗаполнении = Ложь;
						
			Документ.СуммаДокумента = Документ.Сумма;
			Документ.СуммаНДСДокумента = СуммаНДСДокумента + Документ.СуммаНДС;
			Документ.ВалютнаяСумма = Документ.Сумма;
					
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
			Иначе
				ДокументЗаполнен = Истина;
				Прервать;
			КонецЕсли;
		
		КонецЦикла; // Пока Выборка.Следующий() Цикл
	КонецЕсли;
	
	Если ОшибкаПриЗаполнении Тогда
		Документ.ДоговорКонтрагента = ТекущийДоговорКонтрагента;
		Документ.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Документ.Сумма = 0;
		Документ.ВалютнаяСумма = 0;
		Документ.СуммаНДС = 0;
		Документ.СуммаДокумента = 0;
		Документ.СуммаНДСДокумента = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
	Возврат Документ;
		
КонецФункции

&НаСервере
Функция ПроверитьВозможностьЗаписиСФ(Отказ = Ложь, Документ) Экспорт
	
	СтрокаСообщения = "";
	Если Документ.Исправление Тогда
		
		СтрокаСообщения = "";
		СтруктураОтбора = Новый Структура("ПометкаУдаления, ВидСчетаФактуры, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура", 
			Ложь, Документ.ВидСчетаФактуры, Документ.ДоговорКонтрагента, Документ.НомерИсправления, Документ.ИсправляемыйСчетФактура);
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(Документ.ДокументыОснования[0].ДокументОснование, "СчетФактураПолученный", СтруктураОтбора, Документ.Ссылка);
		
		Если НЕ СуществующийСФ = Неопределено Тогда
			Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СуществующийСФ, "НомерИсправления, ИсправляемыйСчетФактура"); 
			Если Реквизиты.НомерИсправления = Документ.НомерИсправления
				И Реквизиты.ИсправляемыйСчетФактура = Документ.ИсправляемыйСчетФактура Тогда
							
				СтрокаСообщения = "На основании документа «" + Документ.ИсправляемыйСчетФактура + "» уже введен исправленный счет-фактура "
					+ Символы.ПС + "«" +Строка(СуществующийСФ) + "» с номером исправления «" + Документ.НомерИсправления + "»";
				
				Отказ = Истина;
				Возврат СтрокаСообщения;
				
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	СтрокаСообщения = "";
	СтруктураОтбора = Новый Структура("ПометкаУдаления, ВидСчетаФактуры, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура", 
		Ложь, Документ.ВидСчетаФактуры, Документ.ДоговорКонтрагента, Документ.НомерИсправления, Документ.ИсправляемыйСчетФактура);
    			
	Для Каждого ТекущееОснование Из Документ.ДокументыОснования Цикл
		Если ТипЗнч(ТекущееОснование.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") 
			ИЛИ ТипЗнч(ТекущееОснование.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда 
			// Может быть много СФ, проверка затруднительна. СФ отрабатываются при записи документа АО.
			Продолжить;
		КонецЕсли;

		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураПолученный", СтруктураОтбора, Документ.Ссылка);
		
		Если НЕ СуществующийСФ = неопределено Тогда
			Если ПустаяСтрока(СтрокаСообщения) Тогда
				СтрокаСообщения = "Для указанного документа-основания уже зарегистрирован счет-фактура:";
			КонецЕсли;
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + " - " + ?(Документ.ДокументыОснования.Количество() > 1, " строка № " + ТекущееОснование.НомерСтроки 
				+ ": для «" + ТекущееОснование.ДокументОснование + "» зарегистрирован счет-фактура ","");
			#Если Клиент Тогда
				СтрокаСообщения = СтрокаСообщения + " «" + РаботаСДиалогами.ПолучитьТекстСчетаФактуры(СуществующийСФ) + "»";
			#Иначе
				СтрокаСообщения = СтрокаСообщения + " «" + Строка(СуществующийСФ) + "»";
			#КонецЕсли
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Регистрация еще одного счета-фактуры не допускается."
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции // ПроверитьВозможностьЗаписиСФ()

&НаСервере
Процедура ЗаполнитьНаОснованииИсправленияСФПолученная(Основание, СтрокаОснования, Документ)
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		УточнениеСообщения = "корректировочных"; 
	Иначе
		УточнениеСообщения = "исправленных";
	КонецЕсли;
	
	ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументПоступления(Основание.ДокументПоступления);
	ДанныеИсходногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокумент, 
		Новый Структура("ВалютаДокумента, РасчетыВУсловныхЕдиницах", 
			"ВалютаДокумента", "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах"));
	
	Если ЗначениеЗаполнено(ДанныеИсходногоДокумента.ВалютаДокумента) 
		И ДанныеИсходногоДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета 
		И ДанныеИсходногоДокумента.РасчетыВУсловныхЕдиницах Тогда
		#Если Клиент Тогда
			Предупреждение("Для договоров в условных единицах, регистрация " + УточнениеСообщения + " счетов-фактур, оформленных в валюте, не поддерживается.
			|Документ-основание должен быть оформлен в рублях.");
		#КонецЕсли
		Возврат;			
	КонецЕсли;
	
	Если НЕ Основание.КорректироватьНДС Тогда
		ВызватьИсключение "Для корректировки поступления с отражением корректировки ""Только в печатной форме"" счет-фактура не выставляется";
	КонецЕсли;	
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
	КонецЕсли;
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		Документ.Исправление     = Истина;
		Документ.ДатаИсправления = Документ.Дата;
	КонецЕсли;
	
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Документ.Дата);
		
	// Определение кода вида операции для исправления
	// и номера исправления и данных корректировки
	ИскатьСчетФактуру        = Ложь;
	КодВидаОперацииОснования = "";
	НомерИсправленияСФ 		 = 0;
	
	ДокументПоступления = Основание.ДокументПоступления;
	
	ПереопределятьПараметрыИсходногоДокумента = Ложь;
	ТипИсправляемогоДокумента = ТипЗнч(УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь));
	КорректировкаКорректировочногоСчетаФактуры = (ТипИсправляемогоДокумента = Тип("ДокументСсылка.КорректировкаПоступления") 
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	
	Если Документ.Исправление
		ИЛИ (Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный 
		И ТипЗнч(ИсходныйДокумент.Ссылка) <> Тип("ДокументСсылка.КорректировкаПоступления")) Тогда
		
		// Определение кода вида операции для исправления
		МетаданныеДокумента = ИсходныйДокумент.ПолучитьОбъект().Метаданные();
		
		ИскатьСчетФактуру = Истина;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПредъявленСчетФактура", МетаданныеДокумента) Тогда
			Если ИсходныйДокумент.ПредъявленСчетФактура Тогда
				
				Если Документ.Исправление Тогда
					КодВидаОперацииОснования = ИсходныйДокумент.КодВидаОперации;
					НомерВходящегоДокумента  = ИсходныйДокумент.НомерВходящегоСчетаФактуры;
					ДатаВходящегоДокумента   = ИсходныйДокумент.ДатаВходящегоСчетаФактуры;
				Иначе
					СтрокаОснования.НомерИсходногоДокумента = ИсходныйДокумент.НомерВходящегоСчетаФактуры;
					СтрокаОснования.ДатаИсходногоДокумента  = ИсходныйДокумент.ДатаВходящегоСчетаФактуры;
				КонецЕсли;
				НомерИсправленияСФ = 0;
				ИскатьСчетФактуру  = Ложь;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ИсходныйДокумент.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			ДанныеИсходногоДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
				ИсходныйДокумент,
				"НомерВходящегоДокумента,ДатаВходящегоДокумента,Исправление,НомерИсправления,ДатаИсправления,
				|КодВидаОперации,КодВидаОперацииНаУменьшение");
			
			Если Документ.Исправление Тогда
				Документ.НомерВходящегоДокумента = ДанныеИсходногоДокумента.НомерВходящегоДокумента;
				Документ.ДатаВходящегоДокумента  = ДанныеИсходногоДокумента.ДатаВходящегоДокумента;
			Иначе
				СтрокаОснования.НомерИсходногоДокумента = ДанныеИсходногоДокумента.НомерВходящегоДокумента;
				СтрокаОснования.ДатаИсходногоДокумента  = ДанныеИсходногоДокумента.ДатаВходящегоДокумента;
				
				Если ДанныеИсходногоДокумента.Исправление Тогда
					СтрокаОснования.НомерИсправленияИсходногоДокумента     = ДанныеИсходногоДокумента.НомерИсправления;	
					СтрокаОснования.ДатаИсправленияИсходногоДокумента      = ДанныеИсходногоДокумента.ДатаИсправления;	
					СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = ДанныеИсходногоДокумента.Исправление;
				КонецЕсли;
			КонецЕсли;
			
			КодВидаОперацииОснования    = ДанныеИсходногоДокумента.КодВидаОперации;
			НомерИсправленияСФ          = 0;
			ИскатьСчетФактуру           = Ложь;
			
			Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный
			   И ВерсияКодовВидовОпераций > 1 Тогда
				
				КодВидаОперацииНаУменьшение = 
					?(ДанныеИсходногоДокумента.КодВидаОперацииНаУменьшение = "", 
					ДанныеИсходногоДокумента.КодВидаОперацииНаУменьшение, 
					"18");
				
			КонецЕсли; 
			
		КонецЕсли;
			
	ИначеЕсли Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		ИскатьСчетФактуру = Истина;
	КонецЕсли;
	
	Документ.ИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание.ИсправляемыйДокументПоступления, "СчетФактураПолученный");
		
	Если ИскатьСчетФактуру И (Документ.Исправление ИЛИ Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураПолученныйДокументыОснования.Ссылка.КодВидаОперации КАК КодВидаОперации,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
		|			ТОГДА ВЫБОР
		|					КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
		|							И СчетФактураПолученныйДокументыОснования.Ссылка.КодВидаОперацииНаУменьшение <> """"
		|						ТОГДА СчетФактураПолученныйДокументыОснования.Ссылка.КодВидаОперацииНаУменьшение
		|					ИНАЧЕ ""18""
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КодВидаОперацииНаУменьшение,
		|	СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.Исправление КАК Исправление,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КорректировочныйСчетФактура,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсправления КАК ДатаИсправления,
		|	СчетФактураПолученныйДокументыОснования.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
		|	СчетФактураПолученныйДокументыОснования.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
		|			ТОГДА СчетФактураПолученныйДокументыОснования.НомерИсходногоДокумента
		|		ИНАЧЕ СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента
		|	КОНЕЦ КАК НомерИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
		|			ТОГДА СчетФактураПолученныйДокументыОснования.ДатаИсходногоДокумента
		|		ИНАЧЕ СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента
		|	КОНЕЦ КАК ДатаИсходногоДокумента,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.Продавец КАК Продавец
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если РезультатЗапроса.Количество() > 0 Тогда
			
			ТекущаяСтрока = РезультатЗапроса[0];
			КодВидаОперацииОснования = ТекущаяСтрока.КодВидаОперации;
			Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный
			   И ВерсияКодовВидовОпераций > 1 Тогда
				КодВидаОперацииНаУменьшение = ТекущаяСтрока.КодВидаОперацииНаУменьшение;
			КонецЕсли;
			
			Если КорректировкаКорректировочногоСчетаФактуры Тогда
				
				СтрокаОснования.НомерИсходногоДокумента = ТекущаяСтрока.НомерВходящегоДокумента;
				СтрокаОснования.ДатаИсходногоДокумента  = ТекущаяСтрока.ДатаВходящегоДокумента;
				
				Если ТекущаяСтрока.Исправление Тогда
					СтрокаОснования.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправления;
					СтрокаОснования.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.ДатаИсправления;
					СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
				
				Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
				
			Иначе

				НомерИсправленияСФ  = ТекущаяСтрока.НомерИсправления;
				
				Если ТекущаяСтрока.КорректировочныйСчетФактура Тогда
					Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
				КонецЕсли;
				
				Если НЕ ТекущаяСтрока.КорректировочныйСчетФактура И Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
					Документ.НомерВходящегоДокумента = "";
					Документ.ДатаВходящегоДокумента  = "";
				Иначе			
					Документ.НомерВходящегоДокумента = ТекущаяСтрока.НомерВходящегоДокумента;
					Документ.ДатаВходящегоДокумента  = ТекущаяСтрока.ДатаВходящегоДокумента;
				КонецЕсли;
				
				Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
					СтрокаОснования.НомерИсходногоДокумента    = ТекущаяСтрока.НомерИсходногоДокумента;
					СтрокаОснования.ДатаИсходногоДокумента     = ТекущаяСтрока.ДатаИсходногоДокумента;
					Если ТекущаяСтрока.Исправление И НЕ ТекущаяСтрока.КорректировочныйСчетФактура Тогда
						СтрокаОснования.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправления;
						СтрокаОснования.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.ДатаИсправления;	
						ПереопределятьПараметрыИсходногоДокумента = Истина;
					ИначеЕсли ТекущаяСтрока.КорректировочныйСчетФактура Тогда
						СтрокаОснования.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправленияИсходногоДокумента;
						СтрокаОснования.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.ДатаИсправленияИсходногоДокумента;
					КонецЕсли;
				КонецЕсли;
			
				Если ЗначениеЗаполнено(СтрокаОснования.ДатаИсправленияИсходногоДокумента) 
					ИЛИ ЗначениеЗаполнено(СтрокаОснования.НомерИсправленияИсходногоДокумента) Тогда
					СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
				
				Документ.Продавец = ТекущаяСтрока.Продавец;
			
			КонецЕсли;
			
		ИначеЕсли Документ.Исправление Тогда
			НомерИсправленияСФ = 1;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ИсходныйДокумент", Основание.ДокументПоступления);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Ссылка КАК Ссылка,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсправления КАК ДатаИсправления
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.Исправление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		ТекущаяСтрока = РезультатЗапроса[0];
		НомерИсправленияСФ  = Макс(НомерИсправленияСФ, ТекущаяСтрока.НомерИсправления);		
		
		Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			Если НЕ СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента ИЛИ ПереопределятьПараметрыИсходногоДокумента Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрока.НомерИсправления) Тогда
					СтрокаОснования.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправления;
					СтрокаОснования.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.ДатаИсправления;
					СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.ИсправляемыйСчетФактура) Тогда
		Документ.КППКонтрагента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Документ.ИсправляемыйСчетФактура, "КППКонтрагента");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Документ.КППКонтрагента) И Документ.ДокументыОснования.Количество() > 0 
		И НЕ ТипЗнч(Документ.ДокументыОснования[0].ДокументОснование.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		Документ.КППКонтрагента = УчетНДС.ПолучитьКПППодразделенияКонтрагента(Документ.ДокументыОснования[0].ДокументОснование, "Грузоотправитель")
	КонецЕсли;
	
	Если Документ.Исправление Тогда		
		Документ.НомерИсправления = НомерИсправленияСФ + 1;
	КонецЕсли;
		
	Документ = УстановитьКодВидаОперацииСФПолученная(КодВидаОперацииОснования, Документ, Основание);
		
КонецПроцедуры

&НаСервере
Функция ЕстьСписаниеНДСПоОснованию(Документ = Неопределено, ДокументОснование = Неопределено) Экспорт
	
	Если ДокументОснование = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ДатаОснования = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументОснование, "Дата");
	Запрос.УстановитьПараметр("Организация",				Документ.Организация);
	Запрос.УстановитьПараметр("СчетФактура",				ДокументОснование);
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода",	НачалоКвартала(ДатаОснования));
	Запрос.УстановитьПараметр("КонецНалоговогоПериода",		КонецКвартала(ДатаОснования));
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСписание
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Организация = &Организация
	|	И НДСПредъявленный.СчетФактура = &СчетФактура
	|	И НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.НДСсписанНаРасходы)
	|	И НДСПредъявленный.Период >= &НачалоНалоговогоПериода
	|	И НДСПредъявленный.Период <= &КонецНалоговогоПериода";
				   
	Результат	= Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
 	
КонецФункции

&НаСервере
Функция ЗаполнитьНаОснованииИсправленияСФВыданная(Основание, СтрокаОснованиеВТабличнойЧасти, Документ) Экспорт
	
	Если ЗначениеЗаполнено(Основание.ИсправляемыйДокументРеализации) И (ТипЗнч(Основание.ИсправляемыйДокументРеализации.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации")) 
		И Основание.ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение 
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		УточнениеСообщения = "корректировочных"; 
	Иначе
		УточнениеСообщения = "исправленных";
	КонецЕсли;
	
	ОснованиеДляВидаОперации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание);
	
	Если ЗначениеЗаполнено(ОснованиеДляВидаОперации.ВалютаДокумента) 
		И ОснованиеДляВидаОперации.ВалютаДокумента <> мВалютаРегламентированногоУчета 
		И ЗначениеЗаполнено(ОснованиеДляВидаОперации.ДоговорКонтрагента)
		И ОснованиеДляВидаОперации.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		#Если Клиент Тогда
			Предупреждение("Для договоров в условных единицах, выставление " + УточнениеСообщения + " счетов-фактур, оформленных в валюте, не поддерживается.
			|Документ-основание должен быть оформлен в рублях.");
		#КонецЕсли
		Возврат Документ;			
	КонецЕсли;
	
	Если НЕ Основание.КорректироватьНДС Тогда
		ВызватьИсключение "Для корректировки реализации с отражением корректировки ""Только в печатной форме"" счет-фактура не выставляется";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание.ИсправляемыйДокументРеализации) И (ТипЗнч(Основание.ИсправляемыйДокументРеализации.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации")) 
		И Основание.ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение 
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
		Документ.Исправление = Истина;
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
		Документ.Исправление = Ложь;
	Иначе
		
		СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактурыСФВыданная(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
		СписокТиповНалоговыйАгент = ПолучитьСписокТиповПоВидуСчетаФактурыСФВыданная(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
		СписокТиповКорректировочный = ПолучитьСписокТиповПоВидуСчетаФактурыСФВыданная(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		СписокТиповНаРеализацию = ПолучитьСписокТиповПоВидуСчетаФактурыСФВыданная(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
		
		Если СписокТиповНалоговыйАгент.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
			Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
		ИначеЕсли СписокТиповНаАванс.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда			
			Если ТипЗнч(ОснованиеДляВидаОперации.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
				ИЛИ ТипЗнч(ОснованиеДляВидаОперации.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
				ИЛИ ТипЗнч(ОснованиеДляВидаОперации.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			Иначе
				Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
			КонецЕсли;
		ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
			Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
		Иначе
			Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
		КонецЕсли;
		
		Исправление = Истина;
	КонецЕсли;
	
	ИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание.ИсправляемыйДокументРеализации, "СчетФактураВыданный");
	
	// Определение кода вида операции для исправления
	// Определение номера и даты исходного документа
		
	ИспользоватьПараметрыСчетаФактуры = Ложь;
	Если ТипЗнч(Основание.ДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ИспользоватьПараметрыСчетаФактуры = Истина;
		ИсходныйДокумент = Основание.ДокументРеализации;
	ИначеЕсли ТипЗнч(Основание.ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание.ДокументРеализации);
		Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ИспользоватьПараметрыСчетаФактуры = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДокументРеализации = Основание.ДокументРеализации;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
	
	Если ТипЗнч(УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;
	
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Документ.Дата);
	КодВидаОперацииОснования = "";
	НомерИсправленияСФ = 0;
	
	Если ИспользоватьПараметрыСчетаФактуры Тогда
	// Основанием первоначальной корректировки является документ "Счет-фактура выданный"
	// реквизиты необходимо взять из этого счета-фактуры
		
		ПараметрыСчетаФактуры = Новый Структура("НомерИсходногоДокумента, ДатаИсходногоДокумента");
			
		ДанныеИсходногоДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ИсходныйДокумент,
			"КодВидаОперации,КодВидаОперацииНаУменьшение,Дата");
			
		КодВидаОперацииОснования = ДанныеИсходногоДокумента.КодВидаОперации;
		Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
		   И ВерсияКодовВидовОпераций > 1 Тогда
			Документ.КодВидаОперацииНаУменьшение = ДанныеИсходногоДокумента.КодВидаОперацииНаУменьшение;
		КонецЕсли;
		
		ПараметрыСчетаФактуры.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ИсходныйДокумент.ПолучитьОбъект());
		ПараметрыСчетаФактуры.ДатаИсходногоДокумента  = ДанныеИсходногоДокумента.Дата;
		
		Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ЗаполнитьЗначенияСвойств(СтрокаОснованиеВТабличнойЧасти, ПараметрыСчетаФактуры);
		Иначе
			ЗаполнитьЗначенияСвойств(Документ, ПараметрыСчетаФактуры);
		КонецЕсли;
		
	Иначе
		
		ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание.ДокументРеализации);
		
		Запрос = Новый Запрос;		
		Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
		Запрос.УстановитьПараметр("КорректировочныйСчетФактура", Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка.Номер
		|	КОНЕЦ КАК НомерИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка.Дата
		|	КОНЕЦ КАК ДатаИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента
		|		КОГДА НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления
		|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента
		|		КОГДА НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Дата
		|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерИсправления,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КорректировочныйСчетФактура,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Исправление КАК Исправление,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
		|			ТОГДА ВЫБОР
		|					КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|							И СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперацииНаУменьшение <> """"
		|						ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперацииНаУменьшение
		|					ИНАЧЕ ""18""
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КодВидаОперацииНаУменьшение
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
		|	И НЕ СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество() > 0 Тогда
			
			ТекущаяСтрока = РезультатЗапроса[0];

			Если КорректировкаКорректировочногоСчетаФактуры Тогда
				
				СтрокаОснованиеВТабличнойЧасти.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());	
				СтрокаОснованиеВТабличнойЧасти.ДатаИсходногоДокумента  = ТекущаяСтрока.Дата;
				
				НомерИсправляемогоКорректировочногоДокумента = ТекущаяСтрока.НомерИсправляемогоКорректировочногоДокумента;
				ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.ДатаИсправляемогоКорректировочногоДокумента;
				
				Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
				
			Иначе
				
				ПараметрыСчетаФактуры = Новый Структура("НомерИсходногоДокумента, ДатаИсходногоДокумента, НомерИсправленияИсходногоДокумента,
					|ДатаИсправленияИсходногоДокумента, УчитыватьИсправлениеИсходногоДокумента");
				
				НомерИсправленияСФ  = ТекущаяСтрока.НомерИсправления;
				
				Если НЕ ТекущаяСтрока.КорректировочныйСчетФактура И НЕ ТекущаяСтрока.Исправление Тогда
					ПараметрыСчетаФактуры.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());	
				Иначе
					ПараметрыСчетаФактуры.НомерИсходногоДокумента = ТекущаяСтрока.НомерИсходногоДокумента;
				КонецЕсли;
				
				ПараметрыСчетаФактуры.ДатаИсходногоДокумента  = ТекущаяСтрока.ДатаИсходногоДокумента;
				
				ПараметрыСчетаФактуры.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправленияИсходногоДокумента;
				ПараметрыСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.ДатаИсправленияИсходногоДокумента;
				
				НомерИсправляемогоКорректировочногоДокумента = ТекущаяСтрока.НомерИсправляемогоКорректировочногоДокумента;
				ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.ДатаИсправляемогоКорректировочногоДокумента;
				
				Если ТекущаяСтрока.КорректировочныйСчетФактура 
				   И Документ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
					Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
				КонецЕсли;
				
				Если ТекущаяСтрока.КорректировочныйСчетФактура И НЕ ТекущаяСтрока.Исправление Тогда
					НомерИсправляемогоКорректировочногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());
					ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.Ссылка.Дата;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекущаяСтрока.НомерИсправленияИсходногоДокумента)
					ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.ДатаИсправленияИсходногоДокумента) Тогда
					ПараметрыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
				
				Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
					ЗаполнитьЗначенияСвойств(СтрокаОснованиеВТабличнойЧасти, ПараметрыСчетаФактуры);
				Иначе
					ЗаполнитьЗначенияСвойств(Документ, ПараметрыСчетаФактуры);
				КонецЕсли;
				
			КонецЕсли;
			
			КодВидаОперацииОснования = ТекущаяСтрока.КодВидаОперации;
			Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
			   И ВерсияКодовВидовОпераций > 1 Тогда
				Документ.КодВидаОперацииНаУменьшение = ТекущаяСтрока.КодВидаОперацииНаУменьшение;
			КонецЕсли;
			
		ИначеЕсли Документ.Исправление Тогда
			НомерИсправленияСФ = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определение кода вида операции для исправления
	// и номера исправления
	Запрос = Новый Запрос;		
	Запрос.УстановитьПараметр("ИсходныйДокумент", Основание.ДокументРеализации);		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		ТекущаяСтрока = РезультатЗапроса[0];
		НомерИсправленияСФ  = Макс(НомерИсправленияСФ, ТекущаяСтрока.НомерИсправления);			
		
		Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			Если НЕ СтрокаОснованиеВТабличнойЧасти.УчитыватьИсправлениеИсходногоДокумента Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрока.НомерИсправления) Тогда
					СтрокаОснованиеВТабличнойЧасти.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправления;
					СтрокаОснованиеВТабличнойЧасти.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.Ссылка.Дата;
					СтрокаОснованиеВТабличнойЧасти.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Документ = УстановитьКодВидаОперацииСФВыданная(КодВидаОперацииОснования,Документ);
	//УстановитьКодВидаОперации(КодВидаОперацииОснования);
	
	Если ЗначениеЗаполнено(Документ.ИсправляемыйСчетФактура) Тогда
		Документ.КППКонтрагента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Документ.ИсправляемыйСчетФактура, "КППКонтрагента");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Документ.КППКонтрагента) И Документ.ДокументыОснования.Количество() > 0 Тогда
		Документ.КППКонтрагента = УчетНДС.ПолучитьКПППодразделенияКонтрагента(Документ.ДокументыОснования[0].ДокументОснование, "Грузополучатель");
	КонецЕслИ;

	Если Исправление Тогда		
		Документ.НомерИсправления = НомерИсправленияСФ + 1;
	КонецЕсли;
	
	Возврат Документ;
КонецФункции

&НаСервере
Функция СчетФактураПолученВКварталеПоступленияЦенностей(ДокументОснование  = Неопределено, Документ) Экспорт
	
	Если ДокументОснование  = Неопределено Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ДатаОснования = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументОснование, "Дата");
	
	Возврат КонецКвартала(Документ.Дата) = КонецКвартала(ДатаОснования);
	
КонецФункции

&НаСервере
Функция ЗаполнитьСчетФактуруНаАвансСФПолученная(ОбнулятьСуммы = Истина, Документ) Экспорт
	
	Если Документ.ДокументыОснования.Количество() = 0 Тогда
		Возврат Документ;
	КонецЕсли;
	
	УпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Документ.Организация, Документ.Дата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Документ.ДокументыОснования[0].ДокументОснование);
	Запрос.УстановитьПараметр("Организация", Документ.Организация);
	Запрос.УстановитьПараметр("Контрагент", Документ.Контрагент);
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ);
	
	Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", МассивСчетов);
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ХозрасчетныйОбороты.СуммаОборот КАК СуммаДокумента,
	               |	ХозрасчетныйОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСумма,
	               |	ХозрасчетныйОбороты.Субконто1 КАК Поставщик,
	               |	ХозрасчетныйОбороты.Субконто2 КАК ДоговорКонтрагента,
	               |	ХозрасчетныйОбороты.ВалютаКор КАК ВалютаРасчетов
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			,
	               |			,
	               |			Регистратор,
	               |			Счет В (&СчетУчетаРасчетовПоАвансам),
	               |			&МассивСубконто,
	               |			Организация = &Организация
	               |				И Субконто1 = &Контрагент,
	               |			,
	               |			) КАК ХозрасчетныйОбороты
	               |ГДЕ
	               |	ХозрасчетныйОбороты.Регистратор = &ДокументОснование
	               |	И ХозрасчетныйОбороты.СуммаОборот > 0";
				   
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 ИЛИ ОбнулятьСуммы Тогда

		СуммаДокумента = 0;
		
		Документ.Авансы.Очистить();
		
	КонецЕсли;
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.НДС18_118);
	
	ОшибкаПриЗаполнении = Ложь;
	СтрокаСообщения = "";
	Для Каждого СтрокаТаблицы Из Результат Цикл
		
		Если ОбщегоНазначения.ЕстьТабЧастьДокумента("РасшифровкаПлатежа", Документ.ДокументыОснования[0].ДокументОснование.Метаданные()) Тогда
			
			ТаблицаПоСтавкам = Новый ТаблицаЗначений();
			ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			
			Для Каждого СтрПлатежа Из Документ.ДокументыОснования[0].ДокументОснование.РасшифровкаПлатежа Цикл
				Если СтрПлатежа.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента Тогда
					ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
					Если ТекСтавкаНДС = Неопределено Тогда
						ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
					КонецЕсли; 
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
					СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаПоСтавкам.Свернуть("СтавкаНДС", "Сумма");
			
			//Распределение суммы рег учета
			МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТаблицы.СуммаДокумента, ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
			Если Не МассивСумм = Неопределено Тогда
				ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
			Иначе
				МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
			КонецЕсли; 
			
			Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				
				Если СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
					Или СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					// НДС с авансов под экспортные поставки не начисляется
					Продолжить;
				КонецЕсли;
				
				ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
				СуммаДокумента		= СуммаДокумента + СтрокаПоСтавке.Сумма;
				НовыйАванс = Документ.Авансы.Добавить();
				НовыйАванс.Сумма = СтрокаПоСтавке.Сумма;
				НовыйАванс.СтавкаНДС	  = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС20_120);;
				НовыйАванс.СуммаНДС		  = УчетНДС.РассчитатьСуммуНДС(НовыйАванс.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(НовыйАванс.СтавкаНДС));
				ОшибкаПриЗаполнении = Ложь;
			КонецЦикла;
			
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Документ);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Документ.Авансы.Очистить();
				СуммаДокумента = 0;
			Иначе
				Прервать;
			КонецЕсли;

		Иначе
			ЗаполнитьЗначенияСвойств(Документ, СтрокаТаблицы);
			СтрокаАванса = Документ.Авансы.Добавить();
			СтрокаАванса.Сумма = СтрокаТаблицы.СуммаДокумента;
			СтрокаАванса.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120;
			СтрокаАванса.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаАванса.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаАванса.СтавкаНДС));
			СтрокаСообщения = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента
		И Документ.Дата >= '20150101' Тогда
		СуммаДокументаКомиссия 		= Документ.Авансы.Итог("Сумма");
		СуммаНДСДокументаКомиссия 	= Документ.Авансы.Итог("СуммаНДС");
	Иначе
		СуммаДокументаКомиссия 		= 0;
		СуммаНДСДокументаКомиссия 	= 0;
	КонецЕсли;
	
	СуммаНДСДокумента = Документ.Авансы.Итог("СуммаНДС");
	
	Если Результат.Количество() = 0 И ОбнулятьСуммы Тогда 
		ДокументОснование = Неопределено;
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаДокумента = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаНДСДокумента = 0;
	КонецЕсли;		
	
	Если ОшибкаПриЗаполнении Тогда
		Документ.ДокументыОснования.Очистить();
		ДокументОснование = Неопределено;
		Документ.ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаДокумента = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаНДСДокумента = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;	
	
	Возврат Документ;
КонецФункции

&НаСервере
Функция УстановитьКодВидаОперацииСФПолученная(КодВидаОперацииОснования = Неопределено, Документ = Неопределено, ДокументОснования = Неопределено) Экспорт
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Документ.Дата);
	Если ВерсияПостановления <> 2 Тогда
		Возврат Документ;
	КонецЕсли;
	
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Документ.Дата);
	
	Если Документ.Исправление ИЛИ Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		Если ЗначениеЗаполнено(КодВидаОперацииОснования) Тогда
			Документ.КодВидаОперации = УчетНДС.АктуальныйКодВидаОперации(КодВидаОперацииОснования, ВерсияКодовВидовОпераций);
			Возврат Документ;
		КонецЕсли;
	КонецЕсли;

	Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		
		Если ВерсияКодовВидовОпераций = 1 Тогда
			Документ.КодВидаОперацииНаУменьшение = "";
		ИначеЕсли ВерсияКодовВидовОпераций = 2 Тогда
			Документ.КодВидаОперацииНаУменьшение = "18";
		Иначе
			Документ.КодВидаОперацииНаУменьшение = ?(Документ.СводныйКорректировочный, "01", "18");
		КонецЕсли;

	ИначеЕсли Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда
		
		МассивКомиссияПоЗакупке = Новый Массив;
		Для Каждого СтрокаТабличнойЧасти ИЗ Документ.ДокументыОснования Цикл
			ТипОснования = ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование);
			Если ТипОснования = Тип("ДокументСсылка.ОтражениеНДСКВычету")
				И ВерсияКодовВидовОпераций > 1 Тогда
				// Код операции указывается в документе
				КодВидаОперацииИзДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаТабличнойЧасти.ДокументОснование, "КодВидаОперации");
				Документ.КодВидаОперации = УчетНДС.АктуальныйКодВидаОперации(КодВидаОперацииИзДокумента, ВерсияКодовВидовОпераций);
				Прервать;
			ИначеЕсли ВерсияКодовВидовОпераций = 3 Тогда
				// По умолчанию код "01", но необходимо проверить случай "смешанной" закупки (код 15),
				// которая может быть оформлена документом "Поступление товаров услуг".
				Документ.КодВидаОперации = "01";
				Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					МассивКомиссияПоЗакупке.Добавить(СтрокаТабличнойЧасти.ДокументОснование);
				Иначе
					МассивКомиссияПоЗакупке.Очистить();
					Прервать;
				КонецЕсли;
			// Коды операций до 1 июля 2016 года.
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				Документ.КодВидаОперации = "03";
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				Документ.КодВидаОперации = "04";
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
				МассивКомиссияПоЗакупке.Добавить(СтрокаТабличнойЧасти.ДокументОснование);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивКомиссияПоЗакупке.Количество() > 0 Тогда
			
			СчетаУчетаКомиссионногоТовара = Новый Массив;
			СчетаУчетаКомиссионногоТовара.Добавить(ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументыОснования", МассивКомиссияПоЗакупке);
			Запрос.УстановитьПараметр("СчетаУчетаКомиссионногоТовара", СчетаУчетаКомиссионногоТовара);
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка,
			|	1 КАК ЕстьКомиссионныеТоварыИУслуги,
			|	0 КАК ЕстьСобственныеТоварыИУслуги
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
			|ГДЕ
			|	ПоступлениеТоваровУслугТовары.Ссылка В(&ДокументыОснования)
			|	И ПоступлениеТоваровУслугТовары.СчетУчета В(&СчетаУчетаКомиссионногоТовара)
			|	И ПоступлениеТоваровУслугТовары.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПоступлениеТоваровУслугТовары.Ссылка,
			|	0,
			|	1
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
			|ГДЕ
			|	ПоступлениеТоваровУслугТовары.Ссылка В(&ДокументыОснования)
			|	И НЕ(ПоступлениеТоваровУслугТовары.СчетУчета В (&СчетаУчетаКомиссионногоТовара)
			|				И ПоступлениеТоваровУслугТовары.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПоступлениеТоваровУслугУслуги.Ссылка,
			|	0,
			|	1
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
			|ГДЕ
			|	ПоступлениеТоваровУслугУслуги.Ссылка В(&ДокументыОснования)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПоступлениеТоваровУслугАгентскиеУслуги.Ссылка,
			|	1,
			|	0
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.АгентскиеУслуги КАК ПоступлениеТоваровУслугАгентскиеУслуги
			|ГДЕ
			|	ПоступлениеТоваровУслугАгентскиеУслуги.Ссылка В(&ДокументыОснования)
			|ИТОГИ
			|	СУММА(ЕстьКомиссионныеТоварыИУслуги),
			|	СУММА(ЕстьСобственныеТоварыИУслуги)
			|ПО
			|	ОБЩИЕ";
			
			Документ.КодВидаОперации = "";
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Если Выборка.Следующий() Тогда
					Если Выборка.ЕстьСобственныеТоварыИУслуги > 0
						И Выборка.ЕстьКомиссионныеТоварыИУслуги > 0 Тогда
						Документ.КодВидаОперации = ?(ВерсияКодовВидовОпераций < 3, "01;04", "15");
					ИначеЕсли ВерсияКодовВидовОпераций < 3 И Выборка.ЕстьКомиссионныеТоварыИУслуги > 0 Тогда 
						Документ.КодВидаОперации = "04";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВерсияКодовВидовОпераций = 3 Тогда 
		Если Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
			ИЛИ Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
			Документ.КодВидаОперации = "02";
		КонецЕсли;
	// Коды операций до 1 июля 2016 года
	ИначеЕсли Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		Если Документ.ДокументыОснования.Количество() > 0
			И ТипЗнч(Документ.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			Документ.КодВидаОперации = "05";
		Иначе
			Документ.КодВидаОперации = "02";
		КонецЕсли;
	ИначеЕсли Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		Документ.КодВидаОперации = "05";
	Иначе
		Для Каждого СтрокаТабличнойЧасти ИЗ Документ.ДокументыОснования Цикл
			Если ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				Документ.КодВидаОперации = "04";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Документ.КодВидаОперации = "" Тогда
		Документ.КодВидаОперации = "01";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверитьДобавитьГТД(КодГТД, ТГДНаименование)
	ГТДВБазе = Истина;
	СтранаВБазе = Истина;
	//КодГТД = СокрЛП(СтрокаДокументаПоступления.НомерГТД.Код);
	НомерГТД = Справочники.НомераГТД.НайтиПоКоду(КодГТД);
	Если НомерГТД.Пустая() Тогда
		Сообщить("ОШИБКА: В базе данных не найден номер ГТД с кодом "+КодГТД);
		//Сообщить("ОШИБКА: В базе данных не найден номер ГТД "+СтрокаДокументаПоступления.НомерГТД.Наименование+" с кодом "+КодГТД);
		ГТДВБазе = Ложь;
	//Иначе СтрокаДокументаРеализации.НомерГТД = НомерГТД;
	КонецЕсли;
	//
	
	Если Не ГТДВБазе Тогда
		СпрГТД = Справочники.НомераГТД;
        НовыйГТД = СпрГТД.СоздатьЭлемент();
		НовыйГТД.Код = КодГТД;
        Попытка
        	НовыйГТД.Записать();
        Исключение
        	Сообщить("ОШИБКА: не смог добавить ГТД - "+КодГТД);
        КонецПопытки;		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьДобавитьСтрану(КодСтраны, СтранаНаименование)
	//Если НЕ СтрокаДокументаПоступления.СтранаПроисхождения.Пустая() Тогда  
		//КодСтраны = СокрЛП(СтрокаДокументаПоступления.СтранаПроисхождения.Код);
		СтранаВБазе = Истина;
		СтранаПроисхождения = Справочники.СтраныМира.НайтиПоКоду(КодСтраны);
		Если СтранаПроисхождения.Пустая() Тогда
			Сообщить("Не найдена страна с кодом: "+КодСтраны);
			//Сообщить("Не найдена страна "+СтрокаДокументаПоступления.СтранаПроисхождения.Наименование+" с кодом: "+КодСтраны);
			СтранаВБазе = Ложь;
			//Иначе СтрокаДокументаРеализации.СтранаПроисхождения = СтранаПроисхождения;		
		КонецЕсли;
	//КонецЕсли;
	Если Не СтранаВБазе Тогда
		//СпрСтраны		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт
	
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
		
		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		СсылкаНоменклатура = Справочники.Номенклатура.НайтиПоКоду(СтрокаТаблицыИсточника.Номенклатура.Код);
		СсылкаНоменклатура2 = Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТаблицыИсточника.Номенклатура.Наименование);

		Если СсылкаНоменклатура.Пустая() И НЕ СсылкаНоменклатура2.Пустая() Тогда
			СсылкаНоменклатура = СсылкаНоменклатура2;	
		КонецЕсли;
		Если СсылкаНоменклатура.Пустая() Тогда
			Сообщить("ОШИБКА: В базе данных не найдена номенклатура с кодом "+СсылкаНоменклатура.Код);
			Продолжить;
		Иначе
			СтрокаТаблицыПриемника.Номенклатура = СсылкаНоменклатура;
		КонецЕсли;
		СчетаУчета     = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, СсылкаНоменклатура,Склад);
		СтрокаТаблицыПриемника.СчетУчета = СчетаУчета.СчетУчета;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

&НаСервере
Функция ЭтоСсылка(СсылкаИлиОбъект) Экспорт
    _ТипЗнч = ТипЗнч (СсылкаИлиОбъект) ;
    Если Найти(ВРег(_ТипЗнч), ВРег("Ссылка")) > 0 Тогда
        Рез = Истина;
    ИначеЕсли Найти(ВРег(_ТипЗнч), ВРег("Объект")) > 0 Тогда
        Рез = Ложь;
	//ИначеЕсли ЗначениеЗаполнено(СсылкаИлиОбъект) Тогда
	//   Рез = Истина;
   Иначе
      Рез = Неопределено;// =)))))
 
    КонецЕсли;
    Возврат ( Рез  );
 //   _ТипЗнч = ТипЗнч (СсылкаИлиОбъект) ;
 //   Если Найти(_ТипЗнч, "Ссылка.") > 0 или Найти(_ТипЗнч, "Ref.") > 0 Тогда
 //       Рез = Истина;
 //   ИначеЕсли Найти(_ТипЗнч, "Объект.") > 0 или Найти(_ТипЗнч, "Ref.") > 0 Тогда
 //       Рез = Ложь;
 //   ИначеЕсли ЗначениеЗаполнено(СсылкаИлиОбъект) Тогда
 //      Рез = Истина;
 //  Иначе
 //     Рез = = Неопределено;// =)))))
 //
 //
 //   КонецЕсли;
 //   Возврат ( Рез  );
КонецФункции

&НаСервере
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));

	Возврат СписокВидовДоговоров;

КонецФункции


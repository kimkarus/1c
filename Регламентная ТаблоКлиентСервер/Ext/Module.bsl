&НаСервере
Функция ЗаказВыполнен(ТЗ_Партнер) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапросаНайтиОтгрузкуПоРеализации();
	Запрос.УстановитьПараметр("Основание", ТЗ_Партнер.ЗаказКлиента);
	//
	Результат = Запрос.Выполнить();
	РезультатТЗ = Результат.Выгрузить();
	//
	КоличествоПозиций = 0;
	ЗаказВыполненПолностью = Ложь;
	ДатаОтгрузки = Неопределено;
	Статус = Неопределено;
	СтатусСчетчикОдинаковых = 0;
	СтатусСчетчикКОтбору = 0;
	СтатусСчетчикКОтгрузке = 0;
	СтатусСчетчикОтгружен = 0;
	КоличествоОрдеров = РезультатТЗ.Количество();
	//
	Для каждого Строка из РезультатТЗ Цикл
		КоличествоПозиций 	= КоличествоПозиций + Строка.Количество;
		СтрокаСтатус = Строка(Строка.Статус);
		Если СтрокаСтатус = "Отгружен" ИЛИ ДатаОтгрузки = Неопределено Тогда 
			Если ДатаОтгрузки = Неопределено Тогда ДатаОтгрузки	= Строка.ДатаОтгрузки; КонецЕсли; 
		КонецЕсли; 
		Если Строка.ДатаОтгрузки < ДатаОтгрузки Тогда ДатаОтгрузки = Строка.ДатаОтгрузки; КонецЕсли;
		СтатусСчетчикКОтбору = ?(СтрокаСтатус = "К отбору", СтатусСчетчикКОтбору + 1, СтатусСчетчикКОтбору);
		СтатусСчетчикКОтгрузке = ?(СтрокаСтатус = "К отгрузке", СтатусСчетчикКОтгрузке + 1, СтатусСчетчикКОтгрузке);
		СтатусСчетчикОтгружен = ?(СтрокаСтатус = "Отгружен", СтатусСчетчикОтгружен + 1, СтатусСчетчикОтгружен);
		КоличествоПозиций 	= КоличествоПозиций + Строка.Количество;
	КонецЦикла;
	Если СтатусСчетчикОтгружен >= КоличествоОрдеров Тогда
		ЗаказВыполненПолностью = Истина;
		Статус = "Отгружен";
	КонецЕсли;
	Если СтатусСчетчикКОтгрузке > 0 Тогда
		Статус = "К отгрузке";
	КонецЕсли;
		Если СтатусСчетчикКОтбору > 0 Тогда
		Статус = "В работе";
	КонецЕсли;
	Если ДатаОтгрузки = Неопределено Тогда
		Статус = "В работе";
	КонецЕсли;
	АнализВремениОкончания = Новый Структура;
	АнализВремениОкончания.Вставить("ЗаказВыполнен",ЗаказВыполненПолностью);
	АнализВремениОкончания.Вставить("КоличествоПозиций",КоличествоПозиций);
	АнализВремениОкончания.Вставить("ДатаОтгрузки",ДатаОтгрузки);
	АнализВремениОкончания.Вставить("Статус",Статус);

	Возврат АнализВремениОкончания;
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаказыПоПартнерам(Объект, Форма, Дата) Экспорт
	Объект.ТаблицаДанныеЗапроса.Очистить();
	Объект.ТаблицаОжидания.Очистить();
	Объект.ТаблицаОжиданияОбработка.Очистить();
	//
	ДатаСегодня = ТекущаяДата();
	НачалоПериода = НачалоДня(Дата);
	КонецПериода = КонецДня(Дата);
	ТекущееВремя = ДатаСегодня - ДатаСегодня; 
	//
	Запрос = Новый Запрос();
	//Запрос.Текст = ТекстЗапросаПолучитьЗаказыКлиентов();
	Запрос.Текст = ТекстЗапросаПолучитьРеализацииКлиентов();
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	//
	Форма.ТаблицаДанныеЗапросаДинамический.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	Форма.ТаблицаДанныеЗапросаДинамический.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецПериода);
	Форма.ТаблицаДанныеЗапросаДинамический.Параметры.УстановитьЗначениеПараметра("Склад", Объект.Склад);
	//
	Результат = Запрос.Выполнить();
	РезультатТЗ = Результат.Выгрузить();
	//РезультатТЗ = Получить_ТЗ_Из_ДинамическогоСписка();
	Объект.ТаблицаДанныеЗапроса.Загрузить(РезультатТЗ);
	//
	ТЗ_Партнеры = РезультатТЗ.Скопировать();
	Если ТЗ_Партнеры.Количество() < 1 Тогда Возврат; КонецЕсли;
	ТЗ_Партнеры.Сортировать("ДатаВремяЗаказа Возр");
	ДатаВремяМинимум = ТЗ_Партнеры[0].ДатаВремяЗаказа;
	ДатаВремяМинимумШаг = ДатаВремяМинимум;
	//
	КоэффициентУвеличенияВремени = РассчитатьКоэффициентУвеличенияВремени(Объект);
	//
	Для каждого Строка из ТЗ_Партнеры Цикл
		СтрокаОО = Объект.ТаблицаОжиданияОбработка.Добавить();
		СтрокаОО.Партнер = Строка(Строка.Партнер);
		СтрокаОО.Контрагент = Строка(Строка.Контрагент);
		//	
		СтрокаОО.ДатаВремяМинимум = ДатаВремяМинимумШаг;
		Если СтрокаОО.ДатаВремяМинимум < Строка.ДатаВремяЗаказа Тогда
			СтрокаОО.Начало = Строка.ДатаВремяЗаказа;
			Иначе
			СтрокаОО.Начало = СтрокаОО.ДатаВремяМинимум;
		КонецЕсли;
		
		КоличестваПоПартнеру = ПолучитьКоличестваПоПартнеру(Строка);
		
		СтрокаОО.ДатаВремяОкончания = СтрокаОО.Начало + 
			(КоличестваПоПартнеру.КоличествоЭмалей * Объект.СреднееВремяЭмалиМинут * 60) * КоэффициентУвеличенияВремени +
			(КоличестваПоПартнеру.КоличествоРозлива * Объект.СреднееВремяРозливаМинут * 60) * КоэффициентУвеличенияВремени +
			(КоличестваПоПартнеру.КоличествоБольше25НаЧислоТар * Объект.СреднееВремяЭмалиБольше25КГМинут * 60) * КоэффициентУвеличенияВремени;

		СтрокаОО.Количество = КоличестваПоПартнеру.ОбщееКоличество;
		СтрокаОО.ЧислоНеобходимоВремениПланМинут = Окр((СтрокаОО.ДатаВремяОкончания - СтрокаОО.Начало) / 60, 3);
		//Поиск времени окончания
		СостояниеВыполненияЗаказаКлиента = ЗаказВыполнен(Строка);
		Если СостояниеВыполненияЗаказаКлиента.ЗаказВыполнен И СостояниеВыполненияЗаказаКлиента.ДатаОтгрузки <> Неопределено Тогда
			СтрокаОО.ДатаВремяОкончания = СостояниеВыполненияЗаказаКлиента.ДатаОтгрузки;
		КонецЕсли;
		//

		НеобходимоВремени = СтрокаОО.ДатаВремяОкончания - СтрокаОО.Начало;
		СтрокаОО.ЧислоНеобходимоВремениМинут = Окр((СтрокаОО.ДатаВремяОкончания - СтрокаОО.Начало) / 60, 3);
		СтрокаОО.ЧислоРазницаПланФактМинут = СтрокаОО.ЧислоНеобходимоВремениПланМинут - СтрокаОО.ЧислоНеобходимоВремениМинут;
		СтрокаОО.НеобходимоВремени = СтрокаВернутьЧасыМинуты(НеобходимоВремени);
		
		ОсталосьВремени = СтрокаОО.ДатаВремяОкончания - ДатаСегодня;
		
		СтрокаОО.СтатусОрдеров = СостояниеВыполненияЗаказаКлиента.Статус;
		
		СтрокаОО.Осталось = СтрокаВернутьЧасыМинуты(ОсталосьВремени);
		СтрокаОО.Статус = "В работе";
		Если ОсталосьВремени < 1 Тогда СтрокаОО.Статус = "Выдача"; КонецЕсли;
		Если СтрокаОО.СтатусОрдеров = "К отгрузке" Тогда 
			СтрокаОО.Статус = "Выдача";
			СтрокаОО.ОсталосьВремени = -1;
		Иначе
			СтрокаОО.ОсталосьВремени = ОсталосьВремени;	
		КонецЕсли;
		СтрокаОО.КоличествоСборокРазборок = Число(Строка.Количество);
		ДатаВремяМинимумШаг = СтрокаОО.ДатаВремяОкончания;
		//
	КонецЦикла;
	Для каждого Строка из Объект.ТаблицаОжиданияОбработка Цикл
		ОсталосьВремениМинут = Окр(Строка.ОсталосьВремени / 60, 0);
		ОсталосьВремяОжидания = ?(ОсталосьВремениМинут >= -(Объект.СреднееВремяВыдачи), Истина, Ложь);
		ОсталисьНеОтгруженныеОрдера = ?(Строка.СтатусОрдеров <> "Отгружен", Истина, Ложь);
		ВыводитьНаТабло = Ложь;
		Если (ОсталосьВремяОжидания И ОсталисьНеОтгруженныеОрдера)
			ИЛИ (Не ОсталосьВремяОжидания И ОсталисьНеОтгруженныеОрдера) Тогда
			ВыводитьНаТабло = Истина;
		КонецЕсли;

		Если ВыводитьНаТабло Тогда 
			СтрокаО = Объект.ТаблицаОжидания.Добавить();
			Если Строка.Контрагент <> Строка.Партнер Тогда
				СтрокаО.Партнер = Строка.Партнер + ", " + Строка.Контрагент;
			Иначе
				СтрокаО.Партнер = Строка.Партнер;	
			КонецЕсли;
			СтрокаО.Статус = Строка.Статус;
			Если Строка.ОсталосьВремени < 0 Тогда СтрокаО.Статус = "Выдача"; КонецЕсли;
			СтрокаО.Начало = Строка.Начало;
			СтрокаО.Осталось = Строка.Осталось;
			Если Строка.ОсталосьВремени < 0 Тогда СтрокаО.Осталось = ""; КонецЕсли;
			СтрокаО.Количество = Строка.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СтрокаВернутьЧасыМинуты(НеобходимоВремени) Экспорт
	СтрокаНеобходимоВремени = " ";
	
	НеобходимоЧасов = Окр(НеобходимоВремени / 60 / 60, 3, РежимОкругления.Окр15как10);
	Если НеобходимоЧасов >= 1 Тогда
		СтрокаНеобходимоВремени = СтрокаНеобходимоВремени + Формат(НеобходимоЧасов, "ЧДЦ=0") + " ч. ";
		РазницаОстаток = МодульЧисла(НеобходимоВремени - НеобходимоЧасов * 60 * 60);
		НеобходимоМинутОстаток = Окр(РазницаОстаток / 60, 0, РежимОкругления.Окр15как10);
		Если НеобходимоМинутОстаток > 0 Тогда
			СтрокаНеобходимоВремени = СтрокаНеобходимоВремени + НеобходимоМинутОстаток + " мин. ";
		КонецЕсли;
	Иначе
		НеобходимоМинут = Окр(НеобходимоВремени / 60, 0, РежимОкругления.Окр15как10);
		СтрокаНеобходимоВремени = СтрокаНеобходимоВремени + НеобходимоМинут + " мин. ";
	КонецЕсли;
	Возврат СтрокаНеобходимоВремени;
КонецФункции

Функция МодульЧисла(Число) Экспорт
    Возврат Макс(Число, -Число);
КонецФункции

Функция РассчитатьКоэффициентУвеличенияВремени(Объект) Экспорт
	Коэффициент = 1;
	Если Объект.ЧислоСотрудников < Объект.ВремяРассчитаноДляЧислаСотрудников Тогда
		Для Счетчик = 1 по Объект.ВремяРассчитаноДляЧислаСотрудников - Объект.ЧислоСотрудников Цикл 
			Коэффициент = Коэффициент + 1;
		КонецЦикла;
	ИначеЕсли Объект.ЧислоСотрудников > Объект.ВремяРассчитаноДляЧислаСотрудников Тогда
		Коэффициент = Коэффициент / (Объект.ЧислоСотрудников - Объект.ВремяРассчитаноДляЧислаСотрудников);
	Иначе
		Коэффициент = 1;
	КонецЕсли;
	Возврат Коэффициент;
КонецФункции

&НаСервере
Процедура СохранитьОбщиеНастройки(Объект, Форма) Экспорт
	
	КлючОбъекта = "Табло";
	
	ДанныеНастройки = Новый Структура(ПолучитьСтруктуруНастройки(),
									  Объект.Склад, Объект.СреднееВремяЭмалиМинут, Объект.СреднееВремяРозливаМинут, Объект.СреднееВремяЭмалиБольше25КГМинут, Объект.СреднееВремяВыдачи, Объект.ЧислоСотрудников, Объект.ВремяРассчитаноДляЧислаСотрудников);
    //ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, "Настройки", ДанныеНастройки, ОписаниеПервойНастройки, "Табло");
	//
	НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КлючОбъекта.Установить(КлючОбъекта);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись = ПодготовкаСтрокиДляЗаписи(НоваяЗапись, КлючОбъекта, ДанныеНастройки, "Табло");
	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
		НоваяЗапись = НаборЗаписей[0];
		НоваяЗапись = ПодготовкаСтрокиДляЗаписи(НоваяЗапись, КлючОбъекта, ДанныеНастройки, "Табло");
	Иначе
		
	КонецЕсли; 
	НаборЗаписей.Записать();
КонецПроцедуры

Функция ПолучитьСтруктуруНастройки() Экспорт
	Возврат "Склад, СреднееВремяЭмалиМинут, СреднееВремяРозливаМинут, СреднееВремяЭмалиБольше25КГМинут, СреднееВремяВыдачи, ЧислоСотрудников, ВремяРассчитаноДляЧислаСотрудников";
КонецФункции

&НаСервере
Функция ПодготовкаСтрокиДляЗаписи(НоваяЗапись, КлючОбъекта, ДанныеНастройки, Пользователь) Экспорт
	
    НоваяЗапись.КлючОбъекта = КлючОбъекта;
	НоваяЗапись.КлючСвойства = "Настройки";
	НоваяЗапись.Пользователь = Пользователь;
	НоваяЗапись.Значение = Новый ХранилищеЗначения(ДанныеНастройки);
	
	Возврат НоваяЗапись;
КонецФункции

Функция ПолучитьКоличестваПоПартнеру(ТЗ_Партнер) Экспорт
	КоличествоЭмалей = 0;
	КоличествоРозлива = 0;
	КоличествоБольше25 = 0;
	//Для каждого Строка из ТЗ_Партнер Цикл
	КоличествоЭмалей = КоличествоЭмалей + Число(?(ЗначениеЗаполнено(ТЗ_Партнер.Колеровка),ТЗ_Партнер.Колеровка,0));
	КоличествоРозлива = КоличествоРозлива + (Число(?(ЗначениеЗаполнено(ТЗ_Партнер.Количество),ТЗ_Партнер.Количество,0)) - Число(?(ЗначениеЗаполнено(ТЗ_Партнер.Колеровка),ТЗ_Партнер.Колеровка,0)));
	КоличествоБольше25 = КоличествоБольше25 + Число(?(ЗначениеЗаполнено(ТЗ_Партнер.Больше25),ТЗ_Партнер.Больше25,0));
	//КонецЦикла;
	КоличестваПартнера = Новый Структура;
	КоличестваПартнера.Вставить("КоличествоЭмалей", КоличествоЭмалей);
	КоличестваПартнера.Вставить("КоличествоРозлива", КоличествоРозлива);
	КоличестваПартнера.Вставить("КоличествоБольше25", КоличествоБольше25);
	КоличестваПартнера.Вставить("КоличествоБольше25НаЧислоТар", Число(ТЗ_Партнер.Больше25НаЧислоТар));
	КоличестваПартнера.Вставить("ОбщееКоличество", КоличествоЭмалей + КоличествоРозлива + КоличествоБольше25);
	Возврат КоличестваПартнера; 
КонецФункции

Функция ПолучитьКоличестваПоПартнеруСборкаРазборка(ТЗ_Партнер) Экспорт
	КоличествоЭмалей = 0;
	КоличествоРозлива = 0;
	КоличествоБольше25 = 0;
	Для каждого Строка из ТЗ_Партнер Цикл
		КоличествоЭмалей = КоличествоЭмалей + Строка.Колеровка;
		КоличествоРозлива = КоличествоРозлива + (Строка.Количество - Строка.Колеровка);
		КоличествоБольше25 = КоличествоБольше25 + Строка.Больше25;
	КонецЦикла;
	КоличестваПартнера = Новый Структура;
	КоличестваПартнера.Вставить("КоличествоЭмалей", КоличествоЭмалей);
	КоличестваПартнера.Вставить("КоличествоРозлива", КоличествоРозлива);
	КоличестваПартнера.Вставить("КоличествоБольше25", КоличествоБольше25);
	КоличестваПартнера.Вставить("ОбщееКоличество", ТЗ_Партнер.Количество());
	Возврат КоличестваПартнера; 
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаказНаСборкуПоПартнерам(Объект, Форма) Экспорт
	Объект.ТаблицаДанныеЗапроса.Очистить();
	Объект.ТаблицаОжидания.Очистить();
	Объект.ТаблицаОжиданияОбработка.Очистить();
	//
	ДатаСегодня = ТекущаяДата();
	НачалоПериода = НачалоДня(ДатаСегодня);
	КонецПериода = КонецДня(ДатаСегодня);
	ТекущееВремя = ДатаСегодня - ДатаСегодня; 
	//
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапросаПолучитьСборкиРазборки();
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	//
	
	Результат = Запрос.Выполнить();
	РезультатТЗ = Результат.Выгрузить();
	Объект.ТаблицаДанныеЗапроса.Загрузить(РезультатТЗ);
	//
	
	ТЗ_Партнеры = РезультатТЗ.Скопировать();
	ТЗ_Партнеры.Свернуть("Партнер");
	//
	Для каждого Строка из ТЗ_Партнеры Цикл
		СтрокаОО = Объект.ТаблицаОжиданияОбработка.Добавить();
		СтрокаОО.Партнер = Строка(Строка.Партнер);
		//
		Отбор = Новый Структура;
		Отбор.Вставить("Партнер", Строка(СтрокаОО.Партнер));
		ТЗ_Партнер = РезультатТЗ.Скопировать(Отбор);
		ТЗ_Партнер.Сортировать("ДатаВремяСборки Возр");
		ТЗ_Партнер.Сортировать("ДатаВремяЗаказа Возр");

		СтрокаОО.ДатаВремяМинимум = ТЗ_Партнер[0].ДатаВремяСборки;
		СтрокаОО.Начало = СтрокаОО.ДатаВремяМинимум;
		//КоличествоСборокРазборок = ТЗ_Партнер.Количество();
		КоличестваПоПартнеру = ПолучитьКоличестваПоПартнеруСборкаРазборка(ТЗ_Партнер);
		
		СтрокаОО.ДатаВремяОкончания = СтрокаОО.Начало + 
			КоличестваПоПартнеру.КоличествоЭмалей * Объект.СреднееВремяЭмалиМинут * 60 +
			КоличестваПоПартнеру.КоличествоРозлива * Объект.СреднееВремяРозливаМинут * 60 +
			КоличестваПоПартнеру.КоличествоБольше25 * Объект.СреднееВремяЭмалиБольше25КГМинут * 60;
		НеобходимоВремени = СтрокаОО.ДатаВремяОкончания - СтрокаОО.Начало;
		СтрокаОО.НеобходимоВремени = СтрокаВернутьЧасыМинуты(НеобходимоВремени);
		ОсталосьВремени = СтрокаОО.ДатаВремяОкончания - ДатаСегодня;
		СтрокаОО.Осталось = СтрокаВернутьЧасыМинуты(ОсталосьВремени);
		СтрокаОО.Статус = "В работе";
		СтрокаОО.КоличествоСборокРазборок = КоличестваПоПартнеру.ОбщееКоличество;
	КонецЦикла;
КонецПроцедуры

Функция ТекстЗапросаПолучитьСборкиРазборки() Экспорт
	Возврат "ВЫБРАТЬ
	|	ЗаказНаСборку.Партнер.Наименование КАК Партнер,
	|	ЗаказНаСборку.Основание КАК ЗаказКлиента,
	|	ЗаказНаСборку.Основание.Дата КАК ДатаВремяЗаказа,
	|	ЗаказНаСборку.Дата КАК ДатаВремяСборки,
	|	ЗаказНаСборку.Ссылка КАК ЗаказНаСборку
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ЗаказНаСборку
	|ГДЕ
	|	ЗаказНаСборку.Дата >= &НачалоПериода
	|	И ЗаказНаСборку.Дата <= &КонецПериода
	|	И ЗаказНаСборку.Склад = &Склад
	|	И ЗаказНаСборку.Проведен = ИСТИНА
	|	И ЗаказНаСборку.ПометкаУдаления = Ложь";
КонецФункции

Функция ТекстЗапросаПолучитьЗаказыКлиентов() Экспорт
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиента.Партнер.Наименование КАК Партнер,
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента,
	|	ЗаказКлиента.Дата КАК ДатаВремяЗаказа,
	|	ЗаказКлиента.Ссылка КАК Заказ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиентаТовары.Номенклатура) КАК Количество
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ЗаказКлиентаТовары.Ссылка = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиента.Дата >= &НачалоПериода
	|	И ЗаказКлиента.Дата <= &КонецПериода
	|   И ЗаказКлиента.Склад = &Склад
	|   И ЗаказКлиента.ПометкаУдаления = Ложь
	|   И ЗаказКлиента.Проведен = ИСТИНА
	|	И ЗаказКлиентаТовары.Номенклатура.Наименование ПОДОБНО ""%розлив%""
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка,
	|ЗаказКлиента.Партнер.Наименование,
	|ЗаказКлиента.Основание,
	|	ЗаказКлиента.Дата";
КонецФункции

Функция ТекстЗапросаПолучитьРеализацииКлиентов() Экспорт
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыКОтгрузке.ДокументОтгрузки.Партнер.Наименование КАК Партнер,
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК ЗаказКлиента,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки <> ТоварыКОтгрузке.Регистратор
	|				ТОГДА ТоварыКОтгрузке.Регистратор.Дата
	|			ИНАЧЕ ТоварыКОтгрузке.ДокументОтгрузки.Дата
	|		КОНЕЦ) КАК ДатаВремяЗаказа,
	|	ТоварыКОтгрузке.ДокументОтгрузки.Основание КАК Заказ,
	|	ТоварыКОтгрузке.Номенклатура КАК Количество,
	| 	ТоварыКОтгрузке.ДокументОтгрузки.Контрагент.Наименование КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Ссылка.Наименование = ""Колеровка""
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Родитель.Ссылка.Наименование = ""Колеровка""
	|					ТОГДА 1
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Родитель.Родитель.Ссылка.Наименование = ""Колеровка""
	|							ТОГДА 1
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Родитель.Родитель.Родитель.Ссылка.Наименование = ""Колеровка""
	|									ТОГДА 1
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Родитель.Родитель.Родитель.Ссылка.Наименование = ""Колеровка""
	|											ТОГДА 1
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Ссылка.Наименование = ""Колеровка""
	|													ТОГДА 1
	|												ИНАЧЕ ВЫБОР
	|														КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Ссылка.Наименование = ""Колеровка""
	|															ТОГДА 1
	|													КОНЕЦ
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Колеровка,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.КОтгрузке + ТоварыКОтгрузке.Собирается > 25
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Больше25,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.КОтгрузке + ТоварыКОтгрузке.Собирается > 25
	|				ТОГДА ВЫРАЗИТЬ((ТоварыКОтгрузке.КОтгрузке + ТоварыКОтгрузке.Собирается) / 25 - 1 + 0.4999999999999999999999 КАК ЧИСЛО(15, 0))
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Больше25НаЧислоТар,
	|	ТоварыКОтгрузке.ДокументОтгрузки.Партнер.Наименование
	|ПОМЕСТИТЬ ВыборкаЭмалей
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|ГДЕ
	|	ТоварыКОтгрузке.Период >= &НачалоПериода
	|	И ТоварыКОтгрузке.Период <= &КонецПериода
	|	И ТоварыКОтгрузке.Склад = &Склад
	|	И ТоварыКОтгрузке.Номенклатура.Наименование ПОДОБНО ""%розлив%""
	|	И ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И ТоварыКОтгрузке.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.ДокументОтгрузки.Партнер.Наименование,
	| 	ТоварыКОтгрузке.ДокументОтгрузки.Контрагент.Наименование,
	|	ТоварыКОтгрузке.ДокументОтгрузки,
	|	ТоварыКОтгрузке.Номенклатура,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Ссылка.Наименование = ""Колеровка""
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Родитель.Ссылка.Наименование = ""Колеровка""
	|					ТОГДА 1
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Родитель.Родитель.Ссылка.Наименование = ""Колеровка""
	|							ТОГДА 1
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Родитель.Родитель.Родитель.Ссылка.Наименование = ""Колеровка""
	|									ТОГДА 1
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Родитель.Родитель.Родитель.Ссылка.Наименование = ""Колеровка""
	|											ТОГДА 1
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Ссылка.Наименование = ""Колеровка""
	|													ТОГДА 1
	|												ИНАЧЕ ВЫБОР
	|														КОГДА ТоварыКОтгрузке.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Ссылка.Наименование = ""Колеровка""
	|															ТОГДА 1
	|													КОНЕЦ
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ТоварыКОтгрузке.ДокументОтгрузки.Основание,
	|	ТоварыКОтгрузке.ДокументОтгрузки.Партнер.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаЭмалей.Партнер,
	|	ВыборкаЭмалей.ЗаказКлиента,
	|	ВыборкаЭмалей.ДатаВремяЗаказа КАК ДатаВремяЗаказа,
	|	ВыборкаЭмалей.Заказ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВыборкаЭмалей.Количество) КАК Количество,
	|	СУММА(ВыборкаЭмалей.Колеровка) КАК Колеровка,
	|	СУММА(ВыборкаЭмалей.Больше25) КАК Больше25,
	|	СУММА(ВыборкаЭмалей.Больше25НаЧислоТар) КАК Больше25НаЧислоТар,
	|	ВыборкаЭмалей.Контрагент
	|ИЗ
	|	ВыборкаЭмалей КАК ВыборкаЭмалей
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыборкаЭмалей.ЗаказКлиента,
	|	ВыборкаЭмалей.Партнер,
	|	ВыборкаЭмалей.Заказ,
	|	ВыборкаЭмалей.ДатаВремяЗаказа,
	|	ВыборкаЭмалей.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВремяЗаказа";
КонецФункции

Функция ТекстЗапросаНайтиОтгрузкиПоСборкеРазборке() Экспорт
	Возврат "ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка,
	|	ПриходныйОрдерНаТовары.Распоряжение КАК Основание,
	|	ПриходныйОрдерНаТовары.Статус
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА &Основание
	|	И ПриходныйОрдерНаТовары.Ссылка.Проведен = ИСТИНА
	|	И ПриходныйОрдерНаТовары.ПометкаУдаления = Ложь";
КонецФункции

Функция ТекстЗапросаНайтиОтгрузкуПоРеализации() Экспорт
	Возврат "ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыТовары.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасходныйОрдерНаТоварыТовары.Номенклатура) КАК Количество,
	|	РасходныйОрдерНаТоварыТовары.Ссылка.ДатаОтгрузки,
	|	РасходныйОрдерНаТоварыТовары.Ссылка.Статус
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.Товары КАК РасходныйОрдерНаТоварыТовары
	|ГДЕ
	|	РасходныйОрдерНаТоварыТовары.Ссылка.Распоряжение = &Основание
	|	И РасходныйОрдерНаТоварыТовары.Ссылка.Помещение.Наименование ПОДОБНО ""Колеровка/Розлив""
	|	И РасходныйОрдерНаТоварыТовары.Ссылка.Проведен = ИСТИНА
	|	И РасходныйОрдерНаТоварыТовары.Ссылка.ПометкаУдаления = Ложь
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерНаТоварыТовары.Ссылка,
	|	РасходныйОрдерНаТоварыТовары.Ссылка.ДатаОтгрузки";
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаказыПоПартнерамHTML() Экспорт
	НастройкиКлиент = ЗагрузитьОбщиеНастройкиКлиент();
	//Объект.ТаблицаДанныеЗапроса.Очистить();
	//Объект.ТаблицаОжидания.Очистить();
	//Объект.ТаблицаОжиданияОбработка.Очистить();
	//
	ДатаСегодня = ТекущаяДата();
	НачалоПериода = НачалоДня(ДатаСегодня);
	КонецПериода = КонецДня(ДатаСегодня);
	ТекущееВремя = ДатаСегодня - ДатаСегодня; 
	//
	Запрос = Новый Запрос();
	//Запрос.Текст = ТекстЗапросаПолучитьЗаказыКлиентов();
	Запрос.Текст = ТаблоКлиентСервер.ТекстЗапросаПолучитьРеализацииКлиентов();
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Склад", НастройкиКлиент.Склад);
	//
	//Форма.ТаблицаДанныеЗапросаДинамический.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	//Форма.ТаблицаДанныеЗапросаДинамический.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецПериода);
	//Форма.ТаблицаДанныеЗапросаДинамический.Параметры.УстановитьЗначениеПараметра("Склад", НастройкиКлиент.Склад);
	//
	Результат = Запрос.Выполнить();
	РезультатТЗ = Результат.Выгрузить();
	//РезультатТЗ = Получить_ТЗ_Из_ДинамическогоСписка();
	//
	ТЗ_Партнеры = РезультатТЗ.Скопировать();
	Если ТЗ_Партнеры.Количество() < 1 Тогда Возврат; КонецЕсли;
	ТЗ_Партнеры.Сортировать("ДатаВремяЗаказа Возр");
	ДатаВремяМинимум = ТЗ_Партнеры[0].ДатаВремяЗаказа;
	ДатаВремяМинимумШаг = ДатаВремяМинимум;
	//
	КоэффициентУвеличенияВремени = ТаблоКлиентСервер.РассчитатьКоэффициентУвеличенияВремени(НастройкиКлиент);
	//
	ТЗ_ТаблицаОжиданияОбработка = СоздатьТЗ_ТаблицаОжиданияОбработка();
	ТЗ_ТаблицаОжидания = СоздатьТЗ_ТаблицаОжидания();
	//
	Для каждого Строка из ТЗ_Партнеры Цикл
		СтрокаОО = ТЗ_ТаблицаОжиданияОбработка.Добавить();
		СтрокаОО.Партнер = Строка(Строка.Партнер);
		СтрокаОО.Контрагент = Строка(Строка.Контрагент);
		//	
		СтрокаОО.ДатаВремяМинимум = ДатаВремяМинимумШаг;
		Если СтрокаОО.ДатаВремяМинимум < Строка.ДатаВремяЗаказа Тогда
			СтрокаОО.Начало = Строка.ДатаВремяЗаказа;
			Иначе
			СтрокаОО.Начало = СтрокаОО.ДатаВремяМинимум;
		КонецЕсли;
		
		КоличестваПоПартнеру = ТаблоКлиентСервер.ПолучитьКоличестваПоПартнеру(Строка);
		
		СтрокаОО.ДатаВремяОкончания = СтрокаОО.Начало + 
			(КоличестваПоПартнеру.КоличествоЭмалей * НастройкиКлиент.СреднееВремяЭмалиМинут * 60) * КоэффициентУвеличенияВремени +
			(КоличестваПоПартнеру.КоличествоРозлива * НастройкиКлиент.СреднееВремяРозливаМинут * 60) * КоэффициентУвеличенияВремени +
			(КоличестваПоПартнеру.КоличествоБольше25НаЧислоТар * НастройкиКлиент.СреднееВремяЭмалиБольше25КГМинут * 60) * КоэффициентУвеличенияВремени;

		СтрокаОО.Количество = КоличестваПоПартнеру.ОбщееКоличество;
		СтрокаОО.ЧислоНеобходимоВремениПланМинут = Окр((СтрокаОО.ДатаВремяОкончания - СтрокаОО.Начало) / 60, 3);
		//Поиск времени окончания
		СостояниеВыполненияЗаказаКлиента = ТаблоКлиентСервер.ЗаказВыполнен(Строка);
		Если СостояниеВыполненияЗаказаКлиента.ЗаказВыполнен И СостояниеВыполненияЗаказаКлиента.ДатаОтгрузки <> Неопределено Тогда
			СтрокаОО.ДатаВремяОкончания = СостояниеВыполненияЗаказаКлиента.ДатаОтгрузки;
		КонецЕсли;
		//

		НеобходимоВремени = СтрокаОО.ДатаВремяОкончания - СтрокаОО.Начало;
		СтрокаОО.ЧислоНеобходимоВремениМинут = Окр((СтрокаОО.ДатаВремяОкончания - СтрокаОО.Начало) / 60, 3);
		СтрокаОО.ЧислоРазницаПланФактМинут = СтрокаОО.ЧислоНеобходимоВремениПланМинут - СтрокаОО.ЧислоНеобходимоВремениМинут;
		СтрокаОО.НеобходимоВремени = ТаблоКлиентСервер.СтрокаВернутьЧасыМинуты(НеобходимоВремени);
		
		ОсталосьВремени = СтрокаОО.ДатаВремяОкончания - ДатаСегодня;
		
		СтрокаОО.СтатусОрдеров = СостояниеВыполненияЗаказаКлиента.Статус;
		
		СтрокаОО.Осталось = ТаблоКлиентСервер.СтрокаВернутьЧасыМинуты(ОсталосьВремени);
		СтрокаОО.Статус = "В работе";
		Если ОсталосьВремени < 1 Тогда СтрокаОО.Статус = "Выдача"; КонецЕсли;
		Если СтрокаОО.СтатусОрдеров = "К отгрузке" Тогда 
			СтрокаОО.Статус = "Выдача";
			СтрокаОО.ОсталосьВремени = -1;
		Иначе
			СтрокаОО.ОсталосьВремени = ОсталосьВремени;	
		КонецЕсли;
		СтрокаОО.КоличествоСборокРазборок = Число(Строка.Количество);
		ДатаВремяМинимумШаг = СтрокаОО.ДатаВремяОкончания;
		//
	КонецЦикла;
	
	
	КоличествоВыдача = 0;
	Для каждого Строка из ТЗ_ТаблицаОжиданияОбработка Цикл
		ОсталосьВремениМинут = Окр(Строка.ОсталосьВремени / 60, 0);
		ОсталосьВремяОжидания = ?(ОсталосьВремениМинут >= -(НастройкиКлиент.СреднееВремяВыдачи), Истина, Ложь);
		ОсталисьНеОтгруженныеОрдера = ?(Строка.СтатусОрдеров <> "Отгружен", Истина, Ложь);
		ВыводитьНаТабло = Ложь;
		Если (ОсталосьВремяОжидания И ОсталисьНеОтгруженныеОрдера)
			ИЛИ (Не ОсталосьВремяОжидания И ОсталисьНеОтгруженныеОрдера) Тогда
			ВыводитьНаТабло = Истина;
		КонецЕсли;

		Если ВыводитьНаТабло Тогда 
			СтрокаО = ТЗ_ТаблицаОжидания.Добавить();
			Если Строка.Контрагент <> Строка.Партнер Тогда
				СтрокаО.Партнер = Строка.Партнер + ", " + Строка.Контрагент;
			Иначе
				СтрокаО.Партнер = Строка.Партнер;	
			КонецЕсли;
			СтрокаО.Статус = Строка.Статус;
			Если Строка.ОсталосьВремени < 0 Тогда СтрокаО.Статус = "Выдача"; КонецЕсли;
			СтрокаО.Начало = Строка.Начало;
			СтрокаО.Осталось = Строка.Осталось;
			Если Строка.ОсталосьВремени < 0 Тогда СтрокаО.Осталось = ""; КонецЕсли;
			СтрокаО.Количество = Строка.Количество;
			
			Если СтрокаО.Статус = "Выдача" Тогда
				КоличествоВыдача = КоличествоВыдача + 1;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	//Объект.ТаблицаОжиданияОбработка.Загрузить(ТЗ_ТаблицаОжиданияОбработка);
	//Объект.ТаблицаОжидания.Загрузить(ТЗ_ТаблицаОжидания);
	НастройкиКлиент.Вставить("КоличествоСтрок", ТЗ_ТаблицаОжидания.Количество());
	НастройкиКлиент.Вставить("КоличествоВыдача", КоличествоВыдача);
	ЗаписатьТаблицуОжиданияHTML(ТЗ_ТаблицаОжидания, НастройкиКлиент);
	
КонецПроцедуры

Процедура ЗаписатьТаблицуОжиданияHTML(ТЗ, Параметры)
	Страница = Новый ТекстовыйДокумент;
	Страница.ДобавитьСтроку("<html>");
	//<meta http-equiv="refresh" content="30"/>
	Страница.ДобавитьСтроку("<link href='/style.css' rel='stylesheet' />");
	Страница.ДобавитьСтроку("<script type='text/javascript' src='/auto.js' rel='stylesheet'></script>");
	Страница.ДобавитьСтроку("<head>");
	Страница.ДобавитьСтроку("<title>Табло</title>");
	Страница.ДобавитьСтроку("</head>");
	Страница.ДобавитьСтроку("<body>");
	Страница.ДобавитьСтроку("<table cellspacing='0'>");
	Страница.ДобавитьСтроку("<thead>");
	Страница.ДобавитьСтроку("<tr>");
	Для каждого Колонка из ТЗ.Колонки Цикл
			Если Колонка.Имя = "Партнер" Тогда
				Страница.ДобавитьСтроку("<td class = 'partner'>");
			ИначеЕсли Колонка.Имя = "Начало" Тогда
				Страница.ДобавитьСтроку("<td class = 'hide'>");
			ИначеЕсли Колонка.Имя = "Количество" Тогда
				Страница.ДобавитьСтроку("<td class = 'hide'>");
			ИначеЕсли Колонка.Имя = "Статус" Тогда
				Страница.ДобавитьСтроку("<td class = 'status'>");
			Иначе
				Страница.ДобавитьСтроку("<td>");
			КонецЕсли;
		Страница.ДобавитьСтроку(Колонка.Имя);
		Страница.ДобавитьСтроку("</td>");
	КонецЦикла;
	Страница.ДобавитьСтроку("</tr>");
	Страница.ДобавитьСтроку("</thead>");
	Страница.ДобавитьСтроку("<tbody>");
	Для каждого Строка из ТЗ Цикл
		Страница.ДобавитьСтроку("<tr>");
		Для каждого Колонка из ТЗ.Колонки Цикл
			Если Колонка.Имя = "Партнер"  Тогда
				Страница.ДобавитьСтроку("<td class = 'partner'>");
			ИначеЕсли Колонка.Имя = "Начало" Тогда
				Страница.ДобавитьСтроку("<td class = 'hide'>");
			ИначеЕсли Колонка.Имя = "Количество" Тогда
				Страница.ДобавитьСтроку("<td class = 'hide'>");
			ИначеЕсли Колонка.Имя = "Статус" Тогда
				Страница.ДобавитьСтроку("<td class = 'status'>");
			Иначе
				Страница.ДобавитьСтроку("<td>");
			КонецЕсли;
			
			Страница.ДобавитьСтроку(Строка[Колонка.Имя]);
			Страница.ДобавитьСтроку("</td>");
		КонецЦикла;
		Страница.ДобавитьСтроку("</tr>");
	КонецЦикла;
	Страница.ДобавитьСтроку("</tbody>");
	Страница.ДобавитьСтроку("</table>");
	Страница.ДобавитьСтроку("<div class = 'params'>");
	Страница.ДобавитьСтроку("<div class = 'count_people'>"+Параметры.ЧислоСотрудников+"</div>");
	Если ТЗ.Количество() <= 0 Тогда
		Страница.ДобавитьСтроку("<div id = 'show_background'> </div>");
	Иначе
		Страница.ДобавитьСтроку("<div id = 'show_background' class = 'hide'> </div>");	
	КонецЕсли;
	Страница.ДобавитьСтроку("<div id = 'count' class = 'hide'>"+Параметры.КоличествоСтрок+"</div>");
	Страница.ДобавитьСтроку("<div id = 'count_ready' class = 'hide'>"+Параметры.КоличествоВыдача+"</div>");
	Страница.ДобавитьСтроку("</div>");	
	Страница.ДобавитьСтроку("</body>");
	Страница.ДобавитьСтроку("</html>");
	Страница.Записать("\\192.168.10.175\tablo\index.html");
	//ТЗ.Записать("\\192.168.10.175\Transfer\hello_tz.html", ТипФайлаТабличногоДокумента.html);
КонецПроцедуры

&НаСервере
Функция ЗагрузитьОбщиеНастройкиКлиент() Экспорт
	Настройки = ПолучитьНастройкиФормы("Табло", "Табло");
	СтруктураНастроеек = Новый Структура("Склад, СреднееВремяЭмалиМинут, СреднееВремяРозливаМинут, СреднееВремяЭмалиБольше25КГМинут, СреднееВремяВыдачи, ЧислоСотрудников, ВремяРассчитаноДляЧислаСотрудников");
	//
	Если Настройки = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	НастройкиЗначения = ПолучитьЗначениеНастройки(Настройки);	
	Если НастройкиЗначения.Склад <> Неопределено Тогда
		СтруктураНастроеек.Склад 							= Настройки.Склад;
	КонецЕсли;
	Если НастройкиЗначения.СреднееВремяЭмалиМинут <> Неопределено Тогда
		СтруктураНастроеек.СреднееВремяЭмалиМинут 			= Настройки.СреднееВремяЭмалиМинут;
	КонецЕсли;
	Если НастройкиЗначения.СреднееВремяРозливаМинут <> Неопределено Тогда
		СтруктураНастроеек.СреднееВремяРозливаМинут 		= Настройки.СреднееВремяРозливаМинут;
	КонецЕсли;
	Если НастройкиЗначения.СреднееВремяЭмалиБольше25КГМинут <> Неопределено Тогда
		СтруктураНастроеек.СреднееВремяЭмалиБольше25КГМинут = Настройки.СреднееВремяЭмалиБольше25КГМинут;
	КонецЕсли;
	Если НастройкиЗначения.СреднееВремяВыдачи <> Неопределено Тогда
		СтруктураНастроеек.СреднееВремяВыдачи 				= Настройки.СреднееВремяВыдачи;
	КонецЕсли;
	Если НастройкиЗначения.ЧислоСотрудников <> Неопределено Тогда
		СтруктураНастроеек.ЧислоСотрудников 				= Настройки.ЧислоСотрудников;
	КонецЕсли;
	Если НастройкиЗначения.ВремяРассчитаноДляЧислаСотрудников <> Неопределено Тогда
		СтруктураНастроеек.ВремяРассчитаноДляЧислаСотрудников 				= Настройки.ВремяРассчитаноДляЧислаСотрудников;
	КонецЕсли;
	
	Возврат СтруктураНастроеек;
КонецФункции

&НаСервере
Функция СоздатьТЗ_ТаблицаОжиданияОбработка() Экспорт
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ДатаВремяМинимум", Новый ОписаниеТипов("Дата"));
	ТЗ.Колонки.Добавить("Партнер", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	ТЗ.Колонки.Добавить("Осталось", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("НеобходимоВремени", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ДатаВремяОкончания", Новый ОписаниеТипов("Дата"));
	ТЗ.Колонки.Добавить("КоличествоСборокРазборок", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ВыполненоСборокРазборок", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ОсталосьСборокРазборок", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ОсталосьВремени", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("СтатусОрдеров", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ЧислоНеобходимоВремениПланМинут", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ЧислоНеобходимоВремениМинут", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ЧислоРазницаПланФактМинут", Новый ОписаниеТипов("Число"));
	
	Возврат ТЗ;
КонецФункции

&НаСервере
Функция СоздатьТЗ_ТаблицаОжидания() Экспорт
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Партнер", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Начало", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Осталось", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Возврат ТЗ;
КонецФункции

&НаСервере
Функция ПолучитьНастройкиФормы(КлючОбъекта, Пользоватлеь) Экспорт
	ДанныеНастройки = Неопределено;
	ДанныеНастройкиХранилищеЗначения = Неопределено;
	НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КлючОбъекта.Установить(КлючОбъекта);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 1 Тогда
		Если НаборЗаписей[0].КлючСвойства = "Настройки" Тогда
    		ДанныеНастройкиХранилищеЗначения = НаборЗаписей[0].Значение;
		КонецЕсли;
	Иначе
		ДанныеНастройкиХранилищеЗначения = Неопределено;	
	КонецЕсли;
	Если ДанныеНастройкиХранилищеЗначения <> Неопределено Тогда
		ДанныеНастройки = ДанныеНастройкиХранилищеЗначения.Получить();
	КонецЕсли;
	Возврат ДанныеНастройки;
КонецФункции

Функция ПолучитьЗначениеНастройки(Настройки) Экспорт
	НастройкиЗначения = Новый Структура(ТаблоКлиентСервер.ПолучитьСтруктуруНастройки());
	Для каждого Строка из НастройкиЗначения Цикл
		Найдено = Ложь;
		Для каждого СтрокаНастройки из Настройки Цикл
			Если Строка.Ключ = СтрокаНастройки.Ключ Тогда
				НастройкиЗначения.Вставить(Строка.Ключ, СтрокаНастройки.Значение);
				Найдено = Истина;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		Если Не Найдено Тогда НастройкиЗначения.Вставить(Строка.Ключ, Неопределено); КонецЕсли;
	КонецЦикла;
	Возврат НастройкиЗначения;
КонецФункции

&НаСервере
Процедура ОбновитьТаблоHTML() Экспорт
	ЗаполнитьЗаказыПоПартнерамHTML();
КонецПроцедуры
